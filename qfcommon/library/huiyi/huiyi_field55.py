# coding=utf-8
import binascii
import json

def parse(s):
    fields = {}

    index = 0
    while index < len(s):
        tag = s[index]
        # 判定tag是否占两个字节长度
        if 0b11111 == (ord(tag) & 0b11111):
            tag = s[index:index+2]
            index += 2
        else:
            index += 1
        tag = binascii.hexlify(tag)

        # 求长度
        length, length_len = _parse_len(s, index)
        index += length_len

        value = s[index:index+length]
        value = binascii.hexlify(value)
        index += length

        fields[tag] = {
            'len': length,
            'value': value
        }


    return fields

def build(data):
    """

    :param data:
    :type data: dict[str,dict]
    :return: hexlify str
    :rtype: str
    """

    fields = []
    for tag, info in data.items():
        field = tag + _build_len(info['len']) + info['value']

        fields.append(field)

    return ''.join(fields)

def _build_len(length):
    """

    :param length:
    :type length: int
    :return:
    :rtype: str
    """

    assert length >= 0 and length <= 65535

    if length <= 127:
        len_str = chr(length)
    elif 128 <= length and length <= 255:
        len_byte1 = chr(0x81)
        len_byte2 = chr(length)

        len_str = len_byte1+len_byte2
    else:
        len_byte1 = chr(0x82)
        len_byte2 = chr(length>>8)
        len_byte3 = chr(length&0xff)

        len_str = len_byte1+len_byte2+len_byte3

    return binascii.hexlify(len_str)

def _parse_len(s, index):
    length_byte1 = s[index]

    if 0 == (ord(length_byte1) & 0x80):  # 第一字节最高位为0, 长度为1字节
        length = ord(length_byte1)
        length_len = 1
    else:  # 第一字节最高位为1,T的长度为变长(第一字节右边7bit为T的长度)
        length_byte2 = s[index + 1]

        # 这是L的值 所占的字节. L的长度 所占字节固定为1
        remain_bytes = ord(length_byte1) & 0x7f
        assert remain_bytes == 1 or remain_bytes == 2
        length_len = 1 + remain_bytes

        if remain_bytes == 1:
            length = ord(length_byte2)
        else:  # remain_bytes == 2
            length_byte3 = s[index + 2]
            length = ord(length_byte2) << 8 + ord(length_byte3)

    return length, length_len


if __name__ == '__main__':
    s = '\x9f6\x02\x00\x84\x9f6\x02\x00\x84\x91\n\x12\xa9\x8f\x90{f\x96\xb800\x9f6\x02\x00\x84r\x11\x86\x0f\x04\xda\x9fy\n\x00\x00\x00\x08\x88\x00\x96u+5\x9f6\x02\x00\x84r\x11\x86\x0f\x04\xda\x9fy\n\x00\x00\x00\x08\x88\x00\x96u+5'
    # s = binascii.unhexlify('82027C009F360200989F26084E57BD965B98DC459F2701809F330360D8C8950500800460009F3704C7FD40E19F02060000000003009F03060000000000009F1A0201565F2A0201569A031605189C01509F101307010103A0A8FA010A010000000000C3482690')
    s = "\x82\x02|\x00\x9f6\x02\x00\x9d\x9f&\x08*\xd4\xbf\xb9:\xc7\x87W\x9f'\x01\x80\x9f3\x03`\xd8\xc8\x95\x05\x00\x80\x04`\x00\x9f7\x04\xc3kc\xf3\x9f\x02\x06\x00\x00\x00\x00\x02\x00\x9f\x03\x06\x00\x00\x00\x00\x00\x00\x9f\x1a\x02\x01V_*\x02\x01V\x9a\x03\x16\x05\x18\x9c\x01P\x9f\x10\x13\x07\x01\x01\x03\xa0\xa8\xfa\x01\n\x01\x00\x00\x00\x00\x00\x97\x1e\xf5\xe8"

    # group
    ## req
    s = binascii.unhexlify('82027c009f360200a09f2608424fb55b92c336469f2701809f330360d8c8950500800470009f3704f48c23cb9f02060000000004009f03060000000000009f1a0201565f2a0201569a031605189c01009f101307010103a0a8fa010a010000000000ddaf1da9')
    ## response
    s = binascii.unhexlify('9f360200a09f360200a0910a7cf2c6dec429323830309f360200a07211860f04da9f790a0000000888006e2cb12a9f360200a07211860f04da9f790a0000000888006e2cb12a')
    ## reversal
    s = binascii.unhexlify('82027C009F360200A09F26081063F27D19D619659F330360D8C8950500800470509F3704F48C23CB9F1A0201569A031605189F10130701010328A8FA010A010000000000DDAF1DA9')

    # reversal1
    # s = binascii.unhexlify('82027c009f360200a19f26083b4590646d84b6709f330360d8c89505008004e0509f3704630bf3749f1a0201569a031605189f10130701010328a8fa010a010000000000c4a1c2e8')
    s = binascii.unhexlify('8a0230309f360200b69f360200b6910a00c4155998c26a4530309f360200b67211860f04da9f790a0000000888009f29996f9f360200b67211860f04da9f790a0000000888009f29996f')
    a = binascii.unhexlify('9f360200b69f360200b6910a00c4155998c26a4530309f360200b67211860f04da9f790a0000000888009f29996f9f360200b67211860f04da9f790a0000000888009f29996f')
    s = '\x82\x02|\x00\x9f6\x02\x00\xbb\x9f&\x08:c6\\\xd8\xbf\xb9k\x9f3\x03`\xd8\xc8\x95\x05\x00\x80\x04`P\x9f7\x04\xf9\x89\x18!\x9f\x1a\x02\x01V\x9a\x03\x16\x05\x18\x9f\x10\x13\x07\x01\x01\x03(\xa8\xfa\x01\n\x01\x00\x00\x00\x00\x00\xdc=\x99\x97'

    # s = binascii.unhexlify('82027C009F360200BC9F2608DB471E089C625E2C9F330360D8C8950500800460509F3704F4216F0B9F1A0201569A031605189F10130701010328A8FA010A010000000000F6D6EC9D')
    s = binascii.unhexlify('950500800460509f360200bc9f10130701010328a8fa010a010000000000f6d6ec9d')
    s = binascii.unhexlify(
        '2608acb77bad5eb3858b9f2701009f10130705010320ac02010a010000000000707267289f3704886456849f360200129505000004e8009a031608309c01009f02060000000180005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838393834373937318408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101')
    s = binascii.unhexlify(
        '2608b180f4c4eba64a949f2701009f101307050103202402010a01000000000092c299ef9f3704bdc374519f360200109505000004e8009a031608309c01009f02060000005318005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838393834373937318408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101')

    s_l = [
        '2608acb77bad5eb3858b9f2701009f10130705010320ac02010a010000000000707267289f3704886456849f360200129505000004e8009a031608309c01009f02060000000180005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838393834373937318408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101',
        '2608b180f4c4eba64a949f2701009f101307050103202402010a01000000000092c299ef9f3704bdc374519f360200109505000004e8009a031608309c01009f02060000005318005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838393834373937318408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101',
        '2608c4a794a53b0585ba9f2701009f1013071b0103202402010a0100000000005ea4c7439f3704efddd9089f3602000f9505000004e8009a031608309c01009f02060000000590005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838393834373835308408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101',
        '260848f92078cd5536a39f2701009f101307050103202402010a010000000000a7c2f6fa9f3704717efb9f9f360200139505008004e8009a031608029c01009f02060000000500005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838383730343033368408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101',
        '26085c5929f27660fe1c9f2701009f101307050103202402010a010000000000012e11d69f3704cb6446dc9f360200449505000004e8009a031608029c01009f02060000004980005f2a02015682027c009f1a0201569f03060000000000009f33036040c89f34034203009f3501229f1e0838383730353330368408a0000003330101029f090200209f4104000000004f08a0000003330101029b02e800500b50424f43204352454449545f340101',

        '82027c009f360200a09f2608424fb55b92c336469f2701809f330360d8c8950500800470009f3704f48c23cb9f02060000000004009f03060000000000009f1a0201565f2a0201569a031605189c01009f101307010103a0a8fa010a010000000000ddaf1da9',
        '9f360200a09f360200a0910a7cf2c6dec429323830309f360200a07211860f04da9f790a0000000888006e2cb12a9f360200a07211860f04da9f790a0000000888006e2cb12a',
        '82027C009F360200A09F26081063F27D19D619659F330360D8C8950500800470509F3704F48C23CB9F1A0201569A031605189F10130701010328A8FA010A010000000000DDAF1DA9,'
        '82027C009F360200A29F26088832924C6C50CCD59F2701809F330360D8C89505000004E0009F37043B5B7B729F02060000000029509F03060000000000009F1A0201565F2A0201569A031608029C01509F101307010103A08002010A0100000000008257DA1E',
        '82027c009f3602002b9f2608d9adfd3aa7686afd9f2701809f330360d8c89505000004e0009f3704badb95829f02060000000204009f03060000000000009f1a0201565f2a0201569a031608029c01509f101307010103a02002010a010000000000253dd7f9',
        '9f3602002b',
    ]

    for s in s_l:
        print json.dumps(parse(s), indent=4)


    # s = 'O\x08\xa0\x00\x00\x033\x01\x01\x02\x9b\x02\xe8\x00P\x0bPBOC CREDIT_4\x01\x01'

