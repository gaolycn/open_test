#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerException(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReturnMsg:
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReturnMsg')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoodsArgs:
  """
  Attributes:
   - mchnt_id
   - goodsid
   - menuid
   - menutype
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'goodsid', None, None, ), # 2
    (3, TType.STRING, 'menuid', None, None, ), # 3
    (4, TType.STRING, 'menutype', None, None, ), # 4
    (5, TType.I32, 'page', None, 1, ), # 5
    (6, TType.I32, 'maxnum', None, 20, ), # 6
  )

  def __init__(self, mchnt_id=None, goodsid=None, menuid=None, menutype=None, page=thrift_spec[5][4], maxnum=thrift_spec[6][4],):
    self.mchnt_id = mchnt_id
    self.goodsid = goodsid
    self.menuid = menuid
    self.menutype = menutype
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.goodsid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.menuid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.menutype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodsArgs')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.goodsid is not None:
      oprot.writeFieldBegin('goodsid', TType.STRING, 2)
      oprot.writeString(self.goodsid)
      oprot.writeFieldEnd()
    if self.menuid is not None:
      oprot.writeFieldBegin('menuid', TType.STRING, 3)
      oprot.writeString(self.menuid)
      oprot.writeFieldEnd()
    if self.menutype is not None:
      oprot.writeFieldBegin('menutype', TType.STRING, 4)
      oprot.writeString(self.menutype)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 5)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 6)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mchnt_id)
    value = (value * 31) ^ hash(self.goodsid)
    value = (value * 31) ^ hash(self.menuid)
    value = (value * 31) ^ hash(self.menutype)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoodsInfo:
  """
  Attributes:
   - goodsid
   - goodsname
   - goodsprice
   - goodscnt
   - menuid
   - menuname
   - menutype
   - picaddr
   - unionid
   - goodsinfo
   - descr
   - goodsspec
   - mchnt_id
   - weight
   - goodsorgprice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'goodsid', None, None, ), # 1
    (2, TType.STRING, 'goodsname', None, None, ), # 2
    (3, TType.I64, 'goodsprice', None, None, ), # 3
    (4, TType.I64, 'goodscnt', None, None, ), # 4
    (5, TType.STRING, 'menuid', None, None, ), # 5
    (6, TType.STRING, 'menuname', None, None, ), # 6
    (7, TType.STRING, 'menutype', None, None, ), # 7
    (8, TType.STRING, 'picaddr', None, None, ), # 8
    (9, TType.STRING, 'unionid', None, None, ), # 9
    (10, TType.STRING, 'goodsinfo', None, None, ), # 10
    (11, TType.STRING, 'descr', None, None, ), # 11
    (12, TType.STRING, 'goodsspec', None, None, ), # 12
    (13, TType.STRING, 'mchnt_id', None, None, ), # 13
    (14, TType.I16, 'weight', None, None, ), # 14
    (15, TType.I64, 'goodsorgprice', None, None, ), # 15
  )

  def __init__(self, goodsid=None, goodsname=None, goodsprice=None, goodscnt=None, menuid=None, menuname=None, menutype=None, picaddr=None, unionid=None, goodsinfo=None, descr=None, goodsspec=None, mchnt_id=None, weight=None, goodsorgprice=None,):
    self.goodsid = goodsid
    self.goodsname = goodsname
    self.goodsprice = goodsprice
    self.goodscnt = goodscnt
    self.menuid = menuid
    self.menuname = menuname
    self.menutype = menutype
    self.picaddr = picaddr
    self.unionid = unionid
    self.goodsinfo = goodsinfo
    self.descr = descr
    self.goodsspec = goodsspec
    self.mchnt_id = mchnt_id
    self.weight = weight
    self.goodsorgprice = goodsorgprice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.goodsid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.goodsname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.goodsprice = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.goodscnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.menuid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.menuname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.menutype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.picaddr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.unionid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.goodsinfo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.descr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.goodsspec = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.weight = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.goodsorgprice = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodsInfo')
    if self.goodsid is not None:
      oprot.writeFieldBegin('goodsid', TType.STRING, 1)
      oprot.writeString(self.goodsid)
      oprot.writeFieldEnd()
    if self.goodsname is not None:
      oprot.writeFieldBegin('goodsname', TType.STRING, 2)
      oprot.writeString(self.goodsname)
      oprot.writeFieldEnd()
    if self.goodsprice is not None:
      oprot.writeFieldBegin('goodsprice', TType.I64, 3)
      oprot.writeI64(self.goodsprice)
      oprot.writeFieldEnd()
    if self.goodscnt is not None:
      oprot.writeFieldBegin('goodscnt', TType.I64, 4)
      oprot.writeI64(self.goodscnt)
      oprot.writeFieldEnd()
    if self.menuid is not None:
      oprot.writeFieldBegin('menuid', TType.STRING, 5)
      oprot.writeString(self.menuid)
      oprot.writeFieldEnd()
    if self.menuname is not None:
      oprot.writeFieldBegin('menuname', TType.STRING, 6)
      oprot.writeString(self.menuname)
      oprot.writeFieldEnd()
    if self.menutype is not None:
      oprot.writeFieldBegin('menutype', TType.STRING, 7)
      oprot.writeString(self.menutype)
      oprot.writeFieldEnd()
    if self.picaddr is not None:
      oprot.writeFieldBegin('picaddr', TType.STRING, 8)
      oprot.writeString(self.picaddr)
      oprot.writeFieldEnd()
    if self.unionid is not None:
      oprot.writeFieldBegin('unionid', TType.STRING, 9)
      oprot.writeString(self.unionid)
      oprot.writeFieldEnd()
    if self.goodsinfo is not None:
      oprot.writeFieldBegin('goodsinfo', TType.STRING, 10)
      oprot.writeString(self.goodsinfo)
      oprot.writeFieldEnd()
    if self.descr is not None:
      oprot.writeFieldBegin('descr', TType.STRING, 11)
      oprot.writeString(self.descr)
      oprot.writeFieldEnd()
    if self.goodsspec is not None:
      oprot.writeFieldBegin('goodsspec', TType.STRING, 12)
      oprot.writeString(self.goodsspec)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 13)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I16, 14)
      oprot.writeI16(self.weight)
      oprot.writeFieldEnd()
    if self.goodsorgprice is not None:
      oprot.writeFieldBegin('goodsorgprice', TType.I64, 15)
      oprot.writeI64(self.goodsorgprice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.goodsid)
    value = (value * 31) ^ hash(self.goodsname)
    value = (value * 31) ^ hash(self.goodsprice)
    value = (value * 31) ^ hash(self.goodscnt)
    value = (value * 31) ^ hash(self.menuid)
    value = (value * 31) ^ hash(self.menuname)
    value = (value * 31) ^ hash(self.menutype)
    value = (value * 31) ^ hash(self.picaddr)
    value = (value * 31) ^ hash(self.unionid)
    value = (value * 31) ^ hash(self.goodsinfo)
    value = (value * 31) ^ hash(self.descr)
    value = (value * 31) ^ hash(self.goodsspec)
    value = (value * 31) ^ hash(self.mchnt_id)
    value = (value * 31) ^ hash(self.weight)
    value = (value * 31) ^ hash(self.goodsorgprice)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MenuInfo:
  """
  Attributes:
   - menuid
   - descr
   - menuname
   - mchnt_id
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'menuid', None, None, ), # 1
    (2, TType.STRING, 'descr', None, None, ), # 2
    (3, TType.STRING, 'menuname', None, None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
    (5, TType.I16, 'weight', None, None, ), # 5
  )

  def __init__(self, menuid=None, descr=None, menuname=None, mchnt_id=None, weight=None,):
    self.menuid = menuid
    self.descr = descr
    self.menuname = menuname
    self.mchnt_id = mchnt_id
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.menuid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.descr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.menuname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.weight = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MenuInfo')
    if self.menuid is not None:
      oprot.writeFieldBegin('menuid', TType.STRING, 1)
      oprot.writeString(self.menuid)
      oprot.writeFieldEnd()
    if self.descr is not None:
      oprot.writeFieldBegin('descr', TType.STRING, 2)
      oprot.writeString(self.descr)
      oprot.writeFieldEnd()
    if self.menuname is not None:
      oprot.writeFieldBegin('menuname', TType.STRING, 3)
      oprot.writeString(self.menuname)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I16, 5)
      oprot.writeI16(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.menuid)
    value = (value * 31) ^ hash(self.descr)
    value = (value * 31) ^ hash(self.menuname)
    value = (value * 31) ^ hash(self.mchnt_id)
    value = (value * 31) ^ hash(self.weight)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoodsRet:
  """
  Attributes:
   - goods_list
   - cnt
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'goods_list', (TType.STRUCT,(GoodsInfo, GoodsInfo.thrift_spec)), None, ), # 1
    (2, TType.I64, 'cnt', None, None, ), # 2
  )

  def __init__(self, goods_list=None, cnt=None,):
    self.goods_list = goods_list
    self.cnt = cnt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.goods_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = GoodsInfo()
            _elem5.read(iprot)
            self.goods_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.cnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodsRet')
    if self.goods_list is not None:
      oprot.writeFieldBegin('goods_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.goods_list))
      for iter6 in self.goods_list:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cnt is not None:
      oprot.writeFieldBegin('cnt', TType.I64, 2)
      oprot.writeI64(self.cnt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.goods_list)
    value = (value * 31) ^ hash(self.cnt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderPayInfo:
  """
  Attributes:
   - order_id
   - pay_sn
   - pay_amt
   - pay_type
   - pay_chnl
   - pay_state
   - chnl_sn
   - pay_time
   - txcurrcd
   - pay_ret
   - chnl_retcd
   - amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.I64, 'pay_sn', None, None, ), # 2
    (3, TType.I64, 'pay_amt', None, None, ), # 3
    (4, TType.I32, 'pay_type', None, None, ), # 4
    (5, TType.STRING, 'pay_chnl', None, None, ), # 5
    (6, TType.I16, 'pay_state', None, None, ), # 6
    (7, TType.STRING, 'chnl_sn', None, None, ), # 7
    (8, TType.I64, 'pay_time', None, None, ), # 8
    (9, TType.STRING, 'txcurrcd', None, None, ), # 9
    (10, TType.STRING, 'pay_ret', None, None, ), # 10
    (11, TType.STRING, 'chnl_retcd', None, None, ), # 11
    (12, TType.I64, 'amt', None, None, ), # 12
  )

  def __init__(self, order_id=None, pay_sn=None, pay_amt=None, pay_type=None, pay_chnl=None, pay_state=None, chnl_sn=None, pay_time=None, txcurrcd=None, pay_ret=None, chnl_retcd=None, amt=None,):
    self.order_id = order_id
    self.pay_sn = pay_sn
    self.pay_amt = pay_amt
    self.pay_type = pay_type
    self.pay_chnl = pay_chnl
    self.pay_state = pay_state
    self.chnl_sn = chnl_sn
    self.pay_time = pay_time
    self.txcurrcd = txcurrcd
    self.pay_ret = pay_ret
    self.chnl_retcd = chnl_retcd
    self.amt = amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.pay_sn = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.pay_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pay_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.pay_chnl = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.pay_state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.chnl_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.pay_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.pay_ret = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.chnl_retcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderPayInfo')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.pay_sn is not None:
      oprot.writeFieldBegin('pay_sn', TType.I64, 2)
      oprot.writeI64(self.pay_sn)
      oprot.writeFieldEnd()
    if self.pay_amt is not None:
      oprot.writeFieldBegin('pay_amt', TType.I64, 3)
      oprot.writeI64(self.pay_amt)
      oprot.writeFieldEnd()
    if self.pay_type is not None:
      oprot.writeFieldBegin('pay_type', TType.I32, 4)
      oprot.writeI32(self.pay_type)
      oprot.writeFieldEnd()
    if self.pay_chnl is not None:
      oprot.writeFieldBegin('pay_chnl', TType.STRING, 5)
      oprot.writeString(self.pay_chnl)
      oprot.writeFieldEnd()
    if self.pay_state is not None:
      oprot.writeFieldBegin('pay_state', TType.I16, 6)
      oprot.writeI16(self.pay_state)
      oprot.writeFieldEnd()
    if self.chnl_sn is not None:
      oprot.writeFieldBegin('chnl_sn', TType.STRING, 7)
      oprot.writeString(self.chnl_sn)
      oprot.writeFieldEnd()
    if self.pay_time is not None:
      oprot.writeFieldBegin('pay_time', TType.I64, 8)
      oprot.writeI64(self.pay_time)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 9)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.pay_ret is not None:
      oprot.writeFieldBegin('pay_ret', TType.STRING, 10)
      oprot.writeString(self.pay_ret)
      oprot.writeFieldEnd()
    if self.chnl_retcd is not None:
      oprot.writeFieldBegin('chnl_retcd', TType.STRING, 11)
      oprot.writeString(self.chnl_retcd)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 12)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.order_id is None:
      raise TProtocol.TProtocolException(message='Required field order_id is unset!')
    if self.pay_amt is None:
      raise TProtocol.TProtocolException(message='Required field pay_amt is unset!')
    if self.pay_type is None:
      raise TProtocol.TProtocolException(message='Required field pay_type is unset!')
    if self.pay_chnl is None:
      raise TProtocol.TProtocolException(message='Required field pay_chnl is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.pay_sn)
    value = (value * 31) ^ hash(self.pay_amt)
    value = (value * 31) ^ hash(self.pay_type)
    value = (value * 31) ^ hash(self.pay_chnl)
    value = (value * 31) ^ hash(self.pay_state)
    value = (value * 31) ^ hash(self.chnl_sn)
    value = (value * 31) ^ hash(self.pay_time)
    value = (value * 31) ^ hash(self.txcurrcd)
    value = (value * 31) ^ hash(self.pay_ret)
    value = (value * 31) ^ hash(self.chnl_retcd)
    value = (value * 31) ^ hash(self.amt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderAddress:
  """
  Attributes:
   - detail_address
   - phone
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'detail_address', None, None, ), # 1
    (2, TType.STRING, 'phone', None, None, ), # 2
  )

  def __init__(self, detail_address=None, phone=None,):
    self.detail_address = detail_address
    self.phone = phone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.detail_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.phone = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderAddress')
    if self.detail_address is not None:
      oprot.writeFieldBegin('detail_address', TType.STRING, 1)
      oprot.writeString(self.detail_address)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 2)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.detail_address)
    value = (value * 31) ^ hash(self.phone)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderDetail:
  """
  Attributes:
   - order_id
   - addr
   - goodsinfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.STRUCT, 'addr', (OrderAddress, OrderAddress.thrift_spec), None, ), # 2
    (3, TType.LIST, 'goodsinfo', (TType.STRUCT,(GoodsInfo, GoodsInfo.thrift_spec)), None, ), # 3
  )

  def __init__(self, order_id=None, addr=None, goodsinfo=None,):
    self.order_id = order_id
    self.addr = addr
    self.goodsinfo = goodsinfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.addr = OrderAddress()
          self.addr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.goodsinfo = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = GoodsInfo()
            _elem12.read(iprot)
            self.goodsinfo.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderDetail')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.addr is not None:
      oprot.writeFieldBegin('addr', TType.STRUCT, 2)
      self.addr.write(oprot)
      oprot.writeFieldEnd()
    if self.goodsinfo is not None:
      oprot.writeFieldBegin('goodsinfo', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.goodsinfo))
      for iter13 in self.goodsinfo:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.addr)
    value = (value * 31) ^ hash(self.goodsinfo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderInfo:
  """
  Attributes:
   - mchnt_id
   - customer_id
   - source
   - goodsinfo
   - addr
   - amt
   - busicd
   - order_type
   - state
   - note
   - open_id
   - order_name
   - print_state
   - order_id
   - order_sn
   - ctime
   - appid
   - shipping_fee
   - addr_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
    (4, TType.LIST, 'goodsinfo', (TType.STRUCT,(GoodsInfo, GoodsInfo.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'addr', (OrderAddress, OrderAddress.thrift_spec), None, ), # 5
    (6, TType.I64, 'amt', None, None, ), # 6
    (7, TType.STRING, 'busicd', None, None, ), # 7
    (8, TType.I16, 'order_type', None, None, ), # 8
    (9, TType.I16, 'state', None, None, ), # 9
    (10, TType.STRING, 'note', None, None, ), # 10
    (11, TType.STRING, 'open_id', None, None, ), # 11
    (12, TType.STRING, 'order_name', None, None, ), # 12
    (13, TType.I16, 'print_state', None, None, ), # 13
    (14, TType.I64, 'order_id', None, None, ), # 14
    (15, TType.STRING, 'order_sn', None, None, ), # 15
    (16, TType.I64, 'ctime', None, None, ), # 16
    (17, TType.STRING, 'appid', None, None, ), # 17
    (18, TType.I32, 'shipping_fee', None, None, ), # 18
    (19, TType.I64, 'addr_id', None, None, ), # 19
  )

  def __init__(self, mchnt_id=None, customer_id=None, source=None, goodsinfo=None, addr=None, amt=None, busicd=None, order_type=None, state=None, note=None, open_id=None, order_name=None, print_state=None, order_id=None, order_sn=None, ctime=None, appid=None, shipping_fee=None, addr_id=None,):
    self.mchnt_id = mchnt_id
    self.customer_id = customer_id
    self.source = source
    self.goodsinfo = goodsinfo
    self.addr = addr
    self.amt = amt
    self.busicd = busicd
    self.order_type = order_type
    self.state = state
    self.note = note
    self.open_id = open_id
    self.order_name = order_name
    self.print_state = print_state
    self.order_id = order_id
    self.order_sn = order_sn
    self.ctime = ctime
    self.appid = appid
    self.shipping_fee = shipping_fee
    self.addr_id = addr_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.goodsinfo = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = GoodsInfo()
            _elem19.read(iprot)
            self.goodsinfo.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.addr = OrderAddress()
          self.addr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.busicd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.order_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.note = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.open_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.order_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.print_state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.order_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.ctime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.shipping_fee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.addr_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderInfo')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.goodsinfo is not None:
      oprot.writeFieldBegin('goodsinfo', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.goodsinfo))
      for iter20 in self.goodsinfo:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.addr is not None:
      oprot.writeFieldBegin('addr', TType.STRUCT, 5)
      self.addr.write(oprot)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 6)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 7)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.order_type is not None:
      oprot.writeFieldBegin('order_type', TType.I16, 8)
      oprot.writeI16(self.order_type)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 9)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 10)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.open_id is not None:
      oprot.writeFieldBegin('open_id', TType.STRING, 11)
      oprot.writeString(self.open_id)
      oprot.writeFieldEnd()
    if self.order_name is not None:
      oprot.writeFieldBegin('order_name', TType.STRING, 12)
      oprot.writeString(self.order_name)
      oprot.writeFieldEnd()
    if self.print_state is not None:
      oprot.writeFieldBegin('print_state', TType.I16, 13)
      oprot.writeI16(self.print_state)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 14)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.order_sn is not None:
      oprot.writeFieldBegin('order_sn', TType.STRING, 15)
      oprot.writeString(self.order_sn)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I64, 16)
      oprot.writeI64(self.ctime)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 17)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.shipping_fee is not None:
      oprot.writeFieldBegin('shipping_fee', TType.I32, 18)
      oprot.writeI32(self.shipping_fee)
      oprot.writeFieldEnd()
    if self.addr_id is not None:
      oprot.writeFieldBegin('addr_id', TType.I64, 19)
      oprot.writeI64(self.addr_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mchnt_id is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_id is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    if self.source is None:
      raise TProtocol.TProtocolException(message='Required field source is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    if self.busicd is None:
      raise TProtocol.TProtocolException(message='Required field busicd is unset!')
    if self.order_type is None:
      raise TProtocol.TProtocolException(message='Required field order_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mchnt_id)
    value = (value * 31) ^ hash(self.customer_id)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.goodsinfo)
    value = (value * 31) ^ hash(self.addr)
    value = (value * 31) ^ hash(self.amt)
    value = (value * 31) ^ hash(self.busicd)
    value = (value * 31) ^ hash(self.order_type)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.note)
    value = (value * 31) ^ hash(self.open_id)
    value = (value * 31) ^ hash(self.order_name)
    value = (value * 31) ^ hash(self.print_state)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.order_sn)
    value = (value * 31) ^ hash(self.ctime)
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.shipping_fee)
    value = (value * 31) ^ hash(self.addr_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderArgs:
  """
  Attributes:
   - mchnt_id
   - order_id
   - customer_id
   - source
   - state
   - order_type
   - start_time
   - end_time
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mchnt_id', None, None, ), # 1
    (2, TType.I64, 'order_id', None, None, ), # 2
    (3, TType.STRING, 'customer_id', None, None, ), # 3
    (4, TType.STRING, 'source', None, None, ), # 4
    (5, TType.I16, 'state', None, None, ), # 5
    (6, TType.I16, 'order_type', None, None, ), # 6
    (7, TType.I64, 'start_time', None, None, ), # 7
    None, # 8
    (9, TType.I64, 'end_time', None, None, ), # 9
    (10, TType.I32, 'page', None, 1, ), # 10
    (11, TType.I64, 'maxnum', None, 15, ), # 11
  )

  def __init__(self, mchnt_id=None, order_id=None, customer_id=None, source=None, state=None, order_type=None, start_time=None, end_time=None, page=thrift_spec[10][4], maxnum=thrift_spec[11][4],):
    self.mchnt_id = mchnt_id
    self.order_id = order_id
    self.customer_id = customer_id
    self.source = source
    self.state = state
    self.order_type = order_type
    self.start_time = start_time
    self.end_time = end_time
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.source = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.order_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.start_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.end_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderArgs')
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 1)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 2)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 3)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 4)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 5)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.order_type is not None:
      oprot.writeFieldBegin('order_type', TType.I16, 6)
      oprot.writeI16(self.order_type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I64, 7)
      oprot.writeI64(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I64, 9)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 10)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 11)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mchnt_id)
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.customer_id)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.order_type)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderRet:
  """
  Attributes:
   - orderinfo
   - cnt
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'orderinfo', (TType.STRUCT,(OrderInfo, OrderInfo.thrift_spec)), None, ), # 1
    (2, TType.I64, 'cnt', None, None, ), # 2
  )

  def __init__(self, orderinfo=None, cnt=None,):
    self.orderinfo = orderinfo
    self.cnt = cnt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.orderinfo = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = OrderInfo()
            _elem26.read(iprot)
            self.orderinfo.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.cnt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderRet')
    if self.orderinfo is not None:
      oprot.writeFieldBegin('orderinfo', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.orderinfo))
      for iter27 in self.orderinfo:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cnt is not None:
      oprot.writeFieldBegin('cnt', TType.I64, 2)
      oprot.writeI64(self.cnt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.orderinfo)
    value = (value * 31) ^ hash(self.cnt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
