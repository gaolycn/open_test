#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from order import Order
from order.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping()')
  print('   findGoodsInfo(GoodsArgs goodquery)')
  print('   findMenuInfo(GoodsArgs goodquery)')
  print('  ReturnMsg addOrder(OrderInfo orderinfo)')
  print('  ReturnMsg addOrderPay( orderpay)')
  print('  OrderRet findOrder(OrderArgs orderargs)')
  print('   findOrderPay( order_ids)')
  print('   findOrderDetail( order_ids)')
  print('  ReturnMsg payOrderBack( orderpay)')
  print('  ReturnMsg payOrderRefund(OrderPayInfo orderpay)')
  print('  ReturnMsg payOrderClose(i64 order_id)')
  print('  ReturnMsg printOrder(i64 order_id, i16 state)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Order.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'findGoodsInfo':
  if len(args) != 1:
    print('findGoodsInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.findGoodsInfo(eval(args[0]),))

elif cmd == 'findMenuInfo':
  if len(args) != 1:
    print('findMenuInfo requires 1 args')
    sys.exit(1)
  pp.pprint(client.findMenuInfo(eval(args[0]),))

elif cmd == 'addOrder':
  if len(args) != 1:
    print('addOrder requires 1 args')
    sys.exit(1)
  pp.pprint(client.addOrder(eval(args[0]),))

elif cmd == 'addOrderPay':
  if len(args) != 1:
    print('addOrderPay requires 1 args')
    sys.exit(1)
  pp.pprint(client.addOrderPay(eval(args[0]),))

elif cmd == 'findOrder':
  if len(args) != 1:
    print('findOrder requires 1 args')
    sys.exit(1)
  pp.pprint(client.findOrder(eval(args[0]),))

elif cmd == 'findOrderPay':
  if len(args) != 1:
    print('findOrderPay requires 1 args')
    sys.exit(1)
  pp.pprint(client.findOrderPay(eval(args[0]),))

elif cmd == 'findOrderDetail':
  if len(args) != 1:
    print('findOrderDetail requires 1 args')
    sys.exit(1)
  pp.pprint(client.findOrderDetail(eval(args[0]),))

elif cmd == 'payOrderBack':
  if len(args) != 1:
    print('payOrderBack requires 1 args')
    sys.exit(1)
  pp.pprint(client.payOrderBack(eval(args[0]),))

elif cmd == 'payOrderRefund':
  if len(args) != 1:
    print('payOrderRefund requires 1 args')
    sys.exit(1)
  pp.pprint(client.payOrderRefund(eval(args[0]),))

elif cmd == 'payOrderClose':
  if len(args) != 1:
    print('payOrderClose requires 1 args')
    sys.exit(1)
  pp.pprint(client.payOrderClose(eval(args[0]),))

elif cmd == 'printOrder':
  if len(args) != 2:
    print('printOrder requires 2 args')
    sys.exit(1)
  pp.pprint(client.printOrder(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
