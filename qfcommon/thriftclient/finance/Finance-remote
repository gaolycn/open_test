#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from finance import Finance
from finance.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i16 alipay_batch_trans_notify(string serialno, bool success, string note)')
  print('  i16 alipay_batch_trans_notify_2(string batch_no, string success_details, string fail_details)')
  print('   get_debitinfo(i32 userid, string appsrc, i32 page, i64 maxnum)')
  print('   get_remittanceinfo(i32 userid, string appsrc, i32 page, i64 maxnum)')
  print('  BalanceRet get_balanceinfo(i32 userid, string appsrc)')
  print('  BillRet get_userbill_by_page(i32 userid, string appsrc, i32 page, i64 maxnum)')
  print('  BillRet get_userbill_by_date(i32 userid, string appsrc, string startdate, string enddate)')
  print('  BillRet get_userbill(BillArgs billargs)')
  print('   get_tradeinfo_by_biznum(string biznum)')
  print('   get_account_period( search_date_list)')
  print('   get_account_fee( userid_list)')
  print('  i16 set_account_fee(i32 userid, i32 src_channel_id, string appsrc)')
  print('  i16 set_qpos_account_fee(AccountFee accout_fee)')
  print('  i16 set_feeratio(FeeRatioRecord feeratio)')
  print('   get_feeratio( out_userid_list, string src)')
  print('  i64 add_apply_recharge_record(string out_userid, i32 recharge_money, string gogal_account, string apply_memo)')
  print('  ApplyRechargeRet get_apply_recharge_list(ApplyRechargeQuery query)')
  print('  ApplyRecharge get_apply_recharge(i32 id)')
  print('  RiskDelayRet add_long_risk_delay(i32 userid, string risk_flag, string appsrc)')
  print('  RiskDelayRet add_short_risk_delay(i32 userid, string trade_date, string clear_date, string risk_flag, string appsrc)')
  print('  RiskDelayRet add_tl_short_risk_delay(i32 userid, string trade_date, string clear_date, string risk_flag, string appsrc)')
  print('   get_risk_delay_info(RiskDelayQuery query)')
  print('  RiskDelayRet disable_risk_delay(i32 delayid)')
  print('  RiskDelayRet cancel_delay_trade(i32 delayid)')
  print('  RiskDelayRet set_risk_delay(i32 delayid, i32 userid, string trade_date, string clear_date, string risk_flag, string appsrc)')
  print('  RiskDelayRet set_clear_date(i32 delayid, string clear_date)')
  print('  WithDrawalAmtRet get_withdralwal_amt(i32 userid)')
  print('  i16 make_withdralwal(i32 userid)')
  print('   get_withdralwal_info(i32 userid, i32 page, i64 maxnum)')
  print('   get_withhold_history(i32 userid, string appsrc)')
  print('   get_withhold_history_by_biznum(string biznum)')
  print('  bool add_user_withhold(string title, i32 userid, i32 amount, i16 withhold_type, string start_date, string end_date, string memo, string appsrc)')
  print('  UserWithholdRet get_user_withhold(UserWithholdQuery query)')
  print('  bool update_user_withhold(UserWithhold user_withhold)')
  print('  i64 get_all_income(i32 userid, string appsrc)')
  print('  DebitRecordsRet get_debit_records(DebitQuery query)')
  print('  QposDebitRecordsRet get_qpos_debit_records(QposDebitQuery query)')
  print('  TradeRecordsRet get_trade_records_by_biznum(i64 userid, string biznum)')
  print('  QtBankInfo get_qt_bank_info(i64 userid, i64 merchant_id)')
  print('  QtBankInfo set_qt_bank_info(QtBankInfo qtbank_info)')
  print('  QtBankInfoRet fetch_qt_bank_info_list( userid_list, i32 page, i32 maxnum)')
  print('  bool check_batch_number_available(string out_userid, string batch_number, string src)')
  print('   check_remittance_serialno_available(string out_userid,  serialno_list, string src)')
  print('  i64 add_remittance_approval(RemittanceApprovalPara remittance_para)')
  print('  RemittanceApprovalRet get_remittance_approval_list(RemittanceApprovalQuery query)')
  print('  i32 confirm_remittance(i64 approval_id, string approver_id, string src)')
  print('  bool reject_remittance(i64 approval_id, string approver_id, string src)')
  print('  RemittanceSummaryRet get_remittance_summary(i64 approval_id, string src)')
  print('  RemittanceRecordRet get_remittance_records(RemittanceRecordQuery query)')
  print('  UserAccountRet get_balance_account_info(string out_userid, string src)')
  print('  UserBillRet get_user_bill(BillQuery bill_args)')
  print('  UserBillRet get_user_bill_v2(BillArgsV2 bill_args)')
  print('  TradeFeeStruct get_trade_fee(i64 userid, string src)')
  print('  i16 set_trade_fee(TradeFeeStruct trade_fee_args)')
  print('  i16 set_remit_settlefee(string out_userid, string src, i32 remit_settlefee)')
  print('  RemitsettlefeeRet get_remit_settlefee(string out_userid, string src)')
  print('   get_newdebit_list(NewDebitQuery newquery)')
  print('   get_accounttrades(AccounttradeArgs act_args)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Finance.Client(protocol)
transport.open()

if cmd == 'alipay_batch_trans_notify':
  if len(args) != 3:
    print('alipay_batch_trans_notify requires 3 args')
    sys.exit(1)
  pp.pprint(client.alipay_batch_trans_notify(args[0],eval(args[1]),args[2],))

elif cmd == 'alipay_batch_trans_notify_2':
  if len(args) != 3:
    print('alipay_batch_trans_notify_2 requires 3 args')
    sys.exit(1)
  pp.pprint(client.alipay_batch_trans_notify_2(args[0],args[1],args[2],))

elif cmd == 'get_debitinfo':
  if len(args) != 4:
    print('get_debitinfo requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_debitinfo(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_remittanceinfo':
  if len(args) != 4:
    print('get_remittanceinfo requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_remittanceinfo(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_balanceinfo':
  if len(args) != 2:
    print('get_balanceinfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_balanceinfo(eval(args[0]),args[1],))

elif cmd == 'get_userbill_by_page':
  if len(args) != 4:
    print('get_userbill_by_page requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_userbill_by_page(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_userbill_by_date':
  if len(args) != 4:
    print('get_userbill_by_date requires 4 args')
    sys.exit(1)
  pp.pprint(client.get_userbill_by_date(eval(args[0]),args[1],args[2],args[3],))

elif cmd == 'get_userbill':
  if len(args) != 1:
    print('get_userbill requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_userbill(eval(args[0]),))

elif cmd == 'get_tradeinfo_by_biznum':
  if len(args) != 1:
    print('get_tradeinfo_by_biznum requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_tradeinfo_by_biznum(args[0],))

elif cmd == 'get_account_period':
  if len(args) != 1:
    print('get_account_period requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_account_period(eval(args[0]),))

elif cmd == 'get_account_fee':
  if len(args) != 1:
    print('get_account_fee requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_account_fee(eval(args[0]),))

elif cmd == 'set_account_fee':
  if len(args) != 3:
    print('set_account_fee requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_account_fee(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'set_qpos_account_fee':
  if len(args) != 1:
    print('set_qpos_account_fee requires 1 args')
    sys.exit(1)
  pp.pprint(client.set_qpos_account_fee(eval(args[0]),))

elif cmd == 'set_feeratio':
  if len(args) != 1:
    print('set_feeratio requires 1 args')
    sys.exit(1)
  pp.pprint(client.set_feeratio(eval(args[0]),))

elif cmd == 'get_feeratio':
  if len(args) != 2:
    print('get_feeratio requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_feeratio(eval(args[0]),args[1],))

elif cmd == 'add_apply_recharge_record':
  if len(args) != 4:
    print('add_apply_recharge_record requires 4 args')
    sys.exit(1)
  pp.pprint(client.add_apply_recharge_record(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'get_apply_recharge_list':
  if len(args) != 1:
    print('get_apply_recharge_list requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_apply_recharge_list(eval(args[0]),))

elif cmd == 'get_apply_recharge':
  if len(args) != 1:
    print('get_apply_recharge requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_apply_recharge(eval(args[0]),))

elif cmd == 'add_long_risk_delay':
  if len(args) != 3:
    print('add_long_risk_delay requires 3 args')
    sys.exit(1)
  pp.pprint(client.add_long_risk_delay(eval(args[0]),args[1],args[2],))

elif cmd == 'add_short_risk_delay':
  if len(args) != 5:
    print('add_short_risk_delay requires 5 args')
    sys.exit(1)
  pp.pprint(client.add_short_risk_delay(eval(args[0]),args[1],args[2],args[3],args[4],))

elif cmd == 'add_tl_short_risk_delay':
  if len(args) != 5:
    print('add_tl_short_risk_delay requires 5 args')
    sys.exit(1)
  pp.pprint(client.add_tl_short_risk_delay(eval(args[0]),args[1],args[2],args[3],args[4],))

elif cmd == 'get_risk_delay_info':
  if len(args) != 1:
    print('get_risk_delay_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_risk_delay_info(eval(args[0]),))

elif cmd == 'disable_risk_delay':
  if len(args) != 1:
    print('disable_risk_delay requires 1 args')
    sys.exit(1)
  pp.pprint(client.disable_risk_delay(eval(args[0]),))

elif cmd == 'cancel_delay_trade':
  if len(args) != 1:
    print('cancel_delay_trade requires 1 args')
    sys.exit(1)
  pp.pprint(client.cancel_delay_trade(eval(args[0]),))

elif cmd == 'set_risk_delay':
  if len(args) != 6:
    print('set_risk_delay requires 6 args')
    sys.exit(1)
  pp.pprint(client.set_risk_delay(eval(args[0]),eval(args[1]),args[2],args[3],args[4],args[5],))

elif cmd == 'set_clear_date':
  if len(args) != 2:
    print('set_clear_date requires 2 args')
    sys.exit(1)
  pp.pprint(client.set_clear_date(eval(args[0]),args[1],))

elif cmd == 'get_withdralwal_amt':
  if len(args) != 1:
    print('get_withdralwal_amt requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_withdralwal_amt(eval(args[0]),))

elif cmd == 'make_withdralwal':
  if len(args) != 1:
    print('make_withdralwal requires 1 args')
    sys.exit(1)
  pp.pprint(client.make_withdralwal(eval(args[0]),))

elif cmd == 'get_withdralwal_info':
  if len(args) != 3:
    print('get_withdralwal_info requires 3 args')
    sys.exit(1)
  pp.pprint(client.get_withdralwal_info(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_withhold_history':
  if len(args) != 2:
    print('get_withhold_history requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_withhold_history(eval(args[0]),args[1],))

elif cmd == 'get_withhold_history_by_biznum':
  if len(args) != 1:
    print('get_withhold_history_by_biznum requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_withhold_history_by_biznum(args[0],))

elif cmd == 'add_user_withhold':
  if len(args) != 8:
    print('add_user_withhold requires 8 args')
    sys.exit(1)
  pp.pprint(client.add_user_withhold(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],args[5],args[6],args[7],))

elif cmd == 'get_user_withhold':
  if len(args) != 1:
    print('get_user_withhold requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_withhold(eval(args[0]),))

elif cmd == 'update_user_withhold':
  if len(args) != 1:
    print('update_user_withhold requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_user_withhold(eval(args[0]),))

elif cmd == 'get_all_income':
  if len(args) != 2:
    print('get_all_income requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_all_income(eval(args[0]),args[1],))

elif cmd == 'get_debit_records':
  if len(args) != 1:
    print('get_debit_records requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_debit_records(eval(args[0]),))

elif cmd == 'get_qpos_debit_records':
  if len(args) != 1:
    print('get_qpos_debit_records requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_qpos_debit_records(eval(args[0]),))

elif cmd == 'get_trade_records_by_biznum':
  if len(args) != 2:
    print('get_trade_records_by_biznum requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_trade_records_by_biznum(eval(args[0]),args[1],))

elif cmd == 'get_qt_bank_info':
  if len(args) != 2:
    print('get_qt_bank_info requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_qt_bank_info(eval(args[0]),eval(args[1]),))

elif cmd == 'set_qt_bank_info':
  if len(args) != 1:
    print('set_qt_bank_info requires 1 args')
    sys.exit(1)
  pp.pprint(client.set_qt_bank_info(eval(args[0]),))

elif cmd == 'fetch_qt_bank_info_list':
  if len(args) != 3:
    print('fetch_qt_bank_info_list requires 3 args')
    sys.exit(1)
  pp.pprint(client.fetch_qt_bank_info_list(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'check_batch_number_available':
  if len(args) != 3:
    print('check_batch_number_available requires 3 args')
    sys.exit(1)
  pp.pprint(client.check_batch_number_available(args[0],args[1],args[2],))

elif cmd == 'check_remittance_serialno_available':
  if len(args) != 3:
    print('check_remittance_serialno_available requires 3 args')
    sys.exit(1)
  pp.pprint(client.check_remittance_serialno_available(args[0],eval(args[1]),args[2],))

elif cmd == 'add_remittance_approval':
  if len(args) != 1:
    print('add_remittance_approval requires 1 args')
    sys.exit(1)
  pp.pprint(client.add_remittance_approval(eval(args[0]),))

elif cmd == 'get_remittance_approval_list':
  if len(args) != 1:
    print('get_remittance_approval_list requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_remittance_approval_list(eval(args[0]),))

elif cmd == 'confirm_remittance':
  if len(args) != 3:
    print('confirm_remittance requires 3 args')
    sys.exit(1)
  pp.pprint(client.confirm_remittance(eval(args[0]),args[1],args[2],))

elif cmd == 'reject_remittance':
  if len(args) != 3:
    print('reject_remittance requires 3 args')
    sys.exit(1)
  pp.pprint(client.reject_remittance(eval(args[0]),args[1],args[2],))

elif cmd == 'get_remittance_summary':
  if len(args) != 2:
    print('get_remittance_summary requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_remittance_summary(eval(args[0]),args[1],))

elif cmd == 'get_remittance_records':
  if len(args) != 1:
    print('get_remittance_records requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_remittance_records(eval(args[0]),))

elif cmd == 'get_balance_account_info':
  if len(args) != 2:
    print('get_balance_account_info requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_balance_account_info(args[0],args[1],))

elif cmd == 'get_user_bill':
  if len(args) != 1:
    print('get_user_bill requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_bill(eval(args[0]),))

elif cmd == 'get_user_bill_v2':
  if len(args) != 1:
    print('get_user_bill_v2 requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_user_bill_v2(eval(args[0]),))

elif cmd == 'get_trade_fee':
  if len(args) != 2:
    print('get_trade_fee requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_trade_fee(eval(args[0]),args[1],))

elif cmd == 'set_trade_fee':
  if len(args) != 1:
    print('set_trade_fee requires 1 args')
    sys.exit(1)
  pp.pprint(client.set_trade_fee(eval(args[0]),))

elif cmd == 'set_remit_settlefee':
  if len(args) != 3:
    print('set_remit_settlefee requires 3 args')
    sys.exit(1)
  pp.pprint(client.set_remit_settlefee(args[0],args[1],eval(args[2]),))

elif cmd == 'get_remit_settlefee':
  if len(args) != 2:
    print('get_remit_settlefee requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_remit_settlefee(args[0],args[1],))

elif cmd == 'get_newdebit_list':
  if len(args) != 1:
    print('get_newdebit_list requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_newdebit_list(eval(args[0]),))

elif cmd == 'get_accounttrades':
  if len(args) != 1:
    print('get_accounttrades requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_accounttrades(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
