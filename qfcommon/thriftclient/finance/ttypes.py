#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RemittanceRecordStatus:
  UNCONFIRMED = 1
  CONFIRMED = 2
  CANCELED = 3
  SUCCESS = 4
  FAIL = 5

  _VALUES_TO_NAMES = {
    1: "UNCONFIRMED",
    2: "CONFIRMED",
    3: "CANCELED",
    4: "SUCCESS",
    5: "FAIL",
  }

  _NAMES_TO_VALUES = {
    "UNCONFIRMED": 1,
    "CONFIRMED": 2,
    "CANCELED": 3,
    "SUCCESS": 4,
    "FAIL": 5,
  }

class BankType:
  BUSINESS = 1
  PERSONAL = 2

  _VALUES_TO_NAMES = {
    1: "BUSINESS",
    2: "PERSONAL",
  }

  _NAMES_TO_VALUES = {
    "BUSINESS": 1,
    "PERSONAL": 2,
  }

class AccountType:
  UNAVAILABLE = 0
  AVAILABLE = 1
  PROXY = 2

  _VALUES_TO_NAMES = {
    0: "UNAVAILABLE",
    1: "AVAILABLE",
    2: "PROXY",
  }

  _NAMES_TO_VALUES = {
    "UNAVAILABLE": 0,
    "AVAILABLE": 1,
    "PROXY": 2,
  }


class NewDebitRecord:
  """
  Attributes:
   - userid
   - name
   - payamt
   - paydate
   - busicd
   - business_ref_num
   - status
   - bankname
   - bankaccount
   - tradeamt
   - fee
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I64, 'payamt', None, None, ), # 3
    (4, TType.STRING, 'paydate', None, None, ), # 4
    (5, TType.STRING, 'busicd', None, None, ), # 5
    (6, TType.STRING, 'business_ref_num', None, None, ), # 6
    (7, TType.STRING, 'status', None, None, ), # 7
    (8, TType.STRING, 'bankname', None, None, ), # 8
    (9, TType.STRING, 'bankaccount', None, None, ), # 9
    (10, TType.I64, 'tradeamt', None, None, ), # 10
    (11, TType.I64, 'fee', None, None, ), # 11
  )

  def __init__(self, userid=None, name=None, payamt=None, paydate=None, busicd=None, business_ref_num=None, status=None, bankname=None, bankaccount=None, tradeamt=None, fee=None,):
    self.userid = userid
    self.name = name
    self.payamt = payamt
    self.paydate = paydate
    self.busicd = busicd
    self.business_ref_num = business_ref_num
    self.status = status
    self.bankname = bankname
    self.bankaccount = bankaccount
    self.tradeamt = tradeamt
    self.fee = fee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paydate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.busicd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.business_ref_num = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.tradeamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewDebitRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 3)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.paydate is not None:
      oprot.writeFieldBegin('paydate', TType.STRING, 4)
      oprot.writeString(self.paydate)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 5)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.business_ref_num is not None:
      oprot.writeFieldBegin('business_ref_num', TType.STRING, 6)
      oprot.writeString(self.business_ref_num)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 7)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 8)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 9)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.tradeamt is not None:
      oprot.writeFieldBegin('tradeamt', TType.I64, 10)
      oprot.writeI64(self.tradeamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 11)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.paydate)
    value = (value * 31) ^ hash(self.busicd)
    value = (value * 31) ^ hash(self.business_ref_num)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.bankname)
    value = (value * 31) ^ hash(self.bankaccount)
    value = (value * 31) ^ hash(self.tradeamt)
    value = (value * 31) ^ hash(self.fee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewDebitQuery:
  """
  Attributes:
   - userids
   - startdate
   - enddate
   - busicds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userids', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'startdate', None, None, ), # 2
    (3, TType.STRING, 'enddate', None, None, ), # 3
    (4, TType.LIST, 'busicds', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, userids=None, startdate=None, enddate=None, busicds=None,):
    self.userids = userids
    self.startdate = startdate
    self.enddate = enddate
    self.busicds = busicds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.userids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.startdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.enddate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.busicds = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.busicds.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewDebitQuery')
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.userids))
      for iter12 in self.userids:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startdate is not None:
      oprot.writeFieldBegin('startdate', TType.STRING, 2)
      oprot.writeString(self.startdate)
      oprot.writeFieldEnd()
    if self.enddate is not None:
      oprot.writeFieldBegin('enddate', TType.STRING, 3)
      oprot.writeString(self.enddate)
      oprot.writeFieldEnd()
    if self.busicds is not None:
      oprot.writeFieldBegin('busicds', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.busicds))
      for iter13 in self.busicds:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userids)
    value = (value * 31) ^ hash(self.startdate)
    value = (value * 31) ^ hash(self.enddate)
    value = (value * 31) ^ hash(self.busicds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebitRet:
  """
  Attributes:
   - payamt
   - status
   - expectdate
   - paytime
   - biznum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'payamt', None, None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
    (3, TType.STRING, 'expectdate', None, None, ), # 3
    (4, TType.STRING, 'paytime', None, None, ), # 4
    (5, TType.STRING, 'biznum', None, None, ), # 5
  )

  def __init__(self, payamt=None, status=None, expectdate=None, paytime=None, biznum=None,):
    self.payamt = payamt
    self.status = status
    self.expectdate = expectdate
    self.paytime = paytime
    self.biznum = biznum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paytime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.biznum = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebitRet')
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 1)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.expectdate is not None:
      oprot.writeFieldBegin('expectdate', TType.STRING, 3)
      oprot.writeString(self.expectdate)
      oprot.writeFieldEnd()
    if self.paytime is not None:
      oprot.writeFieldBegin('paytime', TType.STRING, 4)
      oprot.writeString(self.paytime)
      oprot.writeFieldEnd()
    if self.biznum is not None:
      oprot.writeFieldBegin('biznum', TType.STRING, 5)
      oprot.writeString(self.biznum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.expectdate)
    value = (value * 31) ^ hash(self.paytime)
    value = (value * 31) ^ hash(self.biznum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebitRecord:
  """
  Attributes:
   - payamt
   - status
   - expectdate
   - paytime
   - biznum
   - merchantid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'payamt', None, None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
    (3, TType.STRING, 'expectdate', None, None, ), # 3
    (4, TType.STRING, 'paytime', None, None, ), # 4
    (5, TType.STRING, 'biznum', None, None, ), # 5
    (6, TType.STRING, 'merchantid', None, None, ), # 6
  )

  def __init__(self, payamt=None, status=None, expectdate=None, paytime=None, biznum=None, merchantid=None,):
    self.payamt = payamt
    self.status = status
    self.expectdate = expectdate
    self.paytime = paytime
    self.biznum = biznum
    self.merchantid = merchantid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paytime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.biznum = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.merchantid = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebitRecord')
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 1)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.expectdate is not None:
      oprot.writeFieldBegin('expectdate', TType.STRING, 3)
      oprot.writeString(self.expectdate)
      oprot.writeFieldEnd()
    if self.paytime is not None:
      oprot.writeFieldBegin('paytime', TType.STRING, 4)
      oprot.writeString(self.paytime)
      oprot.writeFieldEnd()
    if self.biznum is not None:
      oprot.writeFieldBegin('biznum', TType.STRING, 5)
      oprot.writeString(self.biznum)
      oprot.writeFieldEnd()
    if self.merchantid is not None:
      oprot.writeFieldBegin('merchantid', TType.STRING, 6)
      oprot.writeString(self.merchantid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.expectdate)
    value = (value * 31) ^ hash(self.paytime)
    value = (value * 31) ^ hash(self.biznum)
    value = (value * 31) ^ hash(self.merchantid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QposDebitRecord:
  """
  Attributes:
   - name
   - bankname
   - bankaccount
   - payamt
   - status
   - expectdate
   - paydate
   - paytime
   - tradedate_start
   - tradedate_end
   - biznum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'bankname', None, None, ), # 2
    (3, TType.STRING, 'bankaccount', None, None, ), # 3
    (4, TType.I64, 'payamt', None, None, ), # 4
    (5, TType.STRING, 'status', None, None, ), # 5
    (6, TType.STRING, 'expectdate', None, None, ), # 6
    (7, TType.STRING, 'paydate', None, None, ), # 7
    (8, TType.STRING, 'paytime', None, None, ), # 8
    (9, TType.STRING, 'tradedate_start', None, None, ), # 9
    (10, TType.STRING, 'tradedate_end', None, None, ), # 10
    (11, TType.STRING, 'biznum', None, None, ), # 11
  )

  def __init__(self, name=None, bankname=None, bankaccount=None, payamt=None, status=None, expectdate=None, paydate=None, paytime=None, tradedate_start=None, tradedate_end=None, biznum=None,):
    self.name = name
    self.bankname = bankname
    self.bankaccount = bankaccount
    self.payamt = payamt
    self.status = status
    self.expectdate = expectdate
    self.paydate = paydate
    self.paytime = paytime
    self.tradedate_start = tradedate_start
    self.tradedate_end = tradedate_end
    self.biznum = biznum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.expectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.paydate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.paytime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.tradedate_start = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.tradedate_end = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.biznum = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QposDebitRecord')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 2)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 3)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 4)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 5)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.expectdate is not None:
      oprot.writeFieldBegin('expectdate', TType.STRING, 6)
      oprot.writeString(self.expectdate)
      oprot.writeFieldEnd()
    if self.paydate is not None:
      oprot.writeFieldBegin('paydate', TType.STRING, 7)
      oprot.writeString(self.paydate)
      oprot.writeFieldEnd()
    if self.paytime is not None:
      oprot.writeFieldBegin('paytime', TType.STRING, 8)
      oprot.writeString(self.paytime)
      oprot.writeFieldEnd()
    if self.tradedate_start is not None:
      oprot.writeFieldBegin('tradedate_start', TType.STRING, 9)
      oprot.writeString(self.tradedate_start)
      oprot.writeFieldEnd()
    if self.tradedate_end is not None:
      oprot.writeFieldBegin('tradedate_end', TType.STRING, 10)
      oprot.writeString(self.tradedate_end)
      oprot.writeFieldEnd()
    if self.biznum is not None:
      oprot.writeFieldBegin('biznum', TType.STRING, 11)
      oprot.writeString(self.biznum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.bankname)
    value = (value * 31) ^ hash(self.bankaccount)
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.expectdate)
    value = (value * 31) ^ hash(self.paydate)
    value = (value * 31) ^ hash(self.paytime)
    value = (value * 31) ^ hash(self.tradedate_start)
    value = (value * 31) ^ hash(self.tradedate_end)
    value = (value * 31) ^ hash(self.biznum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebitQuery:
  """
  Attributes:
   - userid
   - appsrc
   - merchantid
   - page
   - maxnum
   - paytime_start
   - paytime_end
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'appsrc', None, None, ), # 2
    (3, TType.I64, 'merchantid', None, None, ), # 3
    (4, TType.I64, 'page', None, None, ), # 4
    (5, TType.I64, 'maxnum', None, None, ), # 5
    (6, TType.STRING, 'paytime_start', None, None, ), # 6
    (7, TType.STRING, 'paytime_end', None, None, ), # 7
  )

  def __init__(self, userid=None, appsrc=None, merchantid=None, page=None, maxnum=None, paytime_start=None, paytime_end=None,):
    self.userid = userid
    self.appsrc = appsrc
    self.merchantid = merchantid
    self.page = page
    self.maxnum = maxnum
    self.paytime_start = paytime_start
    self.paytime_end = paytime_end

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.merchantid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.page = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.paytime_start = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.paytime_end = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebitQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 2)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    if self.merchantid is not None:
      oprot.writeFieldBegin('merchantid', TType.I64, 3)
      oprot.writeI64(self.merchantid)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I64, 4)
      oprot.writeI64(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 5)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    if self.paytime_start is not None:
      oprot.writeFieldBegin('paytime_start', TType.STRING, 6)
      oprot.writeString(self.paytime_start)
      oprot.writeFieldEnd()
    if self.paytime_end is not None:
      oprot.writeFieldBegin('paytime_end', TType.STRING, 7)
      oprot.writeString(self.paytime_end)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.appsrc is None:
      raise TProtocol.TProtocolException(message='Required field appsrc is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.appsrc)
    value = (value * 31) ^ hash(self.merchantid)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.paytime_start)
    value = (value * 31) ^ hash(self.paytime_end)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QposDebitQuery:
  """
  Attributes:
   - userid
   - page
   - maxnum
   - paytime_start
   - paytime_end
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'page', None, None, ), # 2
    (3, TType.I64, 'maxnum', None, None, ), # 3
    (4, TType.STRING, 'paytime_start', None, None, ), # 4
    (5, TType.STRING, 'paytime_end', None, None, ), # 5
  )

  def __init__(self, userid=None, page=None, maxnum=None, paytime_start=None, paytime_end=None,):
    self.userid = userid
    self.page = page
    self.maxnum = maxnum
    self.paytime_start = paytime_start
    self.paytime_end = paytime_end

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.page = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paytime_start = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.paytime_end = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QposDebitQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I64, 2)
      oprot.writeI64(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 3)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    if self.paytime_start is not None:
      oprot.writeFieldBegin('paytime_start', TType.STRING, 4)
      oprot.writeString(self.paytime_start)
      oprot.writeFieldEnd()
    if self.paytime_end is not None:
      oprot.writeFieldBegin('paytime_end', TType.STRING, 5)
      oprot.writeString(self.paytime_end)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.paytime_start)
    value = (value * 31) ^ hash(self.paytime_end)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebitRecordsRet:
  """
  Attributes:
   - count
   - debit_record_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'count', None, None, ), # 1
    (2, TType.LIST, 'debit_record_list', (TType.STRUCT,(DebitRecord, DebitRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, count=None, debit_record_list=None,):
    self.count = count
    self.debit_record_list = debit_record_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.debit_record_list = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = DebitRecord()
            _elem19.read(iprot)
            self.debit_record_list.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebitRecordsRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 1)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.debit_record_list is not None:
      oprot.writeFieldBegin('debit_record_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.debit_record_list))
      for iter20 in self.debit_record_list:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.debit_record_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QposDebitRecordsRet:
  """
  Attributes:
   - count
   - debit_record_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'count', None, None, ), # 1
    (2, TType.LIST, 'debit_record_list', (TType.STRUCT,(QposDebitRecord, QposDebitRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, count=None, debit_record_list=None,):
    self.count = count
    self.debit_record_list = debit_record_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.debit_record_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = QposDebitRecord()
            _elem26.read(iprot)
            self.debit_record_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QposDebitRecordsRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 1)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.debit_record_list is not None:
      oprot.writeFieldBegin('debit_record_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.debit_record_list))
      for iter27 in self.debit_record_list:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.debit_record_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRet:
  """
  Attributes:
   - tradeamt
   - payamt
   - fee
   - status
   - tradetime
   - tradetype
   - ori_coupon_amt
   - coupon_amt
   - chnlid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeamt', None, None, ), # 1
    (2, TType.I64, 'payamt', None, None, ), # 2
    (3, TType.I64, 'fee', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.STRING, 'tradetime', None, None, ), # 5
    (6, TType.STRING, 'tradetype', None, None, ), # 6
    (7, TType.I64, 'ori_coupon_amt', None, None, ), # 7
    (8, TType.I64, 'coupon_amt', None, None, ), # 8
    (9, TType.STRING, 'chnlid', None, None, ), # 9
  )

  def __init__(self, tradeamt=None, payamt=None, fee=None, status=None, tradetime=None, tradetype=None, ori_coupon_amt=None, coupon_amt=None, chnlid=None,):
    self.tradeamt = tradeamt
    self.payamt = payamt
    self.fee = fee
    self.status = status
    self.tradetime = tradetime
    self.tradetype = tradetype
    self.ori_coupon_amt = ori_coupon_amt
    self.coupon_amt = coupon_amt
    self.chnlid = chnlid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tradetime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tradetype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.ori_coupon_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.coupon_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.chnlid = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRet')
    if self.tradeamt is not None:
      oprot.writeFieldBegin('tradeamt', TType.I64, 1)
      oprot.writeI64(self.tradeamt)
      oprot.writeFieldEnd()
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 2)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 3)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.tradetime is not None:
      oprot.writeFieldBegin('tradetime', TType.STRING, 5)
      oprot.writeString(self.tradetime)
      oprot.writeFieldEnd()
    if self.tradetype is not None:
      oprot.writeFieldBegin('tradetype', TType.STRING, 6)
      oprot.writeString(self.tradetype)
      oprot.writeFieldEnd()
    if self.ori_coupon_amt is not None:
      oprot.writeFieldBegin('ori_coupon_amt', TType.I64, 7)
      oprot.writeI64(self.ori_coupon_amt)
      oprot.writeFieldEnd()
    if self.coupon_amt is not None:
      oprot.writeFieldBegin('coupon_amt', TType.I64, 8)
      oprot.writeI64(self.coupon_amt)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.STRING, 9)
      oprot.writeString(self.chnlid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tradeamt)
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.fee)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.tradetime)
    value = (value * 31) ^ hash(self.tradetype)
    value = (value * 31) ^ hash(self.ori_coupon_amt)
    value = (value * 31) ^ hash(self.coupon_amt)
    value = (value * 31) ^ hash(self.chnlid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountTradeRecord:
  """
  Attributes:
   - tradeamt
   - settleamt
   - fee
   - status
   - tradetime
   - tradetype
   - merchantid
   - syssn
   - external_sn
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeamt', None, None, ), # 1
    (2, TType.I64, 'settleamt', None, None, ), # 2
    (3, TType.I64, 'fee', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.STRING, 'tradetime', None, None, ), # 5
    (6, TType.STRING, 'tradetype', None, None, ), # 6
    (7, TType.STRING, 'merchantid', None, None, ), # 7
    (8, TType.STRING, 'syssn', None, None, ), # 8
    (9, TType.STRING, 'external_sn', None, None, ), # 9
  )

  def __init__(self, tradeamt=None, settleamt=None, fee=None, status=None, tradetime=None, tradetype=None, merchantid=None, syssn=None, external_sn=None,):
    self.tradeamt = tradeamt
    self.settleamt = settleamt
    self.fee = fee
    self.status = status
    self.tradetime = tradetime
    self.tradetype = tradetype
    self.merchantid = merchantid
    self.syssn = syssn
    self.external_sn = external_sn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.settleamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tradetime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tradetype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.merchantid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.external_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountTradeRecord')
    if self.tradeamt is not None:
      oprot.writeFieldBegin('tradeamt', TType.I64, 1)
      oprot.writeI64(self.tradeamt)
      oprot.writeFieldEnd()
    if self.settleamt is not None:
      oprot.writeFieldBegin('settleamt', TType.I64, 2)
      oprot.writeI64(self.settleamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 3)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.tradetime is not None:
      oprot.writeFieldBegin('tradetime', TType.STRING, 5)
      oprot.writeString(self.tradetime)
      oprot.writeFieldEnd()
    if self.tradetype is not None:
      oprot.writeFieldBegin('tradetype', TType.STRING, 6)
      oprot.writeString(self.tradetype)
      oprot.writeFieldEnd()
    if self.merchantid is not None:
      oprot.writeFieldBegin('merchantid', TType.STRING, 7)
      oprot.writeString(self.merchantid)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 8)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.external_sn is not None:
      oprot.writeFieldBegin('external_sn', TType.STRING, 9)
      oprot.writeString(self.external_sn)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tradeamt)
    value = (value * 31) ^ hash(self.settleamt)
    value = (value * 31) ^ hash(self.fee)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.tradetime)
    value = (value * 31) ^ hash(self.tradetype)
    value = (value * 31) ^ hash(self.merchantid)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.external_sn)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRecordsRet:
  """
  Attributes:
   - count
   - trade_record_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'count', None, None, ), # 1
    (2, TType.LIST, 'trade_record_list', (TType.STRUCT,(AccountTradeRecord, AccountTradeRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, count=None, trade_record_list=None,):
    self.count = count
    self.trade_record_list = trade_record_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.trade_record_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = AccountTradeRecord()
            _elem33.read(iprot)
            self.trade_record_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRecordsRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 1)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.trade_record_list is not None:
      oprot.writeFieldBegin('trade_record_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.trade_record_list))
      for iter34 in self.trade_record_list:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.trade_record_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceRet:
  """
  Attributes:
   - total_amt
   - available_amt
   - unavailable_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_amt', None, None, ), # 1
    (2, TType.I64, 'available_amt', None, None, ), # 2
    (3, TType.I64, 'unavailable_amt', None, None, ), # 3
  )

  def __init__(self, total_amt=None, available_amt=None, unavailable_amt=None,):
    self.total_amt = total_amt
    self.available_amt = available_amt
    self.unavailable_amt = unavailable_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.available_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.unavailable_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceRet')
    if self.total_amt is not None:
      oprot.writeFieldBegin('total_amt', TType.I64, 1)
      oprot.writeI64(self.total_amt)
      oprot.writeFieldEnd()
    if self.available_amt is not None:
      oprot.writeFieldBegin('available_amt', TType.I64, 2)
      oprot.writeI64(self.available_amt)
      oprot.writeFieldEnd()
    if self.unavailable_amt is not None:
      oprot.writeFieldBegin('unavailable_amt', TType.I64, 3)
      oprot.writeI64(self.unavailable_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_amt)
    value = (value * 31) ^ hash(self.available_amt)
    value = (value * 31) ^ hash(self.unavailable_amt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserAccountRet:
  """
  Attributes:
   - total_balance
   - available_balance
   - unavailable_balance
   - proxy_balance
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_balance', None, None, ), # 1
    (2, TType.I32, 'available_balance', None, None, ), # 2
    (3, TType.I32, 'unavailable_balance', None, None, ), # 3
    (4, TType.I32, 'proxy_balance', None, None, ), # 4
  )

  def __init__(self, total_balance=None, available_balance=None, unavailable_balance=None, proxy_balance=None,):
    self.total_balance = total_balance
    self.available_balance = available_balance
    self.unavailable_balance = unavailable_balance
    self.proxy_balance = proxy_balance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.available_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.unavailable_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.proxy_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserAccountRet')
    if self.total_balance is not None:
      oprot.writeFieldBegin('total_balance', TType.I32, 1)
      oprot.writeI32(self.total_balance)
      oprot.writeFieldEnd()
    if self.available_balance is not None:
      oprot.writeFieldBegin('available_balance', TType.I32, 2)
      oprot.writeI32(self.available_balance)
      oprot.writeFieldEnd()
    if self.unavailable_balance is not None:
      oprot.writeFieldBegin('unavailable_balance', TType.I32, 3)
      oprot.writeI32(self.unavailable_balance)
      oprot.writeFieldEnd()
    if self.proxy_balance is not None:
      oprot.writeFieldBegin('proxy_balance', TType.I32, 4)
      oprot.writeI32(self.proxy_balance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_balance)
    value = (value * 31) ^ hash(self.available_balance)
    value = (value * 31) ^ hash(self.unavailable_balance)
    value = (value * 31) ^ hash(self.proxy_balance)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountBill:
  """
  Attributes:
   - change_amt
   - desc
   - type
   - status
   - optoken
   - biznum
   - optime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'change_amt', None, None, ), # 1
    (2, TType.STRING, 'desc', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.STRING, 'optoken', None, None, ), # 5
    (6, TType.STRING, 'biznum', None, None, ), # 6
    (7, TType.STRING, 'optime', None, None, ), # 7
  )

  def __init__(self, change_amt=None, desc=None, type=None, status=None, optoken=None, biznum=None, optime=None,):
    self.change_amt = change_amt
    self.desc = desc
    self.type = type
    self.status = status
    self.optoken = optoken
    self.biznum = biznum
    self.optime = optime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.change_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.optoken = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.biznum = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.optime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountBill')
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I64, 1)
      oprot.writeI64(self.change_amt)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 2)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.optoken is not None:
      oprot.writeFieldBegin('optoken', TType.STRING, 5)
      oprot.writeString(self.optoken)
      oprot.writeFieldEnd()
    if self.biznum is not None:
      oprot.writeFieldBegin('biznum', TType.STRING, 6)
      oprot.writeString(self.biznum)
      oprot.writeFieldEnd()
    if self.optime is not None:
      oprot.writeFieldBegin('optime', TType.STRING, 7)
      oprot.writeString(self.optime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.change_amt)
    value = (value * 31) ^ hash(self.desc)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.optoken)
    value = (value * 31) ^ hash(self.biznum)
    value = (value * 31) ^ hash(self.optime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillArgs:
  """
  Attributes:
   - userid
   - appsrc
   - startdate
   - enddate
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRING, 'appsrc', None, None, ), # 2
    (3, TType.STRING, 'startdate', None, None, ), # 3
    (4, TType.STRING, 'enddate', None, None, ), # 4
    (5, TType.I32, 'page', None, None, ), # 5
    (6, TType.I64, 'maxnum', None, None, ), # 6
  )

  def __init__(self, userid=None, appsrc=None, startdate=None, enddate=None, page=None, maxnum=None,):
    self.userid = userid
    self.appsrc = appsrc
    self.startdate = startdate
    self.enddate = enddate
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.startdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.enddate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 2)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    if self.startdate is not None:
      oprot.writeFieldBegin('startdate', TType.STRING, 3)
      oprot.writeString(self.startdate)
      oprot.writeFieldEnd()
    if self.enddate is not None:
      oprot.writeFieldBegin('enddate', TType.STRING, 4)
      oprot.writeString(self.enddate)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 5)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 6)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.appsrc is None:
      raise TProtocol.TProtocolException(message='Required field appsrc is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.appsrc)
    value = (value * 31) ^ hash(self.startdate)
    value = (value * 31) ^ hash(self.enddate)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceRecordPara:
  """
  Attributes:
   - serialno
   - head_bank_name
   - bank_name
   - branch_bank_code
   - bank_user
   - bank_account
   - bank_province
   - bank_city
   - payamt
   - note
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serialno', None, None, ), # 1
    (2, TType.STRING, 'head_bank_name', None, None, ), # 2
    (3, TType.STRING, 'bank_name', None, None, ), # 3
    (4, TType.STRING, 'branch_bank_code', None, None, ), # 4
    (5, TType.STRING, 'bank_user', None, None, ), # 5
    (6, TType.STRING, 'bank_account', None, None, ), # 6
    (7, TType.STRING, 'bank_province', None, None, ), # 7
    (8, TType.STRING, 'bank_city', None, None, ), # 8
    (9, TType.I32, 'payamt', None, None, ), # 9
    (10, TType.STRING, 'note', None, None, ), # 10
  )

  def __init__(self, serialno=None, head_bank_name=None, bank_name=None, branch_bank_code=None, bank_user=None, bank_account=None, bank_province=None, bank_city=None, payamt=None, note=None,):
    self.serialno = serialno
    self.head_bank_name = head_bank_name
    self.bank_name = bank_name
    self.branch_bank_code = branch_bank_code
    self.bank_user = bank_user
    self.bank_account = bank_account
    self.bank_province = bank_province
    self.bank_city = bank_city
    self.payamt = payamt
    self.note = note

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serialno = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.head_bank_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.branch_bank_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bank_user = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bank_account = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.payamt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.note = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceRecordPara')
    if self.serialno is not None:
      oprot.writeFieldBegin('serialno', TType.STRING, 1)
      oprot.writeString(self.serialno)
      oprot.writeFieldEnd()
    if self.head_bank_name is not None:
      oprot.writeFieldBegin('head_bank_name', TType.STRING, 2)
      oprot.writeString(self.head_bank_name)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 3)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.branch_bank_code is not None:
      oprot.writeFieldBegin('branch_bank_code', TType.STRING, 4)
      oprot.writeString(self.branch_bank_code)
      oprot.writeFieldEnd()
    if self.bank_user is not None:
      oprot.writeFieldBegin('bank_user', TType.STRING, 5)
      oprot.writeString(self.bank_user)
      oprot.writeFieldEnd()
    if self.bank_account is not None:
      oprot.writeFieldBegin('bank_account', TType.STRING, 6)
      oprot.writeString(self.bank_account)
      oprot.writeFieldEnd()
    if self.bank_province is not None:
      oprot.writeFieldBegin('bank_province', TType.STRING, 7)
      oprot.writeString(self.bank_province)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 8)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I32, 9)
      oprot.writeI32(self.payamt)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 10)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.serialno is None:
      raise TProtocol.TProtocolException(message='Required field serialno is unset!')
    if self.head_bank_name is None:
      raise TProtocol.TProtocolException(message='Required field head_bank_name is unset!')
    if self.bank_name is None:
      raise TProtocol.TProtocolException(message='Required field bank_name is unset!')
    if self.branch_bank_code is None:
      raise TProtocol.TProtocolException(message='Required field branch_bank_code is unset!')
    if self.bank_user is None:
      raise TProtocol.TProtocolException(message='Required field bank_user is unset!')
    if self.bank_account is None:
      raise TProtocol.TProtocolException(message='Required field bank_account is unset!')
    if self.bank_province is None:
      raise TProtocol.TProtocolException(message='Required field bank_province is unset!')
    if self.bank_city is None:
      raise TProtocol.TProtocolException(message='Required field bank_city is unset!')
    if self.payamt is None:
      raise TProtocol.TProtocolException(message='Required field payamt is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serialno)
    value = (value * 31) ^ hash(self.head_bank_name)
    value = (value * 31) ^ hash(self.bank_name)
    value = (value * 31) ^ hash(self.branch_bank_code)
    value = (value * 31) ^ hash(self.bank_user)
    value = (value * 31) ^ hash(self.bank_account)
    value = (value * 31) ^ hash(self.bank_province)
    value = (value * 31) ^ hash(self.bank_city)
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.note)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceApprovalPara:
  """
  Attributes:
   - out_userid
   - batch_number
   - total_money
   - total_items
   - applicant_id
   - remittance_records
   - src
   - note
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.STRING, 'batch_number', None, None, ), # 2
    (3, TType.I32, 'total_money', None, None, ), # 3
    (4, TType.I32, 'total_items', None, None, ), # 4
    (5, TType.STRING, 'applicant_id', None, None, ), # 5
    (6, TType.LIST, 'remittance_records', (TType.STRUCT,(RemittanceRecordPara, RemittanceRecordPara.thrift_spec)), None, ), # 6
    (7, TType.STRING, 'src', None, None, ), # 7
    (8, TType.STRING, 'note', None, None, ), # 8
  )

  def __init__(self, out_userid=None, batch_number=None, total_money=None, total_items=None, applicant_id=None, remittance_records=None, src=None, note=None,):
    self.out_userid = out_userid
    self.batch_number = batch_number
    self.total_money = total_money
    self.total_items = total_items
    self.applicant_id = applicant_id
    self.remittance_records = remittance_records
    self.src = src
    self.note = note

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.batch_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.total_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.total_items = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.applicant_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.remittance_records = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = RemittanceRecordPara()
            _elem40.read(iprot)
            self.remittance_records.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.note = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceApprovalPara')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.batch_number is not None:
      oprot.writeFieldBegin('batch_number', TType.STRING, 2)
      oprot.writeString(self.batch_number)
      oprot.writeFieldEnd()
    if self.total_money is not None:
      oprot.writeFieldBegin('total_money', TType.I32, 3)
      oprot.writeI32(self.total_money)
      oprot.writeFieldEnd()
    if self.total_items is not None:
      oprot.writeFieldBegin('total_items', TType.I32, 4)
      oprot.writeI32(self.total_items)
      oprot.writeFieldEnd()
    if self.applicant_id is not None:
      oprot.writeFieldBegin('applicant_id', TType.STRING, 5)
      oprot.writeString(self.applicant_id)
      oprot.writeFieldEnd()
    if self.remittance_records is not None:
      oprot.writeFieldBegin('remittance_records', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.remittance_records))
      for iter41 in self.remittance_records:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 7)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 8)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_userid is None:
      raise TProtocol.TProtocolException(message='Required field out_userid is unset!')
    if self.batch_number is None:
      raise TProtocol.TProtocolException(message='Required field batch_number is unset!')
    if self.total_money is None:
      raise TProtocol.TProtocolException(message='Required field total_money is unset!')
    if self.total_items is None:
      raise TProtocol.TProtocolException(message='Required field total_items is unset!')
    if self.applicant_id is None:
      raise TProtocol.TProtocolException(message='Required field applicant_id is unset!')
    if self.remittance_records is None:
      raise TProtocol.TProtocolException(message='Required field remittance_records is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.batch_number)
    value = (value * 31) ^ hash(self.total_money)
    value = (value * 31) ^ hash(self.total_items)
    value = (value * 31) ^ hash(self.applicant_id)
    value = (value * 31) ^ hash(self.remittance_records)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.note)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceApprovalQuery:
  """
  Attributes:
   - out_userid
   - page
   - maxnum
   - src
   - biz_type
   - batch_number
   - approval_id
   - batch_status
   - start_date
   - end_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.I32, 'page', None, None, ), # 2
    (3, TType.I32, 'maxnum', None, None, ), # 3
    (4, TType.STRING, 'src', None, None, ), # 4
    (5, TType.I16, 'biz_type', None, None, ), # 5
    (6, TType.STRING, 'batch_number', None, None, ), # 6
    (7, TType.I64, 'approval_id', None, None, ), # 7
    (8, TType.I32, 'batch_status', None, None, ), # 8
    (9, TType.STRING, 'start_date', None, None, ), # 9
    (10, TType.STRING, 'end_date', None, None, ), # 10
  )

  def __init__(self, out_userid=None, page=None, maxnum=None, src=None, biz_type=None, batch_number=None, approval_id=None, batch_status=None, start_date=None, end_date=None,):
    self.out_userid = out_userid
    self.page = page
    self.maxnum = maxnum
    self.src = src
    self.biz_type = biz_type
    self.batch_number = batch_number
    self.approval_id = approval_id
    self.batch_status = batch_status
    self.start_date = start_date
    self.end_date = end_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.biz_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.batch_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.approval_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.batch_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceApprovalQuery')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 3)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 4)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.biz_type is not None:
      oprot.writeFieldBegin('biz_type', TType.I16, 5)
      oprot.writeI16(self.biz_type)
      oprot.writeFieldEnd()
    if self.batch_number is not None:
      oprot.writeFieldBegin('batch_number', TType.STRING, 6)
      oprot.writeString(self.batch_number)
      oprot.writeFieldEnd()
    if self.approval_id is not None:
      oprot.writeFieldBegin('approval_id', TType.I64, 7)
      oprot.writeI64(self.approval_id)
      oprot.writeFieldEnd()
    if self.batch_status is not None:
      oprot.writeFieldBegin('batch_status', TType.I32, 8)
      oprot.writeI32(self.batch_status)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 9)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 10)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_userid is None:
      raise TProtocol.TProtocolException(message='Required field out_userid is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.biz_type)
    value = (value * 31) ^ hash(self.batch_number)
    value = (value * 31) ^ hash(self.approval_id)
    value = (value * 31) ^ hash(self.batch_status)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceApproval:
  """
  Attributes:
   - id
   - out_userid
   - batch_number
   - memo
   - total_money
   - total_items
   - batch_status
   - applicant_id
   - approver_id
   - application_time
   - processing_time
   - remittance_time
   - errortip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'out_userid', None, None, ), # 2
    (3, TType.STRING, 'batch_number', None, None, ), # 3
    (4, TType.STRING, 'memo', None, None, ), # 4
    (5, TType.I32, 'total_money', None, None, ), # 5
    (6, TType.I32, 'total_items', None, None, ), # 6
    (7, TType.I32, 'batch_status', None, None, ), # 7
    (8, TType.STRING, 'applicant_id', None, None, ), # 8
    (9, TType.STRING, 'approver_id', None, None, ), # 9
    (10, TType.STRING, 'application_time', None, None, ), # 10
    (11, TType.STRING, 'processing_time', None, None, ), # 11
    (12, TType.STRING, 'remittance_time', None, None, ), # 12
    (13, TType.STRING, 'errortip', None, None, ), # 13
  )

  def __init__(self, id=None, out_userid=None, batch_number=None, memo=None, total_money=None, total_items=None, batch_status=None, applicant_id=None, approver_id=None, application_time=None, processing_time=None, remittance_time=None, errortip=None,):
    self.id = id
    self.out_userid = out_userid
    self.batch_number = batch_number
    self.memo = memo
    self.total_money = total_money
    self.total_items = total_items
    self.batch_status = batch_status
    self.applicant_id = applicant_id
    self.approver_id = approver_id
    self.application_time = application_time
    self.processing_time = processing_time
    self.remittance_time = remittance_time
    self.errortip = errortip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.batch_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.total_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.total_items = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.batch_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.applicant_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.approver_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.application_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.processing_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.remittance_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.errortip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceApproval')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 2)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.batch_number is not None:
      oprot.writeFieldBegin('batch_number', TType.STRING, 3)
      oprot.writeString(self.batch_number)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 4)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.total_money is not None:
      oprot.writeFieldBegin('total_money', TType.I32, 5)
      oprot.writeI32(self.total_money)
      oprot.writeFieldEnd()
    if self.total_items is not None:
      oprot.writeFieldBegin('total_items', TType.I32, 6)
      oprot.writeI32(self.total_items)
      oprot.writeFieldEnd()
    if self.batch_status is not None:
      oprot.writeFieldBegin('batch_status', TType.I32, 7)
      oprot.writeI32(self.batch_status)
      oprot.writeFieldEnd()
    if self.applicant_id is not None:
      oprot.writeFieldBegin('applicant_id', TType.STRING, 8)
      oprot.writeString(self.applicant_id)
      oprot.writeFieldEnd()
    if self.approver_id is not None:
      oprot.writeFieldBegin('approver_id', TType.STRING, 9)
      oprot.writeString(self.approver_id)
      oprot.writeFieldEnd()
    if self.application_time is not None:
      oprot.writeFieldBegin('application_time', TType.STRING, 10)
      oprot.writeString(self.application_time)
      oprot.writeFieldEnd()
    if self.processing_time is not None:
      oprot.writeFieldBegin('processing_time', TType.STRING, 11)
      oprot.writeString(self.processing_time)
      oprot.writeFieldEnd()
    if self.remittance_time is not None:
      oprot.writeFieldBegin('remittance_time', TType.STRING, 12)
      oprot.writeString(self.remittance_time)
      oprot.writeFieldEnd()
    if self.errortip is not None:
      oprot.writeFieldBegin('errortip', TType.STRING, 13)
      oprot.writeString(self.errortip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.batch_number)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.total_money)
    value = (value * 31) ^ hash(self.total_items)
    value = (value * 31) ^ hash(self.batch_status)
    value = (value * 31) ^ hash(self.applicant_id)
    value = (value * 31) ^ hash(self.approver_id)
    value = (value * 31) ^ hash(self.application_time)
    value = (value * 31) ^ hash(self.processing_time)
    value = (value * 31) ^ hash(self.remittance_time)
    value = (value * 31) ^ hash(self.errortip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceApprovalRet:
  """
  Attributes:
   - count
   - page
   - maxnum
   - remittance_approvals
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.I32, 'page', None, None, ), # 2
    (3, TType.I32, 'maxnum', None, None, ), # 3
    (4, TType.LIST, 'remittance_approvals', (TType.STRUCT,(RemittanceApproval, RemittanceApproval.thrift_spec)), None, ), # 4
  )

  def __init__(self, count=None, page=None, maxnum=None, remittance_approvals=None,):
    self.count = count
    self.page = page
    self.maxnum = maxnum
    self.remittance_approvals = remittance_approvals

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.remittance_approvals = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = RemittanceApproval()
            _elem47.read(iprot)
            self.remittance_approvals.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceApprovalRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 3)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.remittance_approvals is not None:
      oprot.writeFieldBegin('remittance_approvals', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.remittance_approvals))
      for iter48 in self.remittance_approvals:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.remittance_approvals)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceSummaryRet:
  """
  Attributes:
   - batch_number
   - out_userid
   - memo
   - batch_status
   - applicant_id
   - approver_id
   - application_time
   - processing_time
   - remittance_time
   - errortip
   - total_money
   - total_items
   - success_money
   - success_items
   - fail_money
   - fail_items
   - update_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'batch_number', None, None, ), # 1
    (2, TType.STRING, 'out_userid', None, None, ), # 2
    (3, TType.STRING, 'memo', None, None, ), # 3
    (4, TType.I32, 'batch_status', None, None, ), # 4
    (5, TType.STRING, 'applicant_id', None, None, ), # 5
    (6, TType.STRING, 'approver_id', None, None, ), # 6
    (7, TType.STRING, 'application_time', None, None, ), # 7
    (8, TType.STRING, 'processing_time', None, None, ), # 8
    (9, TType.STRING, 'remittance_time', None, None, ), # 9
    (10, TType.STRING, 'errortip', None, None, ), # 10
    (11, TType.I32, 'total_money', None, None, ), # 11
    (12, TType.I32, 'total_items', None, None, ), # 12
    (13, TType.I32, 'success_money', None, None, ), # 13
    (14, TType.I32, 'success_items', None, None, ), # 14
    (15, TType.I32, 'fail_money', None, None, ), # 15
    (16, TType.I32, 'fail_items', None, None, ), # 16
    (17, TType.STRING, 'update_time', None, None, ), # 17
  )

  def __init__(self, batch_number=None, out_userid=None, memo=None, batch_status=None, applicant_id=None, approver_id=None, application_time=None, processing_time=None, remittance_time=None, errortip=None, total_money=None, total_items=None, success_money=None, success_items=None, fail_money=None, fail_items=None, update_time=None,):
    self.batch_number = batch_number
    self.out_userid = out_userid
    self.memo = memo
    self.batch_status = batch_status
    self.applicant_id = applicant_id
    self.approver_id = approver_id
    self.application_time = application_time
    self.processing_time = processing_time
    self.remittance_time = remittance_time
    self.errortip = errortip
    self.total_money = total_money
    self.total_items = total_items
    self.success_money = success_money
    self.success_items = success_items
    self.fail_money = fail_money
    self.fail_items = fail_items
    self.update_time = update_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.batch_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.batch_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.applicant_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.approver_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.application_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.processing_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.remittance_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.errortip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.total_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.total_items = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.success_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.success_items = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.fail_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.fail_items = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.update_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceSummaryRet')
    if self.batch_number is not None:
      oprot.writeFieldBegin('batch_number', TType.STRING, 1)
      oprot.writeString(self.batch_number)
      oprot.writeFieldEnd()
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 2)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 3)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.batch_status is not None:
      oprot.writeFieldBegin('batch_status', TType.I32, 4)
      oprot.writeI32(self.batch_status)
      oprot.writeFieldEnd()
    if self.applicant_id is not None:
      oprot.writeFieldBegin('applicant_id', TType.STRING, 5)
      oprot.writeString(self.applicant_id)
      oprot.writeFieldEnd()
    if self.approver_id is not None:
      oprot.writeFieldBegin('approver_id', TType.STRING, 6)
      oprot.writeString(self.approver_id)
      oprot.writeFieldEnd()
    if self.application_time is not None:
      oprot.writeFieldBegin('application_time', TType.STRING, 7)
      oprot.writeString(self.application_time)
      oprot.writeFieldEnd()
    if self.processing_time is not None:
      oprot.writeFieldBegin('processing_time', TType.STRING, 8)
      oprot.writeString(self.processing_time)
      oprot.writeFieldEnd()
    if self.remittance_time is not None:
      oprot.writeFieldBegin('remittance_time', TType.STRING, 9)
      oprot.writeString(self.remittance_time)
      oprot.writeFieldEnd()
    if self.errortip is not None:
      oprot.writeFieldBegin('errortip', TType.STRING, 10)
      oprot.writeString(self.errortip)
      oprot.writeFieldEnd()
    if self.total_money is not None:
      oprot.writeFieldBegin('total_money', TType.I32, 11)
      oprot.writeI32(self.total_money)
      oprot.writeFieldEnd()
    if self.total_items is not None:
      oprot.writeFieldBegin('total_items', TType.I32, 12)
      oprot.writeI32(self.total_items)
      oprot.writeFieldEnd()
    if self.success_money is not None:
      oprot.writeFieldBegin('success_money', TType.I32, 13)
      oprot.writeI32(self.success_money)
      oprot.writeFieldEnd()
    if self.success_items is not None:
      oprot.writeFieldBegin('success_items', TType.I32, 14)
      oprot.writeI32(self.success_items)
      oprot.writeFieldEnd()
    if self.fail_money is not None:
      oprot.writeFieldBegin('fail_money', TType.I32, 15)
      oprot.writeI32(self.fail_money)
      oprot.writeFieldEnd()
    if self.fail_items is not None:
      oprot.writeFieldBegin('fail_items', TType.I32, 16)
      oprot.writeI32(self.fail_items)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.STRING, 17)
      oprot.writeString(self.update_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.batch_number)
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.batch_status)
    value = (value * 31) ^ hash(self.applicant_id)
    value = (value * 31) ^ hash(self.approver_id)
    value = (value * 31) ^ hash(self.application_time)
    value = (value * 31) ^ hash(self.processing_time)
    value = (value * 31) ^ hash(self.remittance_time)
    value = (value * 31) ^ hash(self.errortip)
    value = (value * 31) ^ hash(self.total_money)
    value = (value * 31) ^ hash(self.total_items)
    value = (value * 31) ^ hash(self.success_money)
    value = (value * 31) ^ hash(self.success_items)
    value = (value * 31) ^ hash(self.fail_money)
    value = (value * 31) ^ hash(self.fail_items)
    value = (value * 31) ^ hash(self.update_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceRecord:
  """
  Attributes:
   - serialno
   - remittance_serialno
   - pay_money
   - status
   - memo
   - update_time
   - errortip
   - bank_account
   - bank_user
   - bank_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serialno', None, None, ), # 1
    (2, TType.STRING, 'remittance_serialno', None, None, ), # 2
    (3, TType.I32, 'pay_money', None, None, ), # 3
    (4, TType.I16, 'status', None, None, ), # 4
    (5, TType.STRING, 'memo', None, None, ), # 5
    (6, TType.STRING, 'update_time', None, None, ), # 6
    (7, TType.STRING, 'errortip', None, None, ), # 7
    (8, TType.STRING, 'bank_account', None, None, ), # 8
    (9, TType.STRING, 'bank_user', None, None, ), # 9
    (10, TType.STRING, 'bank_name', None, None, ), # 10
  )

  def __init__(self, serialno=None, remittance_serialno=None, pay_money=None, status=None, memo=None, update_time=None, errortip=None, bank_account=None, bank_user=None, bank_name=None,):
    self.serialno = serialno
    self.remittance_serialno = remittance_serialno
    self.pay_money = pay_money
    self.status = status
    self.memo = memo
    self.update_time = update_time
    self.errortip = errortip
    self.bank_account = bank_account
    self.bank_user = bank_user
    self.bank_name = bank_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serialno = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.remittance_serialno = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pay_money = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.update_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.errortip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_account = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_user = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceRecord')
    if self.serialno is not None:
      oprot.writeFieldBegin('serialno', TType.STRING, 1)
      oprot.writeString(self.serialno)
      oprot.writeFieldEnd()
    if self.remittance_serialno is not None:
      oprot.writeFieldBegin('remittance_serialno', TType.STRING, 2)
      oprot.writeString(self.remittance_serialno)
      oprot.writeFieldEnd()
    if self.pay_money is not None:
      oprot.writeFieldBegin('pay_money', TType.I32, 3)
      oprot.writeI32(self.pay_money)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 4)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.STRING, 6)
      oprot.writeString(self.update_time)
      oprot.writeFieldEnd()
    if self.errortip is not None:
      oprot.writeFieldBegin('errortip', TType.STRING, 7)
      oprot.writeString(self.errortip)
      oprot.writeFieldEnd()
    if self.bank_account is not None:
      oprot.writeFieldBegin('bank_account', TType.STRING, 8)
      oprot.writeString(self.bank_account)
      oprot.writeFieldEnd()
    if self.bank_user is not None:
      oprot.writeFieldBegin('bank_user', TType.STRING, 9)
      oprot.writeString(self.bank_user)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 10)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.serialno)
    value = (value * 31) ^ hash(self.remittance_serialno)
    value = (value * 31) ^ hash(self.pay_money)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.errortip)
    value = (value * 31) ^ hash(self.bank_account)
    value = (value * 31) ^ hash(self.bank_user)
    value = (value * 31) ^ hash(self.bank_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceRecordRet:
  """
  Attributes:
   - count
   - maxnum
   - page
   - out_userid
   - remittance_records
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.I32, 'maxnum', None, None, ), # 2
    (3, TType.I32, 'page', None, None, ), # 3
    (4, TType.STRING, 'out_userid', None, None, ), # 4
    (5, TType.LIST, 'remittance_records', (TType.STRUCT,(RemittanceRecord, RemittanceRecord.thrift_spec)), None, ), # 5
  )

  def __init__(self, count=None, maxnum=None, page=None, out_userid=None, remittance_records=None,):
    self.count = count
    self.maxnum = maxnum
    self.page = page
    self.out_userid = out_userid
    self.remittance_records = remittance_records

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.remittance_records = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = RemittanceRecord()
            _elem54.read(iprot)
            self.remittance_records.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceRecordRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 2)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 3)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 4)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.remittance_records is not None:
      oprot.writeFieldBegin('remittance_records', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.remittance_records))
      for iter55 in self.remittance_records:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.remittance_records)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceRecordQuery:
  """
  Attributes:
   - approval_id
   - page
   - maxnum
   - src
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'approval_id', None, None, ), # 1
    (2, TType.I32, 'page', None, None, ), # 2
    (3, TType.I32, 'maxnum', None, None, ), # 3
    (4, TType.STRING, 'src', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
  )

  def __init__(self, approval_id=None, page=None, maxnum=None, src=None, status=None,):
    self.approval_id = approval_id
    self.page = page
    self.maxnum = maxnum
    self.src = src
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.approval_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceRecordQuery')
    if self.approval_id is not None:
      oprot.writeFieldBegin('approval_id', TType.I64, 1)
      oprot.writeI64(self.approval_id)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 3)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 4)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.approval_id is None:
      raise TProtocol.TProtocolException(message='Required field approval_id is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.approval_id)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillRet:
  """
  Attributes:
   - total_count
   - count
   - bill_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_count', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
    (3, TType.LIST, 'bill_list', (TType.STRUCT,(AccountBill, AccountBill.thrift_spec)), None, ), # 3
  )

  def __init__(self, total_count=None, count=None, bill_list=None,):
    self.total_count = total_count
    self.count = count
    self.bill_list = bill_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.bill_list = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = AccountBill()
            _elem61.read(iprot)
            self.bill_list.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillRet')
    if self.total_count is not None:
      oprot.writeFieldBegin('total_count', TType.I64, 1)
      oprot.writeI64(self.total_count)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.bill_list is not None:
      oprot.writeFieldBegin('bill_list', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.bill_list))
      for iter62 in self.bill_list:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_count)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.bill_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemittanceRet:
  """
  Attributes:
   - payamt
   - status
   - expectdate
   - paydate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'payamt', None, None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
    (3, TType.STRING, 'expectdate', None, None, ), # 3
    (4, TType.STRING, 'paydate', None, None, ), # 4
  )

  def __init__(self, payamt=None, status=None, expectdate=None, paydate=None,):
    self.payamt = payamt
    self.status = status
    self.expectdate = expectdate
    self.paydate = paydate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paydate = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemittanceRet')
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 1)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.expectdate is not None:
      oprot.writeFieldBegin('expectdate', TType.STRING, 3)
      oprot.writeString(self.expectdate)
      oprot.writeFieldEnd()
    if self.paydate is not None:
      oprot.writeFieldBegin('paydate', TType.STRING, 4)
      oprot.writeString(self.paydate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.expectdate)
    value = (value * 31) ^ hash(self.paydate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemitsettlefeeRet:
  """
  Attributes:
   - out_userid
   - src
   - remit_settlefee
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'remit_settlefee', None, None, ), # 3
  )

  def __init__(self, out_userid=None, src=None, remit_settlefee=None,):
    self.out_userid = out_userid
    self.src = src
    self.remit_settlefee = remit_settlefee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.remit_settlefee = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemitsettlefeeRet')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.remit_settlefee is not None:
      oprot.writeFieldBegin('remit_settlefee', TType.I32, 3)
      oprot.writeI32(self.remit_settlefee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.remit_settlefee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountFeeRet:
  """
  Attributes:
   - userid
   - feeratio
   - creditratio
   - maxfee
   - creditmaxfee
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.DOUBLE, 'feeratio', None, None, ), # 2
    (3, TType.DOUBLE, 'creditratio', None, None, ), # 3
    (4, TType.I64, 'maxfee', None, None, ), # 4
    (5, TType.I64, 'creditmaxfee', None, None, ), # 5
  )

  def __init__(self, userid=None, feeratio=None, creditratio=None, maxfee=None, creditmaxfee=None,):
    self.userid = userid
    self.feeratio = feeratio
    self.creditratio = creditratio
    self.maxfee = maxfee
    self.creditmaxfee = creditmaxfee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.feeratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.creditratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.maxfee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creditmaxfee = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountFeeRet')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.feeratio is not None:
      oprot.writeFieldBegin('feeratio', TType.DOUBLE, 2)
      oprot.writeDouble(self.feeratio)
      oprot.writeFieldEnd()
    if self.creditratio is not None:
      oprot.writeFieldBegin('creditratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.creditratio)
      oprot.writeFieldEnd()
    if self.maxfee is not None:
      oprot.writeFieldBegin('maxfee', TType.I64, 4)
      oprot.writeI64(self.maxfee)
      oprot.writeFieldEnd()
    if self.creditmaxfee is not None:
      oprot.writeFieldBegin('creditmaxfee', TType.I64, 5)
      oprot.writeI64(self.creditmaxfee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.feeratio)
    value = (value * 31) ^ hash(self.creditratio)
    value = (value * 31) ^ hash(self.maxfee)
    value = (value * 31) ^ hash(self.creditmaxfee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountFee:
  """
  Attributes:
   - userid
   - feeratio
   - creditratio
   - maxfee
   - creditmaxfee
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.DOUBLE, 'feeratio', None, None, ), # 2
    (3, TType.DOUBLE, 'creditratio', None, None, ), # 3
    (4, TType.I64, 'maxfee', None, None, ), # 4
    (5, TType.I64, 'creditmaxfee', None, None, ), # 5
  )

  def __init__(self, userid=None, feeratio=None, creditratio=None, maxfee=None, creditmaxfee=None,):
    self.userid = userid
    self.feeratio = feeratio
    self.creditratio = creditratio
    self.maxfee = maxfee
    self.creditmaxfee = creditmaxfee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.feeratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.creditratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.maxfee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.creditmaxfee = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountFee')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.feeratio is not None:
      oprot.writeFieldBegin('feeratio', TType.DOUBLE, 2)
      oprot.writeDouble(self.feeratio)
      oprot.writeFieldEnd()
    if self.creditratio is not None:
      oprot.writeFieldBegin('creditratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.creditratio)
      oprot.writeFieldEnd()
    if self.maxfee is not None:
      oprot.writeFieldBegin('maxfee', TType.I64, 4)
      oprot.writeI64(self.maxfee)
      oprot.writeFieldEnd()
    if self.creditmaxfee is not None:
      oprot.writeFieldBegin('creditmaxfee', TType.I64, 5)
      oprot.writeI64(self.creditmaxfee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.feeratio)
    value = (value * 31) ^ hash(self.creditratio)
    value = (value * 31) ^ hash(self.maxfee)
    value = (value * 31) ^ hash(self.creditmaxfee)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatioRecord:
  """
  Attributes:
   - out_userid
   - src
   - feeratio
   - creditratio
   - preauthratio
   - tenpay_ratio
   - yeepay_ratio
   - unionpay_ratio
   - alipay_ratio
   - maxfee
   - creditmaxfee
   - preauthmaxfee
   - tenpay_maxfee
   - alipay_maxfee
   - yeepay_maxfee
   - unionpay_maxfee
   - alipay_qr_ratio
   - tenpay_qr_ratio
   - qfuid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.DOUBLE, 'feeratio', None, None, ), # 3
    (4, TType.DOUBLE, 'creditratio', None, None, ), # 4
    (5, TType.DOUBLE, 'preauthratio', None, None, ), # 5
    (6, TType.DOUBLE, 'tenpay_ratio', None, None, ), # 6
    (7, TType.DOUBLE, 'yeepay_ratio', None, None, ), # 7
    (8, TType.DOUBLE, 'unionpay_ratio', None, None, ), # 8
    (9, TType.DOUBLE, 'alipay_ratio', None, None, ), # 9
    (10, TType.I32, 'maxfee', None, None, ), # 10
    (11, TType.I32, 'creditmaxfee', None, None, ), # 11
    (12, TType.I32, 'preauthmaxfee', None, None, ), # 12
    (13, TType.I32, 'tenpay_maxfee', None, None, ), # 13
    (14, TType.I32, 'alipay_maxfee', None, None, ), # 14
    (15, TType.I32, 'yeepay_maxfee', None, None, ), # 15
    (16, TType.I32, 'unionpay_maxfee', None, None, ), # 16
    (17, TType.DOUBLE, 'alipay_qr_ratio', None, 0.006, ), # 17
    (18, TType.DOUBLE, 'tenpay_qr_ratio', None, 0.006, ), # 18
    (19, TType.I64, 'qfuid', None, 0, ), # 19
  )

  def __init__(self, out_userid=None, src=None, feeratio=None, creditratio=None, preauthratio=None, tenpay_ratio=None, yeepay_ratio=None, unionpay_ratio=None, alipay_ratio=None, maxfee=None, creditmaxfee=None, preauthmaxfee=None, tenpay_maxfee=None, alipay_maxfee=None, yeepay_maxfee=None, unionpay_maxfee=None, alipay_qr_ratio=thrift_spec[17][4], tenpay_qr_ratio=thrift_spec[18][4], qfuid=thrift_spec[19][4],):
    self.out_userid = out_userid
    self.src = src
    self.feeratio = feeratio
    self.creditratio = creditratio
    self.preauthratio = preauthratio
    self.tenpay_ratio = tenpay_ratio
    self.yeepay_ratio = yeepay_ratio
    self.unionpay_ratio = unionpay_ratio
    self.alipay_ratio = alipay_ratio
    self.maxfee = maxfee
    self.creditmaxfee = creditmaxfee
    self.preauthmaxfee = preauthmaxfee
    self.tenpay_maxfee = tenpay_maxfee
    self.alipay_maxfee = alipay_maxfee
    self.yeepay_maxfee = yeepay_maxfee
    self.unionpay_maxfee = unionpay_maxfee
    self.alipay_qr_ratio = alipay_qr_ratio
    self.tenpay_qr_ratio = tenpay_qr_ratio
    self.qfuid = qfuid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.feeratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.creditratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.preauthratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.tenpay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.yeepay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.unionpay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.alipay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.maxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.creditmaxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.preauthmaxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.tenpay_maxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.alipay_maxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.yeepay_maxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.unionpay_maxfee = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.alipay_qr_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.tenpay_qr_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.qfuid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatioRecord')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.feeratio is not None:
      oprot.writeFieldBegin('feeratio', TType.DOUBLE, 3)
      oprot.writeDouble(self.feeratio)
      oprot.writeFieldEnd()
    if self.creditratio is not None:
      oprot.writeFieldBegin('creditratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.creditratio)
      oprot.writeFieldEnd()
    if self.preauthratio is not None:
      oprot.writeFieldBegin('preauthratio', TType.DOUBLE, 5)
      oprot.writeDouble(self.preauthratio)
      oprot.writeFieldEnd()
    if self.tenpay_ratio is not None:
      oprot.writeFieldBegin('tenpay_ratio', TType.DOUBLE, 6)
      oprot.writeDouble(self.tenpay_ratio)
      oprot.writeFieldEnd()
    if self.yeepay_ratio is not None:
      oprot.writeFieldBegin('yeepay_ratio', TType.DOUBLE, 7)
      oprot.writeDouble(self.yeepay_ratio)
      oprot.writeFieldEnd()
    if self.unionpay_ratio is not None:
      oprot.writeFieldBegin('unionpay_ratio', TType.DOUBLE, 8)
      oprot.writeDouble(self.unionpay_ratio)
      oprot.writeFieldEnd()
    if self.alipay_ratio is not None:
      oprot.writeFieldBegin('alipay_ratio', TType.DOUBLE, 9)
      oprot.writeDouble(self.alipay_ratio)
      oprot.writeFieldEnd()
    if self.maxfee is not None:
      oprot.writeFieldBegin('maxfee', TType.I32, 10)
      oprot.writeI32(self.maxfee)
      oprot.writeFieldEnd()
    if self.creditmaxfee is not None:
      oprot.writeFieldBegin('creditmaxfee', TType.I32, 11)
      oprot.writeI32(self.creditmaxfee)
      oprot.writeFieldEnd()
    if self.preauthmaxfee is not None:
      oprot.writeFieldBegin('preauthmaxfee', TType.I32, 12)
      oprot.writeI32(self.preauthmaxfee)
      oprot.writeFieldEnd()
    if self.tenpay_maxfee is not None:
      oprot.writeFieldBegin('tenpay_maxfee', TType.I32, 13)
      oprot.writeI32(self.tenpay_maxfee)
      oprot.writeFieldEnd()
    if self.alipay_maxfee is not None:
      oprot.writeFieldBegin('alipay_maxfee', TType.I32, 14)
      oprot.writeI32(self.alipay_maxfee)
      oprot.writeFieldEnd()
    if self.yeepay_maxfee is not None:
      oprot.writeFieldBegin('yeepay_maxfee', TType.I32, 15)
      oprot.writeI32(self.yeepay_maxfee)
      oprot.writeFieldEnd()
    if self.unionpay_maxfee is not None:
      oprot.writeFieldBegin('unionpay_maxfee', TType.I32, 16)
      oprot.writeI32(self.unionpay_maxfee)
      oprot.writeFieldEnd()
    if self.alipay_qr_ratio is not None:
      oprot.writeFieldBegin('alipay_qr_ratio', TType.DOUBLE, 17)
      oprot.writeDouble(self.alipay_qr_ratio)
      oprot.writeFieldEnd()
    if self.tenpay_qr_ratio is not None:
      oprot.writeFieldBegin('tenpay_qr_ratio', TType.DOUBLE, 18)
      oprot.writeDouble(self.tenpay_qr_ratio)
      oprot.writeFieldEnd()
    if self.qfuid is not None:
      oprot.writeFieldBegin('qfuid', TType.I64, 19)
      oprot.writeI64(self.qfuid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_userid is None:
      raise TProtocol.TProtocolException(message='Required field out_userid is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.feeratio)
    value = (value * 31) ^ hash(self.creditratio)
    value = (value * 31) ^ hash(self.preauthratio)
    value = (value * 31) ^ hash(self.tenpay_ratio)
    value = (value * 31) ^ hash(self.yeepay_ratio)
    value = (value * 31) ^ hash(self.unionpay_ratio)
    value = (value * 31) ^ hash(self.alipay_ratio)
    value = (value * 31) ^ hash(self.maxfee)
    value = (value * 31) ^ hash(self.creditmaxfee)
    value = (value * 31) ^ hash(self.preauthmaxfee)
    value = (value * 31) ^ hash(self.tenpay_maxfee)
    value = (value * 31) ^ hash(self.alipay_maxfee)
    value = (value * 31) ^ hash(self.yeepay_maxfee)
    value = (value * 31) ^ hash(self.unionpay_maxfee)
    value = (value * 31) ^ hash(self.alipay_qr_ratio)
    value = (value * 31) ^ hash(self.tenpay_qr_ratio)
    value = (value * 31) ^ hash(self.qfuid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeFeeStruct:
  """
  Attributes:
   - userid
   - src
   - groupid
   - debit_ratio
   - credit_ratio
   - debit_maxfee
   - credit_maxfee
   - tenpay_ratio
   - alipay_ratio
   - tenpay_maxfee
   - alipay_maxfee
   - jdpay_ratio
   - qqpay_ratio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I16, 'groupid', None, None, ), # 3
    (4, TType.DOUBLE, 'debit_ratio', None, None, ), # 4
    (5, TType.DOUBLE, 'credit_ratio', None, None, ), # 5
    (6, TType.I16, 'debit_maxfee', None, None, ), # 6
    (7, TType.I16, 'credit_maxfee', None, None, ), # 7
    (8, TType.DOUBLE, 'tenpay_ratio', None, None, ), # 8
    (9, TType.DOUBLE, 'alipay_ratio', None, None, ), # 9
    (10, TType.I16, 'tenpay_maxfee', None, None, ), # 10
    (11, TType.I16, 'alipay_maxfee', None, None, ), # 11
    (12, TType.DOUBLE, 'jdpay_ratio', None, None, ), # 12
    (13, TType.DOUBLE, 'qqpay_ratio', None, None, ), # 13
  )

  def __init__(self, userid=None, src=None, groupid=None, debit_ratio=None, credit_ratio=None, debit_maxfee=None, credit_maxfee=None, tenpay_ratio=None, alipay_ratio=None, tenpay_maxfee=None, alipay_maxfee=None, jdpay_ratio=None, qqpay_ratio=None,):
    self.userid = userid
    self.src = src
    self.groupid = groupid
    self.debit_ratio = debit_ratio
    self.credit_ratio = credit_ratio
    self.debit_maxfee = debit_maxfee
    self.credit_maxfee = credit_maxfee
    self.tenpay_ratio = tenpay_ratio
    self.alipay_ratio = alipay_ratio
    self.tenpay_maxfee = tenpay_maxfee
    self.alipay_maxfee = alipay_maxfee
    self.jdpay_ratio = jdpay_ratio
    self.qqpay_ratio = qqpay_ratio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.groupid = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.debit_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.credit_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.debit_maxfee = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.credit_maxfee = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.tenpay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.alipay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.tenpay_maxfee = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.alipay_maxfee = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.jdpay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.qqpay_ratio = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeFeeStruct')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.groupid is not None:
      oprot.writeFieldBegin('groupid', TType.I16, 3)
      oprot.writeI16(self.groupid)
      oprot.writeFieldEnd()
    if self.debit_ratio is not None:
      oprot.writeFieldBegin('debit_ratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.debit_ratio)
      oprot.writeFieldEnd()
    if self.credit_ratio is not None:
      oprot.writeFieldBegin('credit_ratio', TType.DOUBLE, 5)
      oprot.writeDouble(self.credit_ratio)
      oprot.writeFieldEnd()
    if self.debit_maxfee is not None:
      oprot.writeFieldBegin('debit_maxfee', TType.I16, 6)
      oprot.writeI16(self.debit_maxfee)
      oprot.writeFieldEnd()
    if self.credit_maxfee is not None:
      oprot.writeFieldBegin('credit_maxfee', TType.I16, 7)
      oprot.writeI16(self.credit_maxfee)
      oprot.writeFieldEnd()
    if self.tenpay_ratio is not None:
      oprot.writeFieldBegin('tenpay_ratio', TType.DOUBLE, 8)
      oprot.writeDouble(self.tenpay_ratio)
      oprot.writeFieldEnd()
    if self.alipay_ratio is not None:
      oprot.writeFieldBegin('alipay_ratio', TType.DOUBLE, 9)
      oprot.writeDouble(self.alipay_ratio)
      oprot.writeFieldEnd()
    if self.tenpay_maxfee is not None:
      oprot.writeFieldBegin('tenpay_maxfee', TType.I16, 10)
      oprot.writeI16(self.tenpay_maxfee)
      oprot.writeFieldEnd()
    if self.alipay_maxfee is not None:
      oprot.writeFieldBegin('alipay_maxfee', TType.I16, 11)
      oprot.writeI16(self.alipay_maxfee)
      oprot.writeFieldEnd()
    if self.jdpay_ratio is not None:
      oprot.writeFieldBegin('jdpay_ratio', TType.DOUBLE, 12)
      oprot.writeDouble(self.jdpay_ratio)
      oprot.writeFieldEnd()
    if self.qqpay_ratio is not None:
      oprot.writeFieldBegin('qqpay_ratio', TType.DOUBLE, 13)
      oprot.writeDouble(self.qqpay_ratio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.groupid)
    value = (value * 31) ^ hash(self.debit_ratio)
    value = (value * 31) ^ hash(self.credit_ratio)
    value = (value * 31) ^ hash(self.debit_maxfee)
    value = (value * 31) ^ hash(self.credit_maxfee)
    value = (value * 31) ^ hash(self.tenpay_ratio)
    value = (value * 31) ^ hash(self.alipay_ratio)
    value = (value * 31) ^ hash(self.tenpay_maxfee)
    value = (value * 31) ^ hash(self.alipay_maxfee)
    value = (value * 31) ^ hash(self.jdpay_ratio)
    value = (value * 31) ^ hash(self.qqpay_ratio)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountPeriodRet:
  """
  Attributes:
   - start_date
   - end_date
   - settle_date
   - search_date
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'start_date', None, None, ), # 1
    (2, TType.STRING, 'end_date', None, None, ), # 2
    (3, TType.STRING, 'settle_date', None, None, ), # 3
    (4, TType.STRING, 'search_date', None, None, ), # 4
  )

  def __init__(self, start_date=None, end_date=None, settle_date=None, search_date=None,):
    self.start_date = start_date
    self.end_date = end_date
    self.settle_date = settle_date
    self.search_date = search_date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.settle_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.search_date = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountPeriodRet')
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 1)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 2)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.settle_date is not None:
      oprot.writeFieldBegin('settle_date', TType.STRING, 3)
      oprot.writeString(self.settle_date)
      oprot.writeFieldEnd()
    if self.search_date is not None:
      oprot.writeFieldBegin('search_date', TType.STRING, 4)
      oprot.writeString(self.search_date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.settle_date)
    value = (value * 31) ^ hash(self.search_date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskDelayRet:
  """
  Attributes:
   - no
   - count
   - status
   - delayid
   - userid
   - delay_level
   - category
   - risk_flag
   - trade_date
   - clear_date
   - appsrc
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'no', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
    (3, TType.I16, 'status', None, None, ), # 3
    (4, TType.I32, 'delayid', None, None, ), # 4
    (5, TType.I64, 'userid', None, None, ), # 5
    (6, TType.I16, 'delay_level', None, None, ), # 6
    (7, TType.I16, 'category', None, None, ), # 7
    (8, TType.STRING, 'risk_flag', None, None, ), # 8
    (9, TType.STRING, 'trade_date', None, None, ), # 9
    (10, TType.STRING, 'clear_date', None, None, ), # 10
    (11, TType.STRING, 'appsrc', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
  )

  def __init__(self, no=None, count=None, status=None, delayid=None, userid=None, delay_level=None, category=None, risk_flag=None, trade_date=None, clear_date=None, appsrc=None, memo=None,):
    self.no = no
    self.count = count
    self.status = status
    self.delayid = delayid
    self.userid = userid
    self.delay_level = delay_level
    self.category = category
    self.risk_flag = risk_flag
    self.trade_date = trade_date
    self.clear_date = clear_date
    self.appsrc = appsrc
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.no = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.delayid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.delay_level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.category = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.risk_flag = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.trade_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.clear_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskDelayRet')
    if self.no is not None:
      oprot.writeFieldBegin('no', TType.I32, 1)
      oprot.writeI32(self.no)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.delayid is not None:
      oprot.writeFieldBegin('delayid', TType.I32, 4)
      oprot.writeI32(self.delayid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 5)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.delay_level is not None:
      oprot.writeFieldBegin('delay_level', TType.I16, 6)
      oprot.writeI16(self.delay_level)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I16, 7)
      oprot.writeI16(self.category)
      oprot.writeFieldEnd()
    if self.risk_flag is not None:
      oprot.writeFieldBegin('risk_flag', TType.STRING, 8)
      oprot.writeString(self.risk_flag)
      oprot.writeFieldEnd()
    if self.trade_date is not None:
      oprot.writeFieldBegin('trade_date', TType.STRING, 9)
      oprot.writeString(self.trade_date)
      oprot.writeFieldEnd()
    if self.clear_date is not None:
      oprot.writeFieldBegin('clear_date', TType.STRING, 10)
      oprot.writeString(self.clear_date)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 11)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.no)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.delayid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.delay_level)
    value = (value * 31) ^ hash(self.category)
    value = (value * 31) ^ hash(self.risk_flag)
    value = (value * 31) ^ hash(self.trade_date)
    value = (value * 31) ^ hash(self.clear_date)
    value = (value * 31) ^ hash(self.appsrc)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskDelayQuery:
  """
  Attributes:
   - page
   - maxnum
   - delay_level
   - appsrc
   - delayid
   - userid
   - category
   - risk_flag
   - trade_date_start
   - trade_date_end
   - clear_date_start
   - clear_date_end
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page', None, 0, ), # 1
    (2, TType.I32, 'maxnum', None, 100, ), # 2
    (3, TType.I16, 'delay_level', None, None, ), # 3
    (4, TType.STRING, 'appsrc', None, None, ), # 4
    (5, TType.I32, 'delayid', None, None, ), # 5
    (6, TType.I64, 'userid', None, None, ), # 6
    (7, TType.I16, 'category', None, None, ), # 7
    (8, TType.STRING, 'risk_flag', None, None, ), # 8
    (9, TType.STRING, 'trade_date_start', None, None, ), # 9
    (10, TType.STRING, 'trade_date_end', None, None, ), # 10
    (11, TType.STRING, 'clear_date_start', None, None, ), # 11
    (12, TType.STRING, 'clear_date_end', None, None, ), # 12
  )

  def __init__(self, page=thrift_spec[1][4], maxnum=thrift_spec[2][4], delay_level=None, appsrc=None, delayid=None, userid=None, category=None, risk_flag=None, trade_date_start=None, trade_date_end=None, clear_date_start=None, clear_date_end=None,):
    self.page = page
    self.maxnum = maxnum
    self.delay_level = delay_level
    self.appsrc = appsrc
    self.delayid = delayid
    self.userid = userid
    self.category = category
    self.risk_flag = risk_flag
    self.trade_date_start = trade_date_start
    self.trade_date_end = trade_date_end
    self.clear_date_start = clear_date_start
    self.clear_date_end = clear_date_end

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.delay_level = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.delayid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.category = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.risk_flag = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.trade_date_start = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.trade_date_end = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.clear_date_start = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.clear_date_end = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskDelayQuery')
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 1)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 2)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.delay_level is not None:
      oprot.writeFieldBegin('delay_level', TType.I16, 3)
      oprot.writeI16(self.delay_level)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 4)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    if self.delayid is not None:
      oprot.writeFieldBegin('delayid', TType.I32, 5)
      oprot.writeI32(self.delayid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 6)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.I16, 7)
      oprot.writeI16(self.category)
      oprot.writeFieldEnd()
    if self.risk_flag is not None:
      oprot.writeFieldBegin('risk_flag', TType.STRING, 8)
      oprot.writeString(self.risk_flag)
      oprot.writeFieldEnd()
    if self.trade_date_start is not None:
      oprot.writeFieldBegin('trade_date_start', TType.STRING, 9)
      oprot.writeString(self.trade_date_start)
      oprot.writeFieldEnd()
    if self.trade_date_end is not None:
      oprot.writeFieldBegin('trade_date_end', TType.STRING, 10)
      oprot.writeString(self.trade_date_end)
      oprot.writeFieldEnd()
    if self.clear_date_start is not None:
      oprot.writeFieldBegin('clear_date_start', TType.STRING, 11)
      oprot.writeString(self.clear_date_start)
      oprot.writeFieldEnd()
    if self.clear_date_end is not None:
      oprot.writeFieldBegin('clear_date_end', TType.STRING, 12)
      oprot.writeString(self.clear_date_end)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    if self.delay_level is None:
      raise TProtocol.TProtocolException(message='Required field delay_level is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.delay_level)
    value = (value * 31) ^ hash(self.appsrc)
    value = (value * 31) ^ hash(self.delayid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.category)
    value = (value * 31) ^ hash(self.risk_flag)
    value = (value * 31) ^ hash(self.trade_date_start)
    value = (value * 31) ^ hash(self.trade_date_end)
    value = (value * 31) ^ hash(self.clear_date_start)
    value = (value * 31) ^ hash(self.clear_date_end)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithDrawalAmtRet:
  """
  Attributes:
   - ongoing_amt
   - available_amt
   - withdrawled_amt
   - return_amt
   - risk_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'ongoing_amt', None, None, ), # 1
    (2, TType.I64, 'available_amt', None, None, ), # 2
    (3, TType.I64, 'withdrawled_amt', None, None, ), # 3
    (4, TType.I64, 'return_amt', None, None, ), # 4
    (5, TType.I64, 'risk_amt', None, None, ), # 5
  )

  def __init__(self, ongoing_amt=None, available_amt=None, withdrawled_amt=None, return_amt=None, risk_amt=None,):
    self.ongoing_amt = ongoing_amt
    self.available_amt = available_amt
    self.withdrawled_amt = withdrawled_amt
    self.return_amt = return_amt
    self.risk_amt = risk_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.ongoing_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.available_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.withdrawled_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.return_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.risk_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithDrawalAmtRet')
    if self.ongoing_amt is not None:
      oprot.writeFieldBegin('ongoing_amt', TType.I64, 1)
      oprot.writeI64(self.ongoing_amt)
      oprot.writeFieldEnd()
    if self.available_amt is not None:
      oprot.writeFieldBegin('available_amt', TType.I64, 2)
      oprot.writeI64(self.available_amt)
      oprot.writeFieldEnd()
    if self.withdrawled_amt is not None:
      oprot.writeFieldBegin('withdrawled_amt', TType.I64, 3)
      oprot.writeI64(self.withdrawled_amt)
      oprot.writeFieldEnd()
    if self.return_amt is not None:
      oprot.writeFieldBegin('return_amt', TType.I64, 4)
      oprot.writeI64(self.return_amt)
      oprot.writeFieldEnd()
    if self.risk_amt is not None:
      oprot.writeFieldBegin('risk_amt', TType.I64, 5)
      oprot.writeI64(self.risk_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ongoing_amt)
    value = (value * 31) ^ hash(self.available_amt)
    value = (value * 31) ^ hash(self.withdrawled_amt)
    value = (value * 31) ^ hash(self.return_amt)
    value = (value * 31) ^ hash(self.risk_amt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithDrawalInfoRet:
  """
  Attributes:
   - payamt
   - fee
   - status
   - paytime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'payamt', None, None, ), # 1
    (2, TType.I64, 'fee', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'paytime', None, None, ), # 4
  )

  def __init__(self, payamt=None, fee=None, status=None, paytime=None,):
    self.payamt = payamt
    self.fee = fee
    self.status = status
    self.paytime = paytime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paytime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithDrawalInfoRet')
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 1)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 2)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.paytime is not None:
      oprot.writeFieldBegin('paytime', TType.STRING, 4)
      oprot.writeString(self.paytime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.fee)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.paytime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithholdRule:
  """
  Attributes:
   - id
   - title
   - desc
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.STRING, 'desc', None, None, ), # 3
    (4, TType.STRING, 'memo', None, None, ), # 4
  )

  def __init__(self, id=None, title=None, desc=None, memo=None,):
    self.id = id
    self.title = title
    self.desc = desc
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.desc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithholdRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 3)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 4)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.desc)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithholdHistory:
  """
  Attributes:
   - id
   - userid
   - user_withhold_id
   - amount
   - op_token
   - evidence_date
   - withhold_time
   - operatorid
   - memo
   - appsrc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'user_withhold_id', None, None, ), # 3
    (4, TType.I32, 'amount', None, None, ), # 4
    (5, TType.STRING, 'op_token', None, None, ), # 5
    (6, TType.STRING, 'evidence_date', None, None, ), # 6
    (7, TType.STRING, 'withhold_time', None, None, ), # 7
    (8, TType.I32, 'operatorid', None, None, ), # 8
    (9, TType.STRING, 'memo', None, None, ), # 9
    (10, TType.STRING, 'appsrc', None, None, ), # 10
  )

  def __init__(self, id=None, userid=None, user_withhold_id=None, amount=None, op_token=None, evidence_date=None, withhold_time=None, operatorid=None, memo=None, appsrc=None,):
    self.id = id
    self.userid = userid
    self.user_withhold_id = user_withhold_id
    self.amount = amount
    self.op_token = op_token
    self.evidence_date = evidence_date
    self.withhold_time = withhold_time
    self.operatorid = operatorid
    self.memo = memo
    self.appsrc = appsrc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.user_withhold_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.op_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.evidence_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.withhold_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.operatorid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithholdHistory')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.user_withhold_id is not None:
      oprot.writeFieldBegin('user_withhold_id', TType.I32, 3)
      oprot.writeI32(self.user_withhold_id)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 4)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 5)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.evidence_date is not None:
      oprot.writeFieldBegin('evidence_date', TType.STRING, 6)
      oprot.writeString(self.evidence_date)
      oprot.writeFieldEnd()
    if self.withhold_time is not None:
      oprot.writeFieldBegin('withhold_time', TType.STRING, 7)
      oprot.writeString(self.withhold_time)
      oprot.writeFieldEnd()
    if self.operatorid is not None:
      oprot.writeFieldBegin('operatorid', TType.I32, 8)
      oprot.writeI32(self.operatorid)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 9)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 10)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.user_withhold_id)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.op_token)
    value = (value * 31) ^ hash(self.evidence_date)
    value = (value * 31) ^ hash(self.withhold_time)
    value = (value * 31) ^ hash(self.operatorid)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.appsrc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithholdHistorySummary:
  """
  Attributes:
   - userid
   - title
   - amount
   - withhold_time
   - op_token
   - evidence_date
   - appsrc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.I32, 'amount', None, None, ), # 3
    (4, TType.STRING, 'withhold_time', None, None, ), # 4
    (5, TType.STRING, 'op_token', None, None, ), # 5
    (6, TType.STRING, 'evidence_date', None, None, ), # 6
    (7, TType.STRING, 'appsrc', None, None, ), # 7
  )

  def __init__(self, userid=None, title=None, amount=None, withhold_time=None, op_token=None, evidence_date=None, appsrc=None,):
    self.userid = userid
    self.title = title
    self.amount = amount
    self.withhold_time = withhold_time
    self.op_token = op_token
    self.evidence_date = evidence_date
    self.appsrc = appsrc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.withhold_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.op_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.evidence_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithholdHistorySummary')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 3)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.withhold_time is not None:
      oprot.writeFieldBegin('withhold_time', TType.STRING, 4)
      oprot.writeString(self.withhold_time)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 5)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.evidence_date is not None:
      oprot.writeFieldBegin('evidence_date', TType.STRING, 6)
      oprot.writeString(self.evidence_date)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 7)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.withhold_time)
    value = (value * 31) ^ hash(self.op_token)
    value = (value * 31) ^ hash(self.evidence_date)
    value = (value * 31) ^ hash(self.appsrc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApplyRecharge:
  """
  Attributes:
   - id
   - out_userid
   - apply_status
   - recharge_money
   - gogal_account
   - create_time
   - apply_memo
   - admin_id
   - admin_memo
   - admin_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'out_userid', None, None, ), # 2
    (3, TType.I32, 'apply_status', None, None, ), # 3
    (4, TType.I64, 'recharge_money', None, None, ), # 4
    (5, TType.STRING, 'gogal_account', None, None, ), # 5
    (6, TType.STRING, 'create_time', None, None, ), # 6
    (7, TType.STRING, 'apply_memo', None, None, ), # 7
    (8, TType.STRING, 'admin_id', None, None, ), # 8
    (9, TType.STRING, 'admin_memo', None, None, ), # 9
    (10, TType.STRING, 'admin_time', None, None, ), # 10
  )

  def __init__(self, id=None, out_userid=None, apply_status=None, recharge_money=None, gogal_account=None, create_time=None, apply_memo=None, admin_id=None, admin_memo=None, admin_time=None,):
    self.id = id
    self.out_userid = out_userid
    self.apply_status = apply_status
    self.recharge_money = recharge_money
    self.gogal_account = gogal_account
    self.create_time = create_time
    self.apply_memo = apply_memo
    self.admin_id = admin_id
    self.admin_memo = admin_memo
    self.admin_time = admin_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.apply_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.recharge_money = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.gogal_account = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.apply_memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.admin_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.admin_memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.admin_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApplyRecharge')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 2)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.apply_status is not None:
      oprot.writeFieldBegin('apply_status', TType.I32, 3)
      oprot.writeI32(self.apply_status)
      oprot.writeFieldEnd()
    if self.recharge_money is not None:
      oprot.writeFieldBegin('recharge_money', TType.I64, 4)
      oprot.writeI64(self.recharge_money)
      oprot.writeFieldEnd()
    if self.gogal_account is not None:
      oprot.writeFieldBegin('gogal_account', TType.STRING, 5)
      oprot.writeString(self.gogal_account)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 6)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.apply_memo is not None:
      oprot.writeFieldBegin('apply_memo', TType.STRING, 7)
      oprot.writeString(self.apply_memo)
      oprot.writeFieldEnd()
    if self.admin_id is not None:
      oprot.writeFieldBegin('admin_id', TType.STRING, 8)
      oprot.writeString(self.admin_id)
      oprot.writeFieldEnd()
    if self.admin_memo is not None:
      oprot.writeFieldBegin('admin_memo', TType.STRING, 9)
      oprot.writeString(self.admin_memo)
      oprot.writeFieldEnd()
    if self.admin_time is not None:
      oprot.writeFieldBegin('admin_time', TType.STRING, 10)
      oprot.writeString(self.admin_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.apply_status)
    value = (value * 31) ^ hash(self.recharge_money)
    value = (value * 31) ^ hash(self.gogal_account)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.apply_memo)
    value = (value * 31) ^ hash(self.admin_id)
    value = (value * 31) ^ hash(self.admin_memo)
    value = (value * 31) ^ hash(self.admin_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApplyRechargeQuery:
  """
  Attributes:
   - out_userid
   - page
   - maxnum
   - start_time
   - end_time
   - apply_status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.I32, 'page', None, None, ), # 2
    (3, TType.I32, 'maxnum', None, None, ), # 3
    (4, TType.STRING, 'start_time', None, None, ), # 4
    (5, TType.STRING, 'end_time', None, None, ), # 5
    (6, TType.I32, 'apply_status', None, None, ), # 6
  )

  def __init__(self, out_userid=None, page=None, maxnum=None, start_time=None, end_time=None, apply_status=None,):
    self.out_userid = out_userid
    self.page = page
    self.maxnum = maxnum
    self.start_time = start_time
    self.end_time = end_time
    self.apply_status = apply_status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.apply_status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApplyRechargeQuery')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 3)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 4)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 5)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.apply_status is not None:
      oprot.writeFieldBegin('apply_status', TType.I32, 6)
      oprot.writeI32(self.apply_status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_userid is None:
      raise TProtocol.TProtocolException(message='Required field out_userid is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    if self.maxnum is None:
      raise TProtocol.TProtocolException(message='Required field maxnum is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.apply_status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApplyRechargeRet:
  """
  Attributes:
   - page
   - maxnum
   - count
   - apply_recharge_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page', None, None, ), # 1
    (2, TType.I32, 'maxnum', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
    (4, TType.LIST, 'apply_recharge_list', (TType.STRUCT,(ApplyRecharge, ApplyRecharge.thrift_spec)), None, ), # 4
  )

  def __init__(self, page=None, maxnum=None, count=None, apply_recharge_list=None,):
    self.page = page
    self.maxnum = maxnum
    self.count = count
    self.apply_recharge_list = apply_recharge_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.apply_recharge_list = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = ApplyRecharge()
            _elem68.read(iprot)
            self.apply_recharge_list.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApplyRechargeRet')
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 1)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 2)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.apply_recharge_list is not None:
      oprot.writeFieldBegin('apply_recharge_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.apply_recharge_list))
      for iter69 in self.apply_recharge_list:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.apply_recharge_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserWithhold:
  """
  Attributes:
   - id
   - title
   - userid
   - amount
   - withhold_type
   - enable
   - opentype
   - start_date
   - end_date
   - memo
   - appsrc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.I64, 'userid', None, None, ), # 3
    (4, TType.I32, 'amount', None, None, ), # 4
    (5, TType.I16, 'withhold_type', None, None, ), # 5
    (6, TType.BOOL, 'enable', None, None, ), # 6
    (7, TType.I16, 'opentype', None, None, ), # 7
    (8, TType.STRING, 'start_date', None, None, ), # 8
    (9, TType.STRING, 'end_date', None, None, ), # 9
    (10, TType.STRING, 'memo', None, None, ), # 10
    (11, TType.STRING, 'appsrc', None, None, ), # 11
  )

  def __init__(self, id=None, title=None, userid=None, amount=None, withhold_type=None, enable=None, opentype=None, start_date=None, end_date=None, memo=None, appsrc=None,):
    self.id = id
    self.title = title
    self.userid = userid
    self.amount = amount
    self.withhold_type = withhold_type
    self.enable = enable
    self.opentype = opentype
    self.start_date = start_date
    self.end_date = end_date
    self.memo = memo
    self.appsrc = appsrc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.withhold_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.enable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.opentype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.start_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.end_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserWithhold')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 3)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 4)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.withhold_type is not None:
      oprot.writeFieldBegin('withhold_type', TType.I16, 5)
      oprot.writeI16(self.withhold_type)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.BOOL, 6)
      oprot.writeBool(self.enable)
      oprot.writeFieldEnd()
    if self.opentype is not None:
      oprot.writeFieldBegin('opentype', TType.I16, 7)
      oprot.writeI16(self.opentype)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.STRING, 8)
      oprot.writeString(self.start_date)
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.STRING, 9)
      oprot.writeString(self.end_date)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 10)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 11)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.withhold_type)
    value = (value * 31) ^ hash(self.enable)
    value = (value * 31) ^ hash(self.opentype)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.appsrc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserWithholdRet:
  """
  Attributes:
   - count
   - user_withhold_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.LIST, 'user_withhold_list', (TType.STRUCT,(UserWithhold, UserWithhold.thrift_spec)), None, ), # 2
  )

  def __init__(self, count=None, user_withhold_list=None,):
    self.count = count
    self.user_withhold_list = user_withhold_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.user_withhold_list = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = UserWithhold()
            _elem75.read(iprot)
            self.user_withhold_list.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserWithholdRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.user_withhold_list is not None:
      oprot.writeFieldBegin('user_withhold_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.user_withhold_list))
      for iter76 in self.user_withhold_list:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.user_withhold_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserWithholdQuery:
  """
  Attributes:
   - page
   - maxnum
   - title
   - userid
   - amount
   - withhold_type
   - enable
   - opentype
   - start_date
   - end_date
   - appsrc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'page', None, 0, ), # 1
    (2, TType.I32, 'maxnum', None, 100, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I64, 'userid', None, None, ), # 4
    (5, TType.I32, 'amount', None, None, ), # 5
    (6, TType.I16, 'withhold_type', None, None, ), # 6
    (7, TType.BOOL, 'enable', None, None, ), # 7
    (8, TType.I16, 'opentype', None, None, ), # 8
    (9, TType.LIST, 'start_date', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'end_date', (TType.STRING,None), None, ), # 10
    (11, TType.STRING, 'appsrc', None, None, ), # 11
  )

  def __init__(self, page=thrift_spec[1][4], maxnum=thrift_spec[2][4], title=None, userid=None, amount=None, withhold_type=None, enable=None, opentype=None, start_date=None, end_date=None, appsrc=None,):
    self.page = page
    self.maxnum = maxnum
    self.title = title
    self.userid = userid
    self.amount = amount
    self.withhold_type = withhold_type
    self.enable = enable
    self.opentype = opentype
    self.start_date = start_date
    self.end_date = end_date
    self.appsrc = appsrc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.withhold_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.enable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.opentype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.start_date = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readString()
            self.start_date.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.end_date = []
          (_etype86, _size83) = iprot.readListBegin()
          for _i87 in xrange(_size83):
            _elem88 = iprot.readString()
            self.end_date.append(_elem88)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserWithholdQuery')
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 1)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 2)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 4)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 5)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.withhold_type is not None:
      oprot.writeFieldBegin('withhold_type', TType.I16, 6)
      oprot.writeI16(self.withhold_type)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.BOOL, 7)
      oprot.writeBool(self.enable)
      oprot.writeFieldEnd()
    if self.opentype is not None:
      oprot.writeFieldBegin('opentype', TType.I16, 8)
      oprot.writeI16(self.opentype)
      oprot.writeFieldEnd()
    if self.start_date is not None:
      oprot.writeFieldBegin('start_date', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.start_date))
      for iter89 in self.start_date:
        oprot.writeString(iter89)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.end_date is not None:
      oprot.writeFieldBegin('end_date', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.end_date))
      for iter90 in self.end_date:
        oprot.writeString(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 11)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.withhold_type)
    value = (value * 31) ^ hash(self.enable)
    value = (value * 31) ^ hash(self.opentype)
    value = (value * 31) ^ hash(self.start_date)
    value = (value * 31) ^ hash(self.end_date)
    value = (value * 31) ^ hash(self.appsrc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QtBankInfo:
  """
  Attributes:
   - userid
   - merchant_id
   - head_bank_name
   - bank_user
   - bank_account
   - bank_type
   - bank_name
   - branch_bank_code
   - bank_province
   - bank_city
   - is_reremit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'merchant_id', None, None, ), # 2
    (3, TType.STRING, 'head_bank_name', None, None, ), # 3
    (4, TType.STRING, 'bank_user', None, None, ), # 4
    (5, TType.STRING, 'bank_account', None, None, ), # 5
    (6, TType.I32, 'bank_type', None, None, ), # 6
    (7, TType.STRING, 'bank_name', None, None, ), # 7
    (8, TType.STRING, 'branch_bank_code', None, None, ), # 8
    (9, TType.STRING, 'bank_province', None, None, ), # 9
    (10, TType.STRING, 'bank_city', None, None, ), # 10
    (11, TType.I16, 'is_reremit', None, None, ), # 11
  )

  def __init__(self, userid=None, merchant_id=None, head_bank_name=None, bank_user=None, bank_account=None, bank_type=None, bank_name=None, branch_bank_code=None, bank_province=None, bank_city=None, is_reremit=None,):
    self.userid = userid
    self.merchant_id = merchant_id
    self.head_bank_name = head_bank_name
    self.bank_user = bank_user
    self.bank_account = bank_account
    self.bank_type = bank_type
    self.bank_name = bank_name
    self.branch_bank_code = branch_bank_code
    self.bank_province = bank_province
    self.bank_city = bank_city
    self.is_reremit = is_reremit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.merchant_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.head_bank_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bank_user = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bank_account = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.bank_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.branch_bank_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.is_reremit = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QtBankInfo')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.I64, 2)
      oprot.writeI64(self.merchant_id)
      oprot.writeFieldEnd()
    if self.head_bank_name is not None:
      oprot.writeFieldBegin('head_bank_name', TType.STRING, 3)
      oprot.writeString(self.head_bank_name)
      oprot.writeFieldEnd()
    if self.bank_user is not None:
      oprot.writeFieldBegin('bank_user', TType.STRING, 4)
      oprot.writeString(self.bank_user)
      oprot.writeFieldEnd()
    if self.bank_account is not None:
      oprot.writeFieldBegin('bank_account', TType.STRING, 5)
      oprot.writeString(self.bank_account)
      oprot.writeFieldEnd()
    if self.bank_type is not None:
      oprot.writeFieldBegin('bank_type', TType.I32, 6)
      oprot.writeI32(self.bank_type)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 7)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.branch_bank_code is not None:
      oprot.writeFieldBegin('branch_bank_code', TType.STRING, 8)
      oprot.writeString(self.branch_bank_code)
      oprot.writeFieldEnd()
    if self.bank_province is not None:
      oprot.writeFieldBegin('bank_province', TType.STRING, 9)
      oprot.writeString(self.bank_province)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 10)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.is_reremit is not None:
      oprot.writeFieldBegin('is_reremit', TType.I16, 11)
      oprot.writeI16(self.is_reremit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.head_bank_name is None:
      raise TProtocol.TProtocolException(message='Required field head_bank_name is unset!')
    if self.bank_user is None:
      raise TProtocol.TProtocolException(message='Required field bank_user is unset!')
    if self.bank_account is None:
      raise TProtocol.TProtocolException(message='Required field bank_account is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.merchant_id)
    value = (value * 31) ^ hash(self.head_bank_name)
    value = (value * 31) ^ hash(self.bank_user)
    value = (value * 31) ^ hash(self.bank_account)
    value = (value * 31) ^ hash(self.bank_type)
    value = (value * 31) ^ hash(self.bank_name)
    value = (value * 31) ^ hash(self.branch_bank_code)
    value = (value * 31) ^ hash(self.bank_province)
    value = (value * 31) ^ hash(self.bank_city)
    value = (value * 31) ^ hash(self.is_reremit)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QtBankInfoRet:
  """
  Attributes:
   - count
   - page
   - maxnum
   - bank_info_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.I32, 'page', None, 1, ), # 2
    (3, TType.I32, 'maxnum', None, 100, ), # 3
    (4, TType.LIST, 'bank_info_list', (TType.STRUCT,(QtBankInfo, QtBankInfo.thrift_spec)), None, ), # 4
  )

  def __init__(self, count=None, page=thrift_spec[2][4], maxnum=thrift_spec[3][4], bank_info_list=None,):
    self.count = count
    self.page = page
    self.maxnum = maxnum
    self.bank_info_list = bank_info_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.bank_info_list = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = QtBankInfo()
            _elem96.read(iprot)
            self.bank_info_list.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QtBankInfoRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 2)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 3)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    if self.bank_info_list is not None:
      oprot.writeFieldBegin('bank_info_list', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.bank_info_list))
      for iter97 in self.bank_info_list:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    value = (value * 31) ^ hash(self.bank_info_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillQuery:
  """
  Attributes:
   - out_userid
   - src
   - account_type
   - start_time
   - end_time
   - op_type
   - status
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'out_userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'account_type', None, None, ), # 3
    (4, TType.STRING, 'start_time', None, None, ), # 4
    (5, TType.STRING, 'end_time', None, None, ), # 5
    (6, TType.I16, 'op_type', None, None, ), # 6
    (7, TType.I16, 'status', None, None, ), # 7
    (8, TType.I32, 'page', None, None, ), # 8
    (9, TType.I64, 'maxnum', None, None, ), # 9
  )

  def __init__(self, out_userid=None, src=None, account_type=None, start_time=None, end_time=None, op_type=None, status=None, page=None, maxnum=None,):
    self.out_userid = out_userid
    self.src = src
    self.account_type = account_type
    self.start_time = start_time
    self.end_time = end_time
    self.op_type = op_type
    self.status = status
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.out_userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.account_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.op_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillQuery')
    if self.out_userid is not None:
      oprot.writeFieldBegin('out_userid', TType.STRING, 1)
      oprot.writeString(self.out_userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 3)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 4)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 5)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.I16, 6)
      oprot.writeI16(self.op_type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 7)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 8)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 9)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.out_userid is None:
      raise TProtocol.TProtocolException(message='Required field out_userid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.out_userid)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.account_type)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.op_type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillArgsV2:
  """
  Attributes:
   - userid
   - src
   - account_type
   - start_time
   - end_time
   - op_type
   - status
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.LIST, 'account_type', (TType.I32,None), None, ), # 3
    (4, TType.STRING, 'start_time', None, None, ), # 4
    (5, TType.STRING, 'end_time', None, None, ), # 5
    (6, TType.LIST, 'op_type', (TType.I16,None), None, ), # 6
    (7, TType.LIST, 'status', (TType.I16,None), None, ), # 7
    (8, TType.I32, 'page', None, None, ), # 8
    (9, TType.I64, 'maxnum', None, None, ), # 9
  )

  def __init__(self, userid=None, src=None, account_type=None, start_time=None, end_time=None, op_type=None, status=None, page=None, maxnum=None,):
    self.userid = userid
    self.src = src
    self.account_type = account_type
    self.start_time = start_time
    self.end_time = end_time
    self.op_type = op_type
    self.status = status
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.account_type = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readI32()
            self.account_type.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.op_type = []
          (_etype107, _size104) = iprot.readListBegin()
          for _i108 in xrange(_size104):
            _elem109 = iprot.readI16()
            self.op_type.append(_elem109)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.status = []
          (_etype113, _size110) = iprot.readListBegin()
          for _i114 in xrange(_size110):
            _elem115 = iprot.readI16()
            self.status.append(_elem115)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillArgsV2')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.account_type))
      for iter116 in self.account_type:
        oprot.writeI32(iter116)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 4)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 5)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.LIST, 6)
      oprot.writeListBegin(TType.I16, len(self.op_type))
      for iter117 in self.op_type:
        oprot.writeI16(iter117)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.status))
      for iter118 in self.status:
        oprot.writeI16(iter118)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 8)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 9)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.src)
    value = (value * 31) ^ hash(self.account_type)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.op_type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserBillItem:
  """
  Attributes:
   - change_amt
   - op_type
   - account_type
   - open_balance
   - close_balance
   - op_token
   - out_token
   - relate_op_token
   - status
   - other_side
   - product_name
   - biz_summary
   - note
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'change_amt', None, None, ), # 1
    (2, TType.I16, 'op_type', None, None, ), # 2
    (3, TType.I32, 'account_type', None, None, ), # 3
    (4, TType.I32, 'open_balance', None, None, ), # 4
    (5, TType.I32, 'close_balance', None, None, ), # 5
    (6, TType.STRING, 'op_token', None, None, ), # 6
    (7, TType.STRING, 'out_token', None, None, ), # 7
    (8, TType.STRING, 'relate_op_token', None, None, ), # 8
    (9, TType.I16, 'status', None, None, ), # 9
    (10, TType.STRING, 'other_side', None, None, ), # 10
    (11, TType.STRING, 'product_name', None, None, ), # 11
    (12, TType.STRING, 'biz_summary', None, None, ), # 12
    (13, TType.STRING, 'note', None, None, ), # 13
    (14, TType.STRING, 'create_time', None, None, ), # 14
  )

  def __init__(self, change_amt=None, op_type=None, account_type=None, open_balance=None, close_balance=None, op_token=None, out_token=None, relate_op_token=None, status=None, other_side=None, product_name=None, biz_summary=None, note=None, create_time=None,):
    self.change_amt = change_amt
    self.op_type = op_type
    self.account_type = account_type
    self.open_balance = open_balance
    self.close_balance = close_balance
    self.op_token = op_token
    self.out_token = out_token
    self.relate_op_token = relate_op_token
    self.status = status
    self.other_side = other_side
    self.product_name = product_name
    self.biz_summary = biz_summary
    self.note = note
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.change_amt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.op_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.account_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.open_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.close_balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.op_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.out_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.relate_op_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.other_side = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.product_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.biz_summary = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.note = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserBillItem')
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I32, 1)
      oprot.writeI32(self.change_amt)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.I16, 2)
      oprot.writeI16(self.op_type)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 3)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.open_balance is not None:
      oprot.writeFieldBegin('open_balance', TType.I32, 4)
      oprot.writeI32(self.open_balance)
      oprot.writeFieldEnd()
    if self.close_balance is not None:
      oprot.writeFieldBegin('close_balance', TType.I32, 5)
      oprot.writeI32(self.close_balance)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 6)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.out_token is not None:
      oprot.writeFieldBegin('out_token', TType.STRING, 7)
      oprot.writeString(self.out_token)
      oprot.writeFieldEnd()
    if self.relate_op_token is not None:
      oprot.writeFieldBegin('relate_op_token', TType.STRING, 8)
      oprot.writeString(self.relate_op_token)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 9)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.other_side is not None:
      oprot.writeFieldBegin('other_side', TType.STRING, 10)
      oprot.writeString(self.other_side)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 11)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.biz_summary is not None:
      oprot.writeFieldBegin('biz_summary', TType.STRING, 12)
      oprot.writeString(self.biz_summary)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 13)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 14)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.change_amt)
    value = (value * 31) ^ hash(self.op_type)
    value = (value * 31) ^ hash(self.account_type)
    value = (value * 31) ^ hash(self.open_balance)
    value = (value * 31) ^ hash(self.close_balance)
    value = (value * 31) ^ hash(self.op_token)
    value = (value * 31) ^ hash(self.out_token)
    value = (value * 31) ^ hash(self.relate_op_token)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.other_side)
    value = (value * 31) ^ hash(self.product_name)
    value = (value * 31) ^ hash(self.biz_summary)
    value = (value * 31) ^ hash(self.note)
    value = (value * 31) ^ hash(self.create_time)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserBillRet:
  """
  Attributes:
   - total_count
   - bill_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_count', None, None, ), # 1
    (2, TType.LIST, 'bill_list', (TType.STRUCT,(UserBillItem, UserBillItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, total_count=None, bill_list=None,):
    self.total_count = total_count
    self.bill_list = bill_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.bill_list = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = UserBillItem()
            _elem124.read(iprot)
            self.bill_list.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserBillRet')
    if self.total_count is not None:
      oprot.writeFieldBegin('total_count', TType.I64, 1)
      oprot.writeI64(self.total_count)
      oprot.writeFieldEnd()
    if self.bill_list is not None:
      oprot.writeFieldBegin('bill_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.bill_list))
      for iter125 in self.bill_list:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_count)
    value = (value * 31) ^ hash(self.bill_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccounttradeArgs:
  """
  Attributes:
   - userid
   - settletype
   - starttime
   - endtime
   - settleflag
   - equalflag
   - userids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.I16, 'settletype', None, None, ), # 2
    (3, TType.STRING, 'starttime', None, None, ), # 3
    (4, TType.STRING, 'endtime', None, None, ), # 4
    (5, TType.I16, 'settleflag', None, 3, ), # 5
    (6, TType.I16, 'equalflag', None, 1, ), # 6
    (7, TType.LIST, 'userids', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, userid=None, settletype=None, starttime=None, endtime=None, settleflag=thrift_spec[5][4], equalflag=thrift_spec[6][4], userids=None,):
    self.userid = userid
    self.settletype = settletype
    self.starttime = starttime
    self.endtime = endtime
    self.settleflag = settleflag
    self.equalflag = equalflag
    self.userids = userids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.settletype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.starttime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.endtime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.settleflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.equalflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.userids = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = iprot.readString()
            self.userids.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccounttradeArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.settletype is not None:
      oprot.writeFieldBegin('settletype', TType.I16, 2)
      oprot.writeI16(self.settletype)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.STRING, 3)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.STRING, 4)
      oprot.writeString(self.endtime)
      oprot.writeFieldEnd()
    if self.settleflag is not None:
      oprot.writeFieldBegin('settleflag', TType.I16, 5)
      oprot.writeI16(self.settleflag)
      oprot.writeFieldEnd()
    if self.equalflag is not None:
      oprot.writeFieldBegin('equalflag', TType.I16, 6)
      oprot.writeI16(self.equalflag)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.userids))
      for iter132 in self.userids:
        oprot.writeString(iter132)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.settletype)
    value = (value * 31) ^ hash(self.starttime)
    value = (value * 31) ^ hash(self.endtime)
    value = (value * 31) ^ hash(self.settleflag)
    value = (value * 31) ^ hash(self.equalflag)
    value = (value * 31) ^ hash(self.userids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountRecord:
  """
  Attributes:
   - userid
   - settletype
   - settleflag
   - equalflag
   - syssn
   - orderno
   - busicd
   - tradenum
   - settleamt
   - qffee
   - tradedtm
   - qfstldate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.I16, 'settletype', None, None, ), # 2
    (3, TType.I16, 'settleflag', None, None, ), # 3
    (4, TType.I16, 'equalflag', None, None, ), # 4
    (5, TType.STRING, 'syssn', None, None, ), # 5
    (6, TType.STRING, 'orderno', None, None, ), # 6
    (7, TType.STRING, 'busicd', None, None, ), # 7
    (8, TType.I64, 'tradenum', None, None, ), # 8
    (9, TType.I64, 'settleamt', None, None, ), # 9
    (10, TType.I64, 'qffee', None, None, ), # 10
    (11, TType.STRING, 'tradedtm', None, None, ), # 11
    (12, TType.STRING, 'qfstldate', None, None, ), # 12
  )

  def __init__(self, userid=None, settletype=None, settleflag=None, equalflag=None, syssn=None, orderno=None, busicd=None, tradenum=None, settleamt=None, qffee=None, tradedtm=None, qfstldate=None,):
    self.userid = userid
    self.settletype = settletype
    self.settleflag = settleflag
    self.equalflag = equalflag
    self.syssn = syssn
    self.orderno = orderno
    self.busicd = busicd
    self.tradenum = tradenum
    self.settleamt = settleamt
    self.qffee = qffee
    self.tradedtm = tradedtm
    self.qfstldate = qfstldate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.settletype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.settleflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.equalflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.orderno = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.busicd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.tradenum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.settleamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.qffee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.tradedtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.qfstldate = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.settletype is not None:
      oprot.writeFieldBegin('settletype', TType.I16, 2)
      oprot.writeI16(self.settletype)
      oprot.writeFieldEnd()
    if self.settleflag is not None:
      oprot.writeFieldBegin('settleflag', TType.I16, 3)
      oprot.writeI16(self.settleflag)
      oprot.writeFieldEnd()
    if self.equalflag is not None:
      oprot.writeFieldBegin('equalflag', TType.I16, 4)
      oprot.writeI16(self.equalflag)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 5)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.orderno is not None:
      oprot.writeFieldBegin('orderno', TType.STRING, 6)
      oprot.writeString(self.orderno)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 7)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.tradenum is not None:
      oprot.writeFieldBegin('tradenum', TType.I64, 8)
      oprot.writeI64(self.tradenum)
      oprot.writeFieldEnd()
    if self.settleamt is not None:
      oprot.writeFieldBegin('settleamt', TType.I64, 9)
      oprot.writeI64(self.settleamt)
      oprot.writeFieldEnd()
    if self.qffee is not None:
      oprot.writeFieldBegin('qffee', TType.I64, 10)
      oprot.writeI64(self.qffee)
      oprot.writeFieldEnd()
    if self.tradedtm is not None:
      oprot.writeFieldBegin('tradedtm', TType.STRING, 11)
      oprot.writeString(self.tradedtm)
      oprot.writeFieldEnd()
    if self.qfstldate is not None:
      oprot.writeFieldBegin('qfstldate', TType.STRING, 12)
      oprot.writeString(self.qfstldate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.settletype)
    value = (value * 31) ^ hash(self.settleflag)
    value = (value * 31) ^ hash(self.equalflag)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.orderno)
    value = (value * 31) ^ hash(self.busicd)
    value = (value * 31) ^ hash(self.tradenum)
    value = (value * 31) ^ hash(self.settleamt)
    value = (value * 31) ^ hash(self.qffee)
    value = (value * 31) ^ hash(self.tradedtm)
    value = (value * 31) ^ hash(self.qfstldate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerException(TException):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.error_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
