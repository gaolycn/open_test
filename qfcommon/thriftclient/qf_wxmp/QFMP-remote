#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from qf_wxmp import QFMP
from qf_wxmp.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i64 ping()')
  print('   mp_query(i32 userid)')
  print('  WXToken access_token(string appid)')
  print('   gen_forever_qr(string appid,  params)')
  print('  i16 mp_auth_bind(MPAuthBind req_args)')
  print('  WXCustomer openid2customer(string appid, string openid)')
  print('  i32 customer_active(string appid, string openid)')
  print('  i32 msg_send(KFMsg msg)')
  print('  string card_ext(string appid, string cardid, string code)')
  print('  i32 push_media(MPush req_args)')
  print('  i32 push_txt(MPushTxt req_args)')
  print('   push_stat(string appid,  pushids)')
  print('  i16 menu_create(string appid,  mp_menu)')
  print('   menu_query(string appid)')
  print('  i64 reply_save(Reply req_args)')
  print('  ReplyQueryResp reply_query(ReplyQuery req_args)')
  print('  i16 template_send(TemplateSend req_args)')
  print('  string realname_event(MPEvent req_args)')
  print('  string auth_event(MPEvent req_args)')
  print('  string mp_auth_event(string data)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QFMP.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'mp_query':
  if len(args) != 1:
    print('mp_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.mp_query(eval(args[0]),))

elif cmd == 'access_token':
  if len(args) != 1:
    print('access_token requires 1 args')
    sys.exit(1)
  pp.pprint(client.access_token(args[0],))

elif cmd == 'gen_forever_qr':
  if len(args) != 2:
    print('gen_forever_qr requires 2 args')
    sys.exit(1)
  pp.pprint(client.gen_forever_qr(args[0],eval(args[1]),))

elif cmd == 'mp_auth_bind':
  if len(args) != 1:
    print('mp_auth_bind requires 1 args')
    sys.exit(1)
  pp.pprint(client.mp_auth_bind(eval(args[0]),))

elif cmd == 'openid2customer':
  if len(args) != 2:
    print('openid2customer requires 2 args')
    sys.exit(1)
  pp.pprint(client.openid2customer(args[0],args[1],))

elif cmd == 'customer_active':
  if len(args) != 2:
    print('customer_active requires 2 args')
    sys.exit(1)
  pp.pprint(client.customer_active(args[0],args[1],))

elif cmd == 'msg_send':
  if len(args) != 1:
    print('msg_send requires 1 args')
    sys.exit(1)
  pp.pprint(client.msg_send(eval(args[0]),))

elif cmd == 'card_ext':
  if len(args) != 3:
    print('card_ext requires 3 args')
    sys.exit(1)
  pp.pprint(client.card_ext(args[0],args[1],args[2],))

elif cmd == 'push_media':
  if len(args) != 1:
    print('push_media requires 1 args')
    sys.exit(1)
  pp.pprint(client.push_media(eval(args[0]),))

elif cmd == 'push_txt':
  if len(args) != 1:
    print('push_txt requires 1 args')
    sys.exit(1)
  pp.pprint(client.push_txt(eval(args[0]),))

elif cmd == 'push_stat':
  if len(args) != 2:
    print('push_stat requires 2 args')
    sys.exit(1)
  pp.pprint(client.push_stat(args[0],eval(args[1]),))

elif cmd == 'menu_create':
  if len(args) != 2:
    print('menu_create requires 2 args')
    sys.exit(1)
  pp.pprint(client.menu_create(args[0],eval(args[1]),))

elif cmd == 'menu_query':
  if len(args) != 1:
    print('menu_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.menu_query(args[0],))

elif cmd == 'reply_save':
  if len(args) != 1:
    print('reply_save requires 1 args')
    sys.exit(1)
  pp.pprint(client.reply_save(eval(args[0]),))

elif cmd == 'reply_query':
  if len(args) != 1:
    print('reply_query requires 1 args')
    sys.exit(1)
  pp.pprint(client.reply_query(eval(args[0]),))

elif cmd == 'template_send':
  if len(args) != 1:
    print('template_send requires 1 args')
    sys.exit(1)
  pp.pprint(client.template_send(eval(args[0]),))

elif cmd == 'realname_event':
  if len(args) != 1:
    print('realname_event requires 1 args')
    sys.exit(1)
  pp.pprint(client.realname_event(eval(args[0]),))

elif cmd == 'auth_event':
  if len(args) != 1:
    print('auth_event requires 1 args')
    sys.exit(1)
  pp.pprint(client.auth_event(eval(args[0]),))

elif cmd == 'mp_auth_event':
  if len(args) != 1:
    print('mp_auth_event requires 1 args')
    sys.exit(1)
  pp.pprint(client.mp_auth_event(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
