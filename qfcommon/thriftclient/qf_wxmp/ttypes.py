#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class KFMsgType:
  TEXT = 1
  IMAGE = 2
  VOICE = 3
  VIDEO = 4
  MUSIC = 5
  NEWS_LINK = 6
  NEWS_ID = 7
  WXCARD = 8

  _VALUES_TO_NAMES = {
    1: "TEXT",
    2: "IMAGE",
    3: "VOICE",
    4: "VIDEO",
    5: "MUSIC",
    6: "NEWS_LINK",
    7: "NEWS_ID",
    8: "WXCARD",
  }

  _NAMES_TO_VALUES = {
    "TEXT": 1,
    "IMAGE": 2,
    "VOICE": 3,
    "VIDEO": 4,
    "MUSIC": 5,
    "NEWS_LINK": 6,
    "NEWS_ID": 7,
    "WXCARD": 8,
  }

class PushType:
  IDS = 1
  GROUP = 2
  ALL = 3

  _VALUES_TO_NAMES = {
    1: "IDS",
    2: "GROUP",
    3: "ALL",
  }

  _NAMES_TO_VALUES = {
    "IDS": 1,
    "GROUP": 2,
    "ALL": 3,
  }

class PushMediaType:
  MPNEWS = 1
  VOICE = 2
  IMAGE = 3
  MPVIDEO = 4

  _VALUES_TO_NAMES = {
    1: "MPNEWS",
    2: "VOICE",
    3: "IMAGE",
    4: "MPVIDEO",
  }

  _NAMES_TO_VALUES = {
    "MPNEWS": 1,
    "VOICE": 2,
    "IMAGE": 3,
    "MPVIDEO": 4,
  }

class MenuEvent:
  CLICK = 1
  VIEW = 2

  _VALUES_TO_NAMES = {
    1: "CLICK",
    2: "VIEW",
  }

  _NAMES_TO_VALUES = {
    "CLICK": 1,
    "VIEW": 2,
  }

class ReplyType:
  TEXT = 1
  NEWS = 2

  _VALUES_TO_NAMES = {
    1: "TEXT",
    2: "NEWS",
  }

  _NAMES_TO_VALUES = {
    "TEXT": 1,
    "NEWS": 2,
  }


class MPError(TException):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageQuery:
  """
  Attributes:
   - num
   - size
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'num', None, 1, ), # 1
    (2, TType.I32, 'size', None, 20, ), # 2
  )

  def __init__(self, num=thrift_spec[1][4], size=thrift_spec[2][4],):
    self.num = num
    self.size = size

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.size = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageQuery')
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 1)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 2)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.num is None:
      raise TProtocol.TProtocolException(message='Required field num is unset!')
    if self.size is None:
      raise TProtocol.TProtocolException(message='Required field size is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.size)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageQueryResp:
  """
  Attributes:
   - num
   - size
   - total
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'num', None, None, ), # 1
    (2, TType.I32, 'size', None, None, ), # 2
    (3, TType.I32, 'total', None, None, ), # 3
    (4, TType.I32, 'count', None, None, ), # 4
  )

  def __init__(self, num=None, size=None, total=None, count=None,):
    self.num = num
    self.size = size
    self.total = total
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.total = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageQueryResp')
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 1)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 2)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 3)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.total)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WXCustomer:
  """
  Attributes:
   - id
   - subscribe
   - openid
   - nickname
   - sex
   - city
   - country
   - province
   - language
   - headimgurl
   - subscribe_time
   - unionid
   - remark
   - groupid
   - tagid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I16, 'subscribe', None, None, ), # 2
    (3, TType.STRING, 'openid', None, None, ), # 3
    (4, TType.STRING, 'nickname', None, None, ), # 4
    (5, TType.I16, 'sex', None, None, ), # 5
    (6, TType.STRING, 'city', None, None, ), # 6
    (7, TType.STRING, 'country', None, None, ), # 7
    (8, TType.STRING, 'province', None, None, ), # 8
    (9, TType.STRING, 'language', None, None, ), # 9
    (10, TType.STRING, 'headimgurl', None, None, ), # 10
    (11, TType.I32, 'subscribe_time', None, None, ), # 11
    (12, TType.STRING, 'unionid', None, None, ), # 12
    (13, TType.STRING, 'remark', None, None, ), # 13
    (14, TType.I64, 'groupid', None, None, ), # 14
    (15, TType.STRING, 'tagid_list', None, None, ), # 15
  )

  def __init__(self, id=None, subscribe=None, openid=None, nickname=None, sex=None, city=None, country=None, province=None, language=None, headimgurl=None, subscribe_time=None, unionid=None, remark=None, groupid=None, tagid_list=None,):
    self.id = id
    self.subscribe = subscribe
    self.openid = openid
    self.nickname = nickname
    self.sex = sex
    self.city = city
    self.country = country
    self.province = province
    self.language = language
    self.headimgurl = headimgurl
    self.subscribe_time = subscribe_time
    self.unionid = unionid
    self.remark = remark
    self.groupid = groupid
    self.tagid_list = tagid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.subscribe = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.openid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.sex = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.country = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.language = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.headimgurl = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.subscribe_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.unionid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.remark = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.groupid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.tagid_list = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WXCustomer')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.subscribe is not None:
      oprot.writeFieldBegin('subscribe', TType.I16, 2)
      oprot.writeI16(self.subscribe)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 3)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    if self.nickname is not None:
      oprot.writeFieldBegin('nickname', TType.STRING, 4)
      oprot.writeString(self.nickname)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I16, 5)
      oprot.writeI16(self.sex)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 6)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 7)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 8)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 9)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.headimgurl is not None:
      oprot.writeFieldBegin('headimgurl', TType.STRING, 10)
      oprot.writeString(self.headimgurl)
      oprot.writeFieldEnd()
    if self.subscribe_time is not None:
      oprot.writeFieldBegin('subscribe_time', TType.I32, 11)
      oprot.writeI32(self.subscribe_time)
      oprot.writeFieldEnd()
    if self.unionid is not None:
      oprot.writeFieldBegin('unionid', TType.STRING, 12)
      oprot.writeString(self.unionid)
      oprot.writeFieldEnd()
    if self.remark is not None:
      oprot.writeFieldBegin('remark', TType.STRING, 13)
      oprot.writeString(self.remark)
      oprot.writeFieldEnd()
    if self.groupid is not None:
      oprot.writeFieldBegin('groupid', TType.I64, 14)
      oprot.writeI64(self.groupid)
      oprot.writeFieldEnd()
    if self.tagid_list is not None:
      oprot.writeFieldBegin('tagid_list', TType.STRING, 15)
      oprot.writeString(self.tagid_list)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.subscribe)
    value = (value * 31) ^ hash(self.openid)
    value = (value * 31) ^ hash(self.nickname)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.country)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.language)
    value = (value * 31) ^ hash(self.headimgurl)
    value = (value * 31) ^ hash(self.subscribe_time)
    value = (value * 31) ^ hash(self.unionid)
    value = (value * 31) ^ hash(self.remark)
    value = (value * 31) ^ hash(self.groupid)
    value = (value * 31) ^ hash(self.tagid_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WXToken:
  """
  Attributes:
   - access_token
   - ttl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'access_token', None, None, ), # 1
    (2, TType.I32, 'ttl', None, None, ), # 2
  )

  def __init__(self, access_token=None, ttl=None,):
    self.access_token = access_token
    self.ttl = ttl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.access_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ttl = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WXToken')
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 1)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I32, 2)
      oprot.writeI32(self.ttl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.access_token)
    value = (value * 31) ^ hash(self.ttl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class KFMsg:
  """
  Attributes:
   - appid
   - openid
   - msg_type
   - msg_content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'openid', None, None, ), # 2
    (3, TType.I32, 'msg_type', None, None, ), # 3
    (4, TType.STRING, 'msg_content', None, None, ), # 4
  )

  def __init__(self, appid=None, openid=None, msg_type=None, msg_content=None,):
    self.appid = appid
    self.openid = openid
    self.msg_type = msg_type
    self.msg_content = msg_content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.openid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.msg_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.msg_content = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KFMsg')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 2)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    if self.msg_type is not None:
      oprot.writeFieldBegin('msg_type', TType.I32, 3)
      oprot.writeI32(self.msg_type)
      oprot.writeFieldEnd()
    if self.msg_content is not None:
      oprot.writeFieldBegin('msg_content', TType.STRING, 4)
      oprot.writeString(self.msg_content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.openid)
    value = (value * 31) ^ hash(self.msg_type)
    value = (value * 31) ^ hash(self.msg_content)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPush:
  """
  Attributes:
   - appid
   - pushid
   - itemid
   - media_id
   - media_type
   - push_type
   - group_id
   - openids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.I64, 'pushid', None, None, ), # 2
    (3, TType.I64, 'itemid', None, None, ), # 3
    (4, TType.STRING, 'media_id', None, None, ), # 4
    (5, TType.I32, 'media_type', None,     1, ), # 5
    (6, TType.I32, 'push_type', None,     1, ), # 6
    (7, TType.I32, 'group_id', None, None, ), # 7
    (8, TType.LIST, 'openids', (TType.STRING,None), None, ), # 8
  )

  def __init__(self, appid=None, pushid=None, itemid=None, media_id=None, media_type=thrift_spec[5][4], push_type=thrift_spec[6][4], group_id=None, openids=None,):
    self.appid = appid
    self.pushid = pushid
    self.itemid = itemid
    self.media_id = media_id
    self.media_type = media_type
    self.push_type = push_type
    self.group_id = group_id
    self.openids = openids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.pushid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.itemid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.media_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.media_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.push_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.openids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.openids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPush')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.pushid is not None:
      oprot.writeFieldBegin('pushid', TType.I64, 2)
      oprot.writeI64(self.pushid)
      oprot.writeFieldEnd()
    if self.itemid is not None:
      oprot.writeFieldBegin('itemid', TType.I64, 3)
      oprot.writeI64(self.itemid)
      oprot.writeFieldEnd()
    if self.media_id is not None:
      oprot.writeFieldBegin('media_id', TType.STRING, 4)
      oprot.writeString(self.media_id)
      oprot.writeFieldEnd()
    if self.media_type is not None:
      oprot.writeFieldBegin('media_type', TType.I32, 5)
      oprot.writeI32(self.media_type)
      oprot.writeFieldEnd()
    if self.push_type is not None:
      oprot.writeFieldBegin('push_type', TType.I32, 6)
      oprot.writeI32(self.push_type)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 7)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.openids is not None:
      oprot.writeFieldBegin('openids', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.openids))
      for iter6 in self.openids:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.pushid is None:
      raise TProtocol.TProtocolException(message='Required field pushid is unset!')
    if self.itemid is None:
      raise TProtocol.TProtocolException(message='Required field itemid is unset!')
    if self.media_id is None:
      raise TProtocol.TProtocolException(message='Required field media_id is unset!')
    if self.media_type is None:
      raise TProtocol.TProtocolException(message='Required field media_type is unset!')
    if self.push_type is None:
      raise TProtocol.TProtocolException(message='Required field push_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.pushid)
    value = (value * 31) ^ hash(self.itemid)
    value = (value * 31) ^ hash(self.media_id)
    value = (value * 31) ^ hash(self.media_type)
    value = (value * 31) ^ hash(self.push_type)
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.openids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPushBase:
  """
  Attributes:
   - appid
   - pushid
   - itemid
   - push_type
   - group_id
   - openids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.I64, 'pushid', None, None, ), # 2
    (3, TType.I64, 'itemid', None, None, ), # 3
    (4, TType.I32, 'push_type', None,     1, ), # 4
    (5, TType.I32, 'group_id', None, None, ), # 5
    (6, TType.LIST, 'openids', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, appid=None, pushid=None, itemid=None, push_type=thrift_spec[4][4], group_id=None, openids=None,):
    self.appid = appid
    self.pushid = pushid
    self.itemid = itemid
    self.push_type = push_type
    self.group_id = group_id
    self.openids = openids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.pushid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.itemid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.push_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.group_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.openids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString()
            self.openids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPushBase')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.pushid is not None:
      oprot.writeFieldBegin('pushid', TType.I64, 2)
      oprot.writeI64(self.pushid)
      oprot.writeFieldEnd()
    if self.itemid is not None:
      oprot.writeFieldBegin('itemid', TType.I64, 3)
      oprot.writeI64(self.itemid)
      oprot.writeFieldEnd()
    if self.push_type is not None:
      oprot.writeFieldBegin('push_type', TType.I32, 4)
      oprot.writeI32(self.push_type)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.I32, 5)
      oprot.writeI32(self.group_id)
      oprot.writeFieldEnd()
    if self.openids is not None:
      oprot.writeFieldBegin('openids', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.openids))
      for iter13 in self.openids:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.pushid is None:
      raise TProtocol.TProtocolException(message='Required field pushid is unset!')
    if self.itemid is None:
      raise TProtocol.TProtocolException(message='Required field itemid is unset!')
    if self.push_type is None:
      raise TProtocol.TProtocolException(message='Required field push_type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.pushid)
    value = (value * 31) ^ hash(self.itemid)
    value = (value * 31) ^ hash(self.push_type)
    value = (value * 31) ^ hash(self.group_id)
    value = (value * 31) ^ hash(self.openids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPushTxt:
  """
  Attributes:
   - base
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (MPushBase, MPushBase.thrift_spec), None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
  )

  def __init__(self, base=None, content=None,):
    self.base = base
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = MPushBase()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPushTxt')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.base is None:
      raise TProtocol.TProtocolException(message='Required field base is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.base)
    value = (value * 31) ^ hash(self.content)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PushStat:
  """
  Attributes:
   - total_num
   - filter_num
   - sent_num
   - error_num
   - itemids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_num', None, None, ), # 1
    (2, TType.I32, 'filter_num', None, None, ), # 2
    (3, TType.I32, 'sent_num', None, None, ), # 3
    (4, TType.I32, 'error_num', None, None, ), # 4
    (5, TType.LIST, 'itemids', (TType.I64,None), None, ), # 5
  )

  def __init__(self, total_num=None, filter_num=None, sent_num=None, error_num=None, itemids=None,):
    self.total_num = total_num
    self.filter_num = filter_num
    self.sent_num = sent_num
    self.error_num = error_num
    self.itemids = itemids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.filter_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sent_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.error_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.itemids = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI64()
            self.itemids.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PushStat')
    if self.total_num is not None:
      oprot.writeFieldBegin('total_num', TType.I32, 1)
      oprot.writeI32(self.total_num)
      oprot.writeFieldEnd()
    if self.filter_num is not None:
      oprot.writeFieldBegin('filter_num', TType.I32, 2)
      oprot.writeI32(self.filter_num)
      oprot.writeFieldEnd()
    if self.sent_num is not None:
      oprot.writeFieldBegin('sent_num', TType.I32, 3)
      oprot.writeI32(self.sent_num)
      oprot.writeFieldEnd()
    if self.error_num is not None:
      oprot.writeFieldBegin('error_num', TType.I32, 4)
      oprot.writeI32(self.error_num)
      oprot.writeFieldEnd()
    if self.itemids is not None:
      oprot.writeFieldBegin('itemids', TType.LIST, 5)
      oprot.writeListBegin(TType.I64, len(self.itemids))
      for iter20 in self.itemids:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.total_num)
    value = (value * 31) ^ hash(self.filter_num)
    value = (value * 31) ^ hash(self.sent_num)
    value = (value * 31) ^ hash(self.error_num)
    value = (value * 31) ^ hash(self.itemids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPConf:
  """
  Attributes:
   - id
   - userid
   - hj_appid
   - thrid_appid
   - appid
   - appsecret
   - wxmp_id
   - wxmp_num
   - is_auth
   - status
   - ctime
   - uptime
   - nick_name
   - head_img
   - service_type
   - verify_type
   - qrcode_url
   - funcs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'userid', None, None, ), # 2
    (3, TType.I32, 'hj_appid', None, None, ), # 3
    (4, TType.STRING, 'thrid_appid', None, None, ), # 4
    (5, TType.STRING, 'appid', None, None, ), # 5
    (6, TType.STRING, 'appsecret', None, None, ), # 6
    (7, TType.STRING, 'wxmp_id', None, None, ), # 7
    (8, TType.STRING, 'wxmp_num', None, None, ), # 8
    (9, TType.I16, 'is_auth', None, None, ), # 9
    (10, TType.I16, 'status', None, None, ), # 10
    (11, TType.I32, 'ctime', None, None, ), # 11
    (12, TType.I32, 'uptime', None, None, ), # 12
    (13, TType.STRING, 'nick_name', None, None, ), # 13
    (14, TType.STRING, 'head_img', None, None, ), # 14
    (15, TType.STRING, 'service_type', None, None, ), # 15
    (16, TType.STRING, 'verify_type', None, None, ), # 16
    (17, TType.STRING, 'qrcode_url', None, None, ), # 17
    (18, TType.LIST, 'funcs', (TType.STRING,None), None, ), # 18
  )

  def __init__(self, id=None, userid=None, hj_appid=None, thrid_appid=None, appid=None, appsecret=None, wxmp_id=None, wxmp_num=None, is_auth=None, status=None, ctime=None, uptime=None, nick_name=None, head_img=None, service_type=None, verify_type=None, qrcode_url=None, funcs=None,):
    self.id = id
    self.userid = userid
    self.hj_appid = hj_appid
    self.thrid_appid = thrid_appid
    self.appid = appid
    self.appsecret = appsecret
    self.wxmp_id = wxmp_id
    self.wxmp_num = wxmp_num
    self.is_auth = is_auth
    self.status = status
    self.ctime = ctime
    self.uptime = uptime
    self.nick_name = nick_name
    self.head_img = head_img
    self.service_type = service_type
    self.verify_type = verify_type
    self.qrcode_url = qrcode_url
    self.funcs = funcs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.userid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.hj_appid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.thrid_appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.appsecret = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.wxmp_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.wxmp_num = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.is_auth = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.ctime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.uptime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.nick_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.head_img = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.service_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.verify_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.qrcode_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.funcs = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString()
            self.funcs.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPConf')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 2)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.hj_appid is not None:
      oprot.writeFieldBegin('hj_appid', TType.I32, 3)
      oprot.writeI32(self.hj_appid)
      oprot.writeFieldEnd()
    if self.thrid_appid is not None:
      oprot.writeFieldBegin('thrid_appid', TType.STRING, 4)
      oprot.writeString(self.thrid_appid)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 5)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.appsecret is not None:
      oprot.writeFieldBegin('appsecret', TType.STRING, 6)
      oprot.writeString(self.appsecret)
      oprot.writeFieldEnd()
    if self.wxmp_id is not None:
      oprot.writeFieldBegin('wxmp_id', TType.STRING, 7)
      oprot.writeString(self.wxmp_id)
      oprot.writeFieldEnd()
    if self.wxmp_num is not None:
      oprot.writeFieldBegin('wxmp_num', TType.STRING, 8)
      oprot.writeString(self.wxmp_num)
      oprot.writeFieldEnd()
    if self.is_auth is not None:
      oprot.writeFieldBegin('is_auth', TType.I16, 9)
      oprot.writeI16(self.is_auth)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 10)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 11)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.uptime is not None:
      oprot.writeFieldBegin('uptime', TType.I32, 12)
      oprot.writeI32(self.uptime)
      oprot.writeFieldEnd()
    if self.nick_name is not None:
      oprot.writeFieldBegin('nick_name', TType.STRING, 13)
      oprot.writeString(self.nick_name)
      oprot.writeFieldEnd()
    if self.head_img is not None:
      oprot.writeFieldBegin('head_img', TType.STRING, 14)
      oprot.writeString(self.head_img)
      oprot.writeFieldEnd()
    if self.service_type is not None:
      oprot.writeFieldBegin('service_type', TType.STRING, 15)
      oprot.writeString(self.service_type)
      oprot.writeFieldEnd()
    if self.verify_type is not None:
      oprot.writeFieldBegin('verify_type', TType.STRING, 16)
      oprot.writeString(self.verify_type)
      oprot.writeFieldEnd()
    if self.qrcode_url is not None:
      oprot.writeFieldBegin('qrcode_url', TType.STRING, 17)
      oprot.writeString(self.qrcode_url)
      oprot.writeFieldEnd()
    if self.funcs is not None:
      oprot.writeFieldBegin('funcs', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.funcs))
      for iter27 in self.funcs:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.hj_appid)
    value = (value * 31) ^ hash(self.thrid_appid)
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.appsecret)
    value = (value * 31) ^ hash(self.wxmp_id)
    value = (value * 31) ^ hash(self.wxmp_num)
    value = (value * 31) ^ hash(self.is_auth)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.ctime)
    value = (value * 31) ^ hash(self.uptime)
    value = (value * 31) ^ hash(self.nick_name)
    value = (value * 31) ^ hash(self.head_img)
    value = (value * 31) ^ hash(self.service_type)
    value = (value * 31) ^ hash(self.verify_type)
    value = (value * 31) ^ hash(self.qrcode_url)
    value = (value * 31) ^ hash(self.funcs)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubMenu:
  """
  Attributes:
   - name
   - event
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'event', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
  )

  def __init__(self, name=None, event=None, value=None,):
    self.name = name
    self.event = event
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.event = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubMenu')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.I32, 2)
      oprot.writeI32(self.event)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.event)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Menu:
  """
  Attributes:
   - name
   - event
   - value
   - sub_menu
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'event', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
    (4, TType.LIST, 'sub_menu', (TType.STRUCT,(SubMenu, SubMenu.thrift_spec)), None, ), # 4
  )

  def __init__(self, name=None, event=None, value=None, sub_menu=None,):
    self.name = name
    self.event = event
    self.value = value
    self.sub_menu = sub_menu

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.event = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.sub_menu = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = SubMenu()
            _elem33.read(iprot)
            self.sub_menu.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Menu')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.I32, 2)
      oprot.writeI32(self.event)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.sub_menu is not None:
      oprot.writeFieldBegin('sub_menu', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.sub_menu))
      for iter34 in self.sub_menu:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.event)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.sub_menu)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Reply:
  """
  Attributes:
   - appid
   - mp_key
   - push_type
   - push_txt
   - push_title
   - push_content
   - push_pic_url
   - push_url
   - content
   - status
   - create_time
   - update_time
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'mp_key', None, None, ), # 2
    (3, TType.I32, 'push_type', None,     1, ), # 3
    (4, TType.STRING, 'push_txt', None, "", ), # 4
    (5, TType.STRING, 'push_title', None, "", ), # 5
    (6, TType.STRING, 'push_content', None, "", ), # 6
    (7, TType.STRING, 'push_pic_url', None, "", ), # 7
    (8, TType.STRING, 'push_url', None, "", ), # 8
    (9, TType.STRING, 'content', None, "", ), # 9
    (10, TType.I16, 'status', None, 1, ), # 10
    (11, TType.STRING, 'create_time', None, None, ), # 11
    (12, TType.STRING, 'update_time', None, None, ), # 12
    (13, TType.I16, 'weight', None, 1, ), # 13
  )

  def __init__(self, appid=None, mp_key=None, push_type=thrift_spec[3][4], push_txt=thrift_spec[4][4], push_title=thrift_spec[5][4], push_content=thrift_spec[6][4], push_pic_url=thrift_spec[7][4], push_url=thrift_spec[8][4], content=thrift_spec[9][4], status=thrift_spec[10][4], create_time=None, update_time=None, weight=thrift_spec[13][4],):
    self.appid = appid
    self.mp_key = mp_key
    self.push_type = push_type
    self.push_txt = push_txt
    self.push_title = push_title
    self.push_content = push_content
    self.push_pic_url = push_pic_url
    self.push_url = push_url
    self.content = content
    self.status = status
    self.create_time = create_time
    self.update_time = update_time
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mp_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.push_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.push_txt = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.push_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.push_content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.push_pic_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.push_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.content = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.create_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.update_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.weight = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reply')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.mp_key is not None:
      oprot.writeFieldBegin('mp_key', TType.STRING, 2)
      oprot.writeString(self.mp_key)
      oprot.writeFieldEnd()
    if self.push_type is not None:
      oprot.writeFieldBegin('push_type', TType.I32, 3)
      oprot.writeI32(self.push_type)
      oprot.writeFieldEnd()
    if self.push_txt is not None:
      oprot.writeFieldBegin('push_txt', TType.STRING, 4)
      oprot.writeString(self.push_txt)
      oprot.writeFieldEnd()
    if self.push_title is not None:
      oprot.writeFieldBegin('push_title', TType.STRING, 5)
      oprot.writeString(self.push_title)
      oprot.writeFieldEnd()
    if self.push_content is not None:
      oprot.writeFieldBegin('push_content', TType.STRING, 6)
      oprot.writeString(self.push_content)
      oprot.writeFieldEnd()
    if self.push_pic_url is not None:
      oprot.writeFieldBegin('push_pic_url', TType.STRING, 7)
      oprot.writeString(self.push_pic_url)
      oprot.writeFieldEnd()
    if self.push_url is not None:
      oprot.writeFieldBegin('push_url', TType.STRING, 8)
      oprot.writeString(self.push_url)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 9)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 10)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 11)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.STRING, 12)
      oprot.writeString(self.update_time)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I16, 13)
      oprot.writeI16(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.mp_key)
    value = (value * 31) ^ hash(self.push_type)
    value = (value * 31) ^ hash(self.push_txt)
    value = (value * 31) ^ hash(self.push_title)
    value = (value * 31) ^ hash(self.push_content)
    value = (value * 31) ^ hash(self.push_pic_url)
    value = (value * 31) ^ hash(self.push_url)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.update_time)
    value = (value * 31) ^ hash(self.weight)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReplyQuery:
  """
  Attributes:
   - appid
   - mp_key
   - status
   - page
   - mp_keys
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'mp_key', None, None, ), # 2
    (3, TType.I16, 'status', None, None, ), # 3
    (4, TType.STRUCT, 'page', (PageQuery, PageQuery.thrift_spec), None, ), # 4
    (5, TType.LIST, 'mp_keys', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, appid=None, mp_key=None, status=None, page=None, mp_keys=None,):
    self.appid = appid
    self.mp_key = mp_key
    self.status = status
    self.page = page
    self.mp_keys = mp_keys

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mp_key = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.page = PageQuery()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.mp_keys = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString()
            self.mp_keys.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReplyQuery')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.mp_key is not None:
      oprot.writeFieldBegin('mp_key', TType.STRING, 2)
      oprot.writeString(self.mp_key)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 4)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    if self.mp_keys is not None:
      oprot.writeFieldBegin('mp_keys', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.mp_keys))
      for iter41 in self.mp_keys:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.page is None:
      raise TProtocol.TProtocolException(message='Required field page is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.mp_key)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.mp_keys)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReplyQueryResp:
  """
  Attributes:
   - page
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'page', (PageQueryResp, PageQueryResp.thrift_spec), None, ), # 1
    (2, TType.LIST, 'data', (TType.STRUCT,(Reply, Reply.thrift_spec)), None, ), # 2
  )

  def __init__(self, page=None, data=None,):
    self.page = page
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.page = PageQueryResp()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.data = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = Reply()
            _elem47.read(iprot)
            self.data.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReplyQueryResp')
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 1)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.data))
      for iter48 in self.data:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TemplateSend:
  """
  Attributes:
   - appid
   - openid
   - template_id
   - url
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'openid', None, None, ), # 2
    (3, TType.STRING, 'template_id', None, None, ), # 3
    (4, TType.STRING, 'url', None, "", ), # 4
    (5, TType.STRING, 'data', None, None, ), # 5
  )

  def __init__(self, appid=None, openid=None, template_id=None, url=thrift_spec[4][4], data=None,):
    self.appid = appid
    self.openid = openid
    self.template_id = template_id
    self.url = url
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.openid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.template_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TemplateSend')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 2)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    if self.template_id is not None:
      oprot.writeFieldBegin('template_id', TType.STRING, 3)
      oprot.writeString(self.template_id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 4)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 5)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.openid is None:
      raise TProtocol.TProtocolException(message='Required field openid is unset!')
    if self.template_id is None:
      raise TProtocol.TProtocolException(message='Required field template_id is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.openid)
    value = (value * 31) ^ hash(self.template_id)
    value = (value * 31) ^ hash(self.url)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPEvent:
  """
  Attributes:
   - appid
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'appid', None, None, ), # 1
    (2, TType.STRING, 'data', None, None, ), # 2
  )

  def __init__(self, appid=None, data=None,):
    self.appid = appid
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.appid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.data = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPEvent')
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.STRING, 1)
      oprot.writeString(self.appid)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRING, 2)
      oprot.writeString(self.data)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.data is None:
      raise TProtocol.TProtocolException(message='Required field data is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.appid)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MPAuthBind:
  """
  Attributes:
   - userid
   - auth_code
   - expire
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRING, 'auth_code', None, None, ), # 2
    (3, TType.I32, 'expire', None, None, ), # 3
  )

  def __init__(self, userid=None, auth_code=None, expire=None,):
    self.userid = userid
    self.auth_code = auth_code
    self.expire = expire

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auth_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expire = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MPAuthBind')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.auth_code is not None:
      oprot.writeFieldBegin('auth_code', TType.STRING, 2)
      oprot.writeString(self.auth_code)
      oprot.writeFieldEnd()
    if self.expire is not None:
      oprot.writeFieldBegin('expire', TType.I32, 3)
      oprot.writeI32(self.expire)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.auth_code is None:
      raise TProtocol.TProtocolException(message='Required field auth_code is unset!')
    if self.expire is None:
      raise TProtocol.TProtocolException(message='Required field expire is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.auth_code)
    value = (value * 31) ^ hash(self.expire)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
