#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Error(TException):
  """
  Attributes:
   - errcode
   - errmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errcode', None, None, ), # 1
    (2, TType.STRING, 'errmsg', None, None, ), # 2
  )

  def __init__(self, errcode=None, errmsg=None,):
    self.errcode = errcode
    self.errmsg = errmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errcode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.errmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Error')
    if self.errcode is not None:
      oprot.writeFieldBegin('errcode', TType.I32, 1)
      oprot.writeI32(self.errcode)
      oprot.writeFieldEnd()
    if self.errmsg is not None:
      oprot.writeFieldBegin('errmsg', TType.STRING, 2)
      oprot.writeString(self.errmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Point:
  """
  Attributes:
   - lng
   - lat
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'lng', None, None, ), # 1
    (2, TType.DOUBLE, 'lat', None, None, ), # 2
  )

  def __init__(self, lng=None, lat=None,):
    self.lng = lng
    self.lat = lat

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.lng = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.lat = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Point')
    if self.lng is not None:
      oprot.writeFieldBegin('lng', TType.DOUBLE, 1)
      oprot.writeDouble(self.lng)
      oprot.writeFieldEnd()
    if self.lat is not None:
      oprot.writeFieldBegin('lat', TType.DOUBLE, 2)
      oprot.writeDouble(self.lat)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.lng is None:
      raise TProtocol.TProtocolException(message='Required field lng is unset!')
    if self.lat is None:
      raise TProtocol.TProtocolException(message='Required field lat is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Polygon:
  """
  Attributes:
   - coordinates
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'coordinates', (TType.STRUCT,(Point, Point.thrift_spec)), None, ), # 1
  )

  def __init__(self, coordinates=None,):
    self.coordinates = coordinates

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.coordinates = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Point()
            _elem5.read(iprot)
            self.coordinates.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Polygon')
    if self.coordinates is not None:
      oprot.writeFieldBegin('coordinates', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.coordinates))
      for iter6 in self.coordinates:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.coordinates is None:
      raise TProtocol.TProtocolException(message='Required field coordinates is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Area:
  """
  Attributes:
   - id
   - name
   - parent_id
   - stat_code
   - weight
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'parent_id', None, None, ), # 3
    (4, TType.STRING, 'stat_code', None, None, ), # 4
    None, # 5
    (6, TType.I32, 'weight', None, None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, parent_id=None, stat_code=None, weight=None, status=None,):
    self.id = id
    self.name = name
    self.parent_id = parent_id
    self.stat_code = stat_code
    self.weight = weight
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.stat_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Area')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 3)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.stat_code is not None:
      oprot.writeFieldBegin('stat_code', TType.STRING, 4)
      oprot.writeString(self.stat_code)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 6)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ShopCategory:
  """
  Attributes:
   - id
   - name
   - parent_id
   - weight
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'parent_id', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.I32, 'weight', None, None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, parent_id=None, weight=None, status=None,):
    self.id = id
    self.name = name
    self.parent_id = parent_id
    self.weight = weight
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.parent_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ShopCategory')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.parent_id is not None:
      oprot.writeFieldBegin('parent_id', TType.I32, 3)
      oprot.writeI32(self.parent_id)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 6)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Region:
  """
  Attributes:
   - id
   - name
   - area_id
   - field
   - weight
   - status
   - created
   - modified
   - loc
   - radius
   - max_shop_count
   - business_type
   - open_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    None, # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'area_id', None, None, ), # 4
    None, # 5
    None, # 6
    (7, TType.STRUCT, 'field', (Polygon, Polygon.thrift_spec), None, ), # 7
    (8, TType.I32, 'weight', None, None, ), # 8
    (9, TType.I32, 'status', None, None, ), # 9
    (10, TType.STRING, 'created', None, None, ), # 10
    (11, TType.STRING, 'modified', None, None, ), # 11
    (12, TType.STRUCT, 'loc', (Point, Point.thrift_spec), None, ), # 12
    (13, TType.I32, 'radius', None, None, ), # 13
    (14, TType.I32, 'max_shop_count', None, None, ), # 14
    (15, TType.STRING, 'business_type', None, None, ), # 15
    (16, TType.STRING, 'open_type', None, None, ), # 16
  )

  def __init__(self, id=None, name=None, area_id=None, field=None, weight=None, status=None, created=None, modified=None, loc=None, radius=None, max_shop_count=None, business_type=None, open_type=None,):
    self.id = id
    self.name = name
    self.area_id = area_id
    self.field = field
    self.weight = weight
    self.status = status
    self.created = created
    self.modified = modified
    self.loc = loc
    self.radius = radius
    self.max_shop_count = max_shop_count
    self.business_type = business_type
    self.open_type = open_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.area_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.field = Polygon()
          self.field.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.created = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.modified = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.loc = Point()
          self.loc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.radius = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.max_shop_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.business_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.open_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Region')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.area_id is not None:
      oprot.writeFieldBegin('area_id', TType.I32, 4)
      oprot.writeI32(self.area_id)
      oprot.writeFieldEnd()
    if self.field is not None:
      oprot.writeFieldBegin('field', TType.STRUCT, 7)
      self.field.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 8)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.created is not None:
      oprot.writeFieldBegin('created', TType.STRING, 10)
      oprot.writeString(self.created)
      oprot.writeFieldEnd()
    if self.modified is not None:
      oprot.writeFieldBegin('modified', TType.STRING, 11)
      oprot.writeString(self.modified)
      oprot.writeFieldEnd()
    if self.loc is not None:
      oprot.writeFieldBegin('loc', TType.STRUCT, 12)
      self.loc.write(oprot)
      oprot.writeFieldEnd()
    if self.radius is not None:
      oprot.writeFieldBegin('radius', TType.I32, 13)
      oprot.writeI32(self.radius)
      oprot.writeFieldEnd()
    if self.max_shop_count is not None:
      oprot.writeFieldBegin('max_shop_count', TType.I32, 14)
      oprot.writeI32(self.max_shop_count)
      oprot.writeFieldEnd()
    if self.business_type is not None:
      oprot.writeFieldBegin('business_type', TType.STRING, 15)
      oprot.writeString(self.business_type)
      oprot.writeFieldEnd()
    if self.open_type is not None:
      oprot.writeFieldBegin('open_type', TType.STRING, 16)
      oprot.writeString(self.open_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Shop:
  """
  Attributes:
   - id
   - qf_uid
   - title
   - descr
   - category_id
   - avg_price
   - tel
   - head_img
   - region_ids
   - building_id
   - addr
   - loc
   - status
   - created
   - modified
   - imgs
   - is_test
   - is_pay
   - weight
   - hours
   - logo_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.I32, 'qf_uid', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'descr', None, None, ), # 4
    (5, TType.I32, 'category_id', None, None, ), # 5
    (6, TType.I32, 'avg_price', None, None, ), # 6
    (7, TType.STRING, 'tel', None, None, ), # 7
    (8, TType.STRING, 'head_img', None, None, ), # 8
    (9, TType.LIST, 'region_ids', (TType.STRING,None), None, ), # 9
    (10, TType.STRING, 'building_id', None, None, ), # 10
    (11, TType.STRING, 'addr', None, None, ), # 11
    (12, TType.STRUCT, 'loc', (Point, Point.thrift_spec), None, ), # 12
    (13, TType.I32, 'status', None, None, ), # 13
    (14, TType.STRING, 'created', None, None, ), # 14
    (15, TType.STRING, 'modified', None, None, ), # 15
    (16, TType.LIST, 'imgs', (TType.STRING,None), None, ), # 16
    (17, TType.I32, 'is_test', None, None, ), # 17
    (18, TType.I32, 'is_pay', None, None, ), # 18
    (19, TType.I32, 'weight', None, None, ), # 19
    (20, TType.LIST, 'hours', (TType.STRING,None), None, ), # 20
    (21, TType.STRING, 'logo_url', None, None, ), # 21
  )

  def __init__(self, id=None, qf_uid=None, title=None, descr=None, category_id=None, avg_price=None, tel=None, head_img=None, region_ids=None, building_id=None, addr=None, loc=None, status=None, created=None, modified=None, imgs=None, is_test=None, is_pay=None, weight=None, hours=None, logo_url=None,):
    self.id = id
    self.qf_uid = qf_uid
    self.title = title
    self.descr = descr
    self.category_id = category_id
    self.avg_price = avg_price
    self.tel = tel
    self.head_img = head_img
    self.region_ids = region_ids
    self.building_id = building_id
    self.addr = addr
    self.loc = loc
    self.status = status
    self.created = created
    self.modified = modified
    self.imgs = imgs
    self.is_test = is_test
    self.is_pay = is_pay
    self.weight = weight
    self.hours = hours
    self.logo_url = logo_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.qf_uid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.descr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.category_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.avg_price = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.tel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.head_img = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.region_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.region_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.building_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.addr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.loc = Point()
          self.loc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.created = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.modified = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.imgs = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readString();
            self.imgs.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.is_test = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.is_pay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.hours = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readString();
            self.hours.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.logo_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Shop')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.qf_uid is not None:
      oprot.writeFieldBegin('qf_uid', TType.I32, 2)
      oprot.writeI32(self.qf_uid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.descr is not None:
      oprot.writeFieldBegin('descr', TType.STRING, 4)
      oprot.writeString(self.descr)
      oprot.writeFieldEnd()
    if self.category_id is not None:
      oprot.writeFieldBegin('category_id', TType.I32, 5)
      oprot.writeI32(self.category_id)
      oprot.writeFieldEnd()
    if self.avg_price is not None:
      oprot.writeFieldBegin('avg_price', TType.I32, 6)
      oprot.writeI32(self.avg_price)
      oprot.writeFieldEnd()
    if self.tel is not None:
      oprot.writeFieldBegin('tel', TType.STRING, 7)
      oprot.writeString(self.tel)
      oprot.writeFieldEnd()
    if self.head_img is not None:
      oprot.writeFieldBegin('head_img', TType.STRING, 8)
      oprot.writeString(self.head_img)
      oprot.writeFieldEnd()
    if self.region_ids is not None:
      oprot.writeFieldBegin('region_ids', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.region_ids))
      for iter25 in self.region_ids:
        oprot.writeString(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.building_id is not None:
      oprot.writeFieldBegin('building_id', TType.STRING, 10)
      oprot.writeString(self.building_id)
      oprot.writeFieldEnd()
    if self.addr is not None:
      oprot.writeFieldBegin('addr', TType.STRING, 11)
      oprot.writeString(self.addr)
      oprot.writeFieldEnd()
    if self.loc is not None:
      oprot.writeFieldBegin('loc', TType.STRUCT, 12)
      self.loc.write(oprot)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 13)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.created is not None:
      oprot.writeFieldBegin('created', TType.STRING, 14)
      oprot.writeString(self.created)
      oprot.writeFieldEnd()
    if self.modified is not None:
      oprot.writeFieldBegin('modified', TType.STRING, 15)
      oprot.writeString(self.modified)
      oprot.writeFieldEnd()
    if self.imgs is not None:
      oprot.writeFieldBegin('imgs', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.imgs))
      for iter26 in self.imgs:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.is_test is not None:
      oprot.writeFieldBegin('is_test', TType.I32, 17)
      oprot.writeI32(self.is_test)
      oprot.writeFieldEnd()
    if self.is_pay is not None:
      oprot.writeFieldBegin('is_pay', TType.I32, 18)
      oprot.writeI32(self.is_pay)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 19)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.hours is not None:
      oprot.writeFieldBegin('hours', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.hours))
      for iter27 in self.hours:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.logo_url is not None:
      oprot.writeFieldBegin('logo_url', TType.STRING, 21)
      oprot.writeString(self.logo_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Building:
  """
  Attributes:
   - id
   - name
   - region_id
   - loc
   - weight
   - status
   - created
   - modified
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'region_id', None, None, ), # 3
    (4, TType.STRUCT, 'loc', (Point, Point.thrift_spec), None, ), # 4
    (5, TType.I32, 'weight', None, None, ), # 5
    (6, TType.I32, 'status', None, None, ), # 6
    (7, TType.STRING, 'created', None, None, ), # 7
    (8, TType.STRING, 'modified', None, None, ), # 8
  )

  def __init__(self, id=None, name=None, region_id=None, loc=None, weight=None, status=None, created=None, modified=None,):
    self.id = id
    self.name = name
    self.region_id = region_id
    self.loc = loc
    self.weight = weight
    self.status = status
    self.created = created
    self.modified = modified

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.region_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.loc = Point()
          self.loc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.weight = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.created = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.modified = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Building')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.region_id is not None:
      oprot.writeFieldBegin('region_id', TType.STRING, 3)
      oprot.writeString(self.region_id)
      oprot.writeFieldEnd()
    if self.loc is not None:
      oprot.writeFieldBegin('loc', TType.STRUCT, 4)
      self.loc.write(oprot)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.I32, 5)
      oprot.writeI32(self.weight)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 6)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.created is not None:
      oprot.writeFieldBegin('created', TType.STRING, 7)
      oprot.writeString(self.created)
      oprot.writeFieldEnd()
    if self.modified is not None:
      oprot.writeFieldBegin('modified', TType.STRING, 8)
      oprot.writeString(self.modified)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchResultRegion:
  """
  Attributes:
   - total_count
   - region_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_count', None, None, ), # 1
    (2, TType.LIST, 'region_list', (TType.STRUCT,(Region, Region.thrift_spec)), None, ), # 2
  )

  def __init__(self, total_count=None, region_list=None,):
    self.total_count = total_count
    self.region_list = region_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.region_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Region()
            _elem33.read(iprot)
            self.region_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchResultRegion')
    if self.total_count is not None:
      oprot.writeFieldBegin('total_count', TType.I32, 1)
      oprot.writeI32(self.total_count)
      oprot.writeFieldEnd()
    if self.region_list is not None:
      oprot.writeFieldBegin('region_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.region_list))
      for iter34 in self.region_list:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SearchResultShop:
  """
  Attributes:
   - total_count
   - shop_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_count', None, None, ), # 1
    (2, TType.LIST, 'shop_list', (TType.STRUCT,(Shop, Shop.thrift_spec)), None, ), # 2
  )

  def __init__(self, total_count=None, shop_list=None,):
    self.total_count = total_count
    self.shop_list = shop_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.shop_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = Shop()
            _elem40.read(iprot)
            self.shop_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SearchResultShop')
    if self.total_count is not None:
      oprot.writeFieldBegin('total_count', TType.I32, 1)
      oprot.writeI32(self.total_count)
      oprot.writeFieldEnd()
    if self.shop_list is not None:
      oprot.writeFieldBegin('shop_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.shop_list))
      for iter41 in self.shop_list:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
