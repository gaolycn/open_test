#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Kuma import Kuma
from Kuma.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string ping()'
  print '   query_areas(i32 parent_id, string spec)'
  print '   parent_areas(i32 area_id, string spec)'
  print '   query_shop_categorys(i32 parent_id, string spec)'
  print '   locate_region(Point loc)'
  print '   one_punch(Point loc)'
  print '   query_regions(Area area, string spec)'
  print '   query_buildings(string region_id, Point loc, string spec)'
  print '   query_shops(string spec)'
  print '  i32 count_shops(string spec)'
  print '  string query_shop_current_discount(i32 qf_uid)'
  print '  Shop create_shop(Shop shop)'
  print '  Shop update_shop(Shop shop)'
  print '   query_multi_region_shop_count( region_id_list)'
  print '   get_area_by_ids( area_id_list)'
  print '  SearchResultRegion mis_search_region(string name, i32 status, i32 area_id, i32 offset, i32 limit,  id_list)'
  print '  SearchResultShop mis_search_shop(string name, string region_id, string tel, i32 offset, i32 limit, i32 status,  qf_uid_list,  area_region_id_list)'
  print '  Region create_region(Region region)'
  print '   query_region_type_map()'
  print '   query_region_open_type_map()'
  print '  Shop get_shop_by_id(string shop_id)'
  print '   query_shop_category_path(i32 shop_category_id)'
  print '  i32 mis_edit_shop_region( qf_uid_list, string region_id)'
  print '  Shop get_shop_by_qf_uid(i32 qf_uid)'
  print '  Region get_region_by_id(string region_id)'
  print '   search_shop_by_distance(Point loc,  qf_uid_list, i32 distance, i32 limit)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Kuma.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'query_areas':
  if len(args) != 2:
    print 'query_areas requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_areas(eval(args[0]),args[1],))

elif cmd == 'parent_areas':
  if len(args) != 2:
    print 'parent_areas requires 2 args'
    sys.exit(1)
  pp.pprint(client.parent_areas(eval(args[0]),args[1],))

elif cmd == 'query_shop_categorys':
  if len(args) != 2:
    print 'query_shop_categorys requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_shop_categorys(eval(args[0]),args[1],))

elif cmd == 'locate_region':
  if len(args) != 1:
    print 'locate_region requires 1 args'
    sys.exit(1)
  pp.pprint(client.locate_region(eval(args[0]),))

elif cmd == 'one_punch':
  if len(args) != 1:
    print 'one_punch requires 1 args'
    sys.exit(1)
  pp.pprint(client.one_punch(eval(args[0]),))

elif cmd == 'query_regions':
  if len(args) != 2:
    print 'query_regions requires 2 args'
    sys.exit(1)
  pp.pprint(client.query_regions(eval(args[0]),args[1],))

elif cmd == 'query_buildings':
  if len(args) != 3:
    print 'query_buildings requires 3 args'
    sys.exit(1)
  pp.pprint(client.query_buildings(args[0],eval(args[1]),args[2],))

elif cmd == 'query_shops':
  if len(args) != 1:
    print 'query_shops requires 1 args'
    sys.exit(1)
  pp.pprint(client.query_shops(args[0],))

elif cmd == 'count_shops':
  if len(args) != 1:
    print 'count_shops requires 1 args'
    sys.exit(1)
  pp.pprint(client.count_shops(args[0],))

elif cmd == 'query_shop_current_discount':
  if len(args) != 1:
    print 'query_shop_current_discount requires 1 args'
    sys.exit(1)
  pp.pprint(client.query_shop_current_discount(eval(args[0]),))

elif cmd == 'create_shop':
  if len(args) != 1:
    print 'create_shop requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_shop(eval(args[0]),))

elif cmd == 'update_shop':
  if len(args) != 1:
    print 'update_shop requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_shop(eval(args[0]),))

elif cmd == 'query_multi_region_shop_count':
  if len(args) != 1:
    print 'query_multi_region_shop_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.query_multi_region_shop_count(eval(args[0]),))

elif cmd == 'get_area_by_ids':
  if len(args) != 1:
    print 'get_area_by_ids requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_area_by_ids(eval(args[0]),))

elif cmd == 'mis_search_region':
  if len(args) != 6:
    print 'mis_search_region requires 6 args'
    sys.exit(1)
  pp.pprint(client.mis_search_region(args[0],eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'mis_search_shop':
  if len(args) != 8:
    print 'mis_search_shop requires 8 args'
    sys.exit(1)
  pp.pprint(client.mis_search_shop(args[0],args[1],args[2],eval(args[3]),eval(args[4]),eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'create_region':
  if len(args) != 1:
    print 'create_region requires 1 args'
    sys.exit(1)
  pp.pprint(client.create_region(eval(args[0]),))

elif cmd == 'query_region_type_map':
  if len(args) != 0:
    print 'query_region_type_map requires 0 args'
    sys.exit(1)
  pp.pprint(client.query_region_type_map())

elif cmd == 'query_region_open_type_map':
  if len(args) != 0:
    print 'query_region_open_type_map requires 0 args'
    sys.exit(1)
  pp.pprint(client.query_region_open_type_map())

elif cmd == 'get_shop_by_id':
  if len(args) != 1:
    print 'get_shop_by_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_shop_by_id(args[0],))

elif cmd == 'query_shop_category_path':
  if len(args) != 1:
    print 'query_shop_category_path requires 1 args'
    sys.exit(1)
  pp.pprint(client.query_shop_category_path(eval(args[0]),))

elif cmd == 'mis_edit_shop_region':
  if len(args) != 2:
    print 'mis_edit_shop_region requires 2 args'
    sys.exit(1)
  pp.pprint(client.mis_edit_shop_region(eval(args[0]),args[1],))

elif cmd == 'get_shop_by_qf_uid':
  if len(args) != 1:
    print 'get_shop_by_qf_uid requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_shop_by_qf_uid(eval(args[0]),))

elif cmd == 'get_region_by_id':
  if len(args) != 1:
    print 'get_region_by_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_region_by_id(args[0],))

elif cmd == 'search_shop_by_distance':
  if len(args) != 4:
    print 'search_shop_by_distance requires 4 args'
    sys.exit(1)
  pp.pprint(client.search_shop_by_distance(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
