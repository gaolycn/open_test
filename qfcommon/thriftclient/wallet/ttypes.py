#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class WITHDRAW_STATUS:
  CREATED = 0
  WITHDRAWING = 1
  WITHDRAW_PAID = 2
  WITHDRAW_FINISHED = 3
  WITHDRAW_FAILED = 4

  _VALUES_TO_NAMES = {
    0: "CREATED",
    1: "WITHDRAWING",
    2: "WITHDRAW_PAID",
    3: "WITHDRAW_FINISHED",
    4: "WITHDRAW_FAILED",
  }

  _NAMES_TO_VALUES = {
    "CREATED": 0,
    "WITHDRAWING": 1,
    "WITHDRAW_PAID": 2,
    "WITHDRAW_FINISHED": 3,
    "WITHDRAW_FAILED": 4,
  }

class ERRCODE:
  INNER_SERVICE_ERR = 5001
  OUT_SERVICE_ERR = 5002
  SYSTEM_MAINTAIN = 5003
  SYSTEM_ERROR = 5004
  AUTH_FAILED = 6000
  AUTHCODE_INVALID = 6001
  AUTHCODE_EXPIRED = 6002
  CARD_INFO_ERR = 6003
  BIZ_SN_ERR = 6004
  INSUFFICIENT_BALANCE = 6005
  AUTH_FAILED_TOO_TIMES = 6006
  WITHDRAW_ERROR = 6100
  WITHDRAW_TXAMT_TOO_SMALL = 6101
  WITHDRAW_TXAMT_TOO_BIG = 6102
  WITHDRAW_TIMES_TOO_MANY = 6103
  WITHDRAW_TIME_NOT_ALLOW = 6104
  WITHDRAW_TOTAL_OVERRUN = 6105

  _VALUES_TO_NAMES = {
    5001: "INNER_SERVICE_ERR",
    5002: "OUT_SERVICE_ERR",
    5003: "SYSTEM_MAINTAIN",
    5004: "SYSTEM_ERROR",
    6000: "AUTH_FAILED",
    6001: "AUTHCODE_INVALID",
    6002: "AUTHCODE_EXPIRED",
    6003: "CARD_INFO_ERR",
    6004: "BIZ_SN_ERR",
    6005: "INSUFFICIENT_BALANCE",
    6006: "AUTH_FAILED_TOO_TIMES",
    6100: "WITHDRAW_ERROR",
    6101: "WITHDRAW_TXAMT_TOO_SMALL",
    6102: "WITHDRAW_TXAMT_TOO_BIG",
    6103: "WITHDRAW_TIMES_TOO_MANY",
    6104: "WITHDRAW_TIME_NOT_ALLOW",
    6105: "WITHDRAW_TOTAL_OVERRUN",
  }

  _NAMES_TO_VALUES = {
    "INNER_SERVICE_ERR": 5001,
    "OUT_SERVICE_ERR": 5002,
    "SYSTEM_MAINTAIN": 5003,
    "SYSTEM_ERROR": 5004,
    "AUTH_FAILED": 6000,
    "AUTHCODE_INVALID": 6001,
    "AUTHCODE_EXPIRED": 6002,
    "CARD_INFO_ERR": 6003,
    "BIZ_SN_ERR": 6004,
    "INSUFFICIENT_BALANCE": 6005,
    "AUTH_FAILED_TOO_TIMES": 6006,
    "WITHDRAW_ERROR": 6100,
    "WITHDRAW_TXAMT_TOO_SMALL": 6101,
    "WITHDRAW_TXAMT_TOO_BIG": 6102,
    "WITHDRAW_TIMES_TOO_MANY": 6103,
    "WITHDRAW_TIME_NOT_ALLOW": 6104,
    "WITHDRAW_TOTAL_OVERRUN": 6105,
  }


class WalletError(Exception):
  """
  Attributes:
   - respcd
   - resperr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'resperr', None, None, ), # 2
  )

  def __init__(self, respcd=None, resperr=None,):
    self.respcd = respcd
    self.resperr = resperr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.respcd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resperr = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WalletError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I32, 1)
      oprot.writeI32(self.respcd)
      oprot.writeFieldEnd()
    if self.resperr is not None:
      oprot.writeFieldBegin('resperr', TType.STRING, 2)
      oprot.writeString(self.resperr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthReqArg:
  """
  Attributes:
   - userid
   - password
   - ttl
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'password', None, None, ), # 2
    (3, TType.I32, 'ttl', None, 60, ), # 3
  )

  def __init__(self, userid=None, password=None, ttl=thrift_spec[3][4],):
    self.userid = userid
    self.password = password
    self.ttl = ttl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ttl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthReqArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 2)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I32, 3)
      oprot.writeI32(self.ttl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthReqRet:
  """
  Attributes:
   - userid
   - auth_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'auth_code', None, None, ), # 2
  )

  def __init__(self, userid=None, auth_code=None,):
    self.userid = userid
    self.auth_code = auth_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.auth_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthReqRet')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.auth_code is not None:
      oprot.writeFieldBegin('auth_code', TType.STRING, 2)
      oprot.writeString(self.auth_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceArg:
  """
  Attributes:
   - userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
  )

  def __init__(self, userid=None,):
    self.userid = userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceRet:
  """
  Attributes:
   - userid
   - txamt
   - txcurrcd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'txamt', None, None, ), # 2
    (3, TType.STRING, 'txcurrcd', None, "156", ), # 3
  )

  def __init__(self, userid=None, txamt=None, txcurrcd=thrift_spec[3][4],):
    self.userid = userid
    self.txamt = txamt
    self.txcurrcd = txcurrcd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceRet')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I64, 2)
      oprot.writeI64(self.txamt)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 3)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.txcurrcd is None:
      raise TProtocol.TProtocolException(message='Required field txcurrcd is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawArg:
  """
  Attributes:
   - userid
   - txamt
   - auth_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I32, 'txamt', None, None, ), # 2
    (3, TType.STRING, 'auth_code', None, None, ), # 3
  )

  def __init__(self, userid=None, txamt=None, auth_code=None,):
    self.userid = userid
    self.txamt = txamt
    self.auth_code = auth_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.txamt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.auth_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawArg')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 2)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.auth_code is not None:
      oprot.writeFieldBegin('auth_code', TType.STRING, 3)
      oprot.writeString(self.auth_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.auth_code is None:
      raise TProtocol.TProtocolException(message='Required field auth_code is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawRet:
  """
  Attributes:
   - userid
   - txamt
   - biz_sn
   - finance_sn
   - status
   - create_sysdtm
   - finish_sysdtm
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'txamt', None, None, ), # 3
    (4, TType.STRING, 'biz_sn', None, None, ), # 4
    (5, TType.STRING, 'finance_sn', None, None, ), # 5
    (6, TType.I16, 'status', None, None, ), # 6
    (7, TType.STRING, 'create_sysdtm', None, None, ), # 7
    (8, TType.STRING, 'finish_sysdtm', None, None, ), # 8
  )

  def __init__(self, userid=None, txamt=None, biz_sn=None, finance_sn=None, status=None, create_sysdtm=None, finish_sysdtm=None,):
    self.userid = userid
    self.txamt = txamt
    self.biz_sn = biz_sn
    self.finance_sn = finance_sn
    self.status = status
    self.create_sysdtm = create_sysdtm
    self.finish_sysdtm = finish_sysdtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.txamt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.finance_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.create_sysdtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.finish_sysdtm = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawRet')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 3)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 4)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.finance_sn is not None:
      oprot.writeFieldBegin('finance_sn', TType.STRING, 5)
      oprot.writeString(self.finance_sn)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 6)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.create_sysdtm is not None:
      oprot.writeFieldBegin('create_sysdtm', TType.STRING, 7)
      oprot.writeString(self.create_sysdtm)
      oprot.writeFieldEnd()
    if self.finish_sysdtm is not None:
      oprot.writeFieldBegin('finish_sysdtm', TType.STRING, 8)
      oprot.writeString(self.finish_sysdtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithdrawStatusNotifyArg:
  """
  Attributes:
   - biz_sn
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'biz_sn', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
  )

  def __init__(self, biz_sn=None, status=None,):
    self.biz_sn = biz_sn
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithdrawStatusNotifyArg')
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 1)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
