#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Encryptor
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  OrgKeys qf_gen_org_key(string zmk)'
  print '  ChanpayKeys qf_decode_chanpay_keys(string tmk, string tdk, string mackey, string pinkey, string zmk)'
  print '  EncryptorRet qf_mac_generate(string input, string mackey, string bankid, string psamid, string random)'
  print '  EncryptorRet qf_mac_gen_tl(string input, string mackey, string zmk)'
  print '  EncryptorRet qf_mac_gen_hy(string input, string mackey, string zmk)'
  print '  EncryptorRet qf_mac_gen_yibao(string input, string mackey, string zmk)'
  print '  TrackRet qf_track_encryptor(string track2, string track3, string tdk, string zmk)'
  print '  CardIET qf_cardiet_get(string input, string pinkey, string bankid, string psamid, string random)'
  print '  EncryptorRet qf_card_enc(string input, string pinkey, string bankid, string psamid, string random)'
  print '  EncryptorRet qf_pin_exchange(string input, string pinkey, string bankid, string psamid, string random, string dzmk, string dzpk, string cardno)'
  print '  EncryptorRet qf_pin_exchange_org(string input, string szpk, string dzmk, string dzpk, string cardno)'
  print '  TckRet qf_tck_generate(string passkey, string tckkey, string diskey, string fackey, string tid)'
  print '  SignRet qf_pri_sign(string abs)'
  print '  GenkeyRet qf_gen_keys(string mackey, string pinkey, string tck)'
  print '  RetTransferKey qf_get_tsk(string enckey)'
  print '  RetClientSign qf_dec_sign(string pubenc)'
  print '  PinResult qf_pin_encrypt(string input, string pinkey, string bandid, string psamid, string random, string cardcd)'
  print '  Env qf_gen_env(string diskey, string fackey, string tid, string qpos_pubkey)'
  print '  TokenRet qf_dec_token(string cardno, string key)'
  print '  TokenRet qf_enc_token(string cardno, string key)'
  print '  PinkeyRet qf_get_pinkey(string tsk)'
  print '  CardIET qf_dec_cardiet(string input, string pinkey, string bankid, string psamid, string random)'
  print '  TokenRet qf_enc_cardno(string cardno, string key)'
  print '  TokenRet qf_dec_cardno(string cardno, string key)'
  print '  OrgTrackData qf_zek_de(string zek, string trackdata, i32 de_flag)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Encryptor.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'qf_gen_org_key':
  if len(args) != 1:
    print 'qf_gen_org_key requires 1 args'
    sys.exit(1)
  pp.pprint(client.qf_gen_org_key(args[0],))

elif cmd == 'qf_decode_chanpay_keys':
  if len(args) != 5:
    print 'qf_decode_chanpay_keys requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_decode_chanpay_keys(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_mac_generate':
  if len(args) != 5:
    print 'qf_mac_generate requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_mac_generate(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_mac_gen_tl':
  if len(args) != 3:
    print 'qf_mac_gen_tl requires 3 args'
    sys.exit(1)
  pp.pprint(client.qf_mac_gen_tl(args[0],args[1],args[2],))

elif cmd == 'qf_mac_gen_hy':
  if len(args) != 3:
    print 'qf_mac_gen_hy requires 3 args'
    sys.exit(1)
  pp.pprint(client.qf_mac_gen_hy(args[0],args[1],args[2],))

elif cmd == 'qf_mac_gen_yibao':
  if len(args) != 3:
    print 'qf_mac_gen_yibao requires 3 args'
    sys.exit(1)
  pp.pprint(client.qf_mac_gen_yibao(args[0],args[1],args[2],))

elif cmd == 'qf_track_encryptor':
  if len(args) != 4:
    print 'qf_track_encryptor requires 4 args'
    sys.exit(1)
  pp.pprint(client.qf_track_encryptor(args[0],args[1],args[2],args[3],))

elif cmd == 'qf_cardiet_get':
  if len(args) != 5:
    print 'qf_cardiet_get requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_cardiet_get(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_card_enc':
  if len(args) != 5:
    print 'qf_card_enc requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_card_enc(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_pin_exchange':
  if len(args) != 8:
    print 'qf_pin_exchange requires 8 args'
    sys.exit(1)
  pp.pprint(client.qf_pin_exchange(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],))

elif cmd == 'qf_pin_exchange_org':
  if len(args) != 5:
    print 'qf_pin_exchange_org requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_pin_exchange_org(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_tck_generate':
  if len(args) != 5:
    print 'qf_tck_generate requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_tck_generate(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_pri_sign':
  if len(args) != 1:
    print 'qf_pri_sign requires 1 args'
    sys.exit(1)
  pp.pprint(client.qf_pri_sign(args[0],))

elif cmd == 'qf_gen_keys':
  if len(args) != 3:
    print 'qf_gen_keys requires 3 args'
    sys.exit(1)
  pp.pprint(client.qf_gen_keys(args[0],args[1],args[2],))

elif cmd == 'qf_get_tsk':
  if len(args) != 1:
    print 'qf_get_tsk requires 1 args'
    sys.exit(1)
  pp.pprint(client.qf_get_tsk(args[0],))

elif cmd == 'qf_dec_sign':
  if len(args) != 1:
    print 'qf_dec_sign requires 1 args'
    sys.exit(1)
  pp.pprint(client.qf_dec_sign(args[0],))

elif cmd == 'qf_pin_encrypt':
  if len(args) != 6:
    print 'qf_pin_encrypt requires 6 args'
    sys.exit(1)
  pp.pprint(client.qf_pin_encrypt(args[0],args[1],args[2],args[3],args[4],args[5],))

elif cmd == 'qf_gen_env':
  if len(args) != 4:
    print 'qf_gen_env requires 4 args'
    sys.exit(1)
  pp.pprint(client.qf_gen_env(args[0],args[1],args[2],args[3],))

elif cmd == 'qf_dec_token':
  if len(args) != 2:
    print 'qf_dec_token requires 2 args'
    sys.exit(1)
  pp.pprint(client.qf_dec_token(args[0],args[1],))

elif cmd == 'qf_enc_token':
  if len(args) != 2:
    print 'qf_enc_token requires 2 args'
    sys.exit(1)
  pp.pprint(client.qf_enc_token(args[0],args[1],))

elif cmd == 'qf_get_pinkey':
  if len(args) != 1:
    print 'qf_get_pinkey requires 1 args'
    sys.exit(1)
  pp.pprint(client.qf_get_pinkey(args[0],))

elif cmd == 'qf_dec_cardiet':
  if len(args) != 5:
    print 'qf_dec_cardiet requires 5 args'
    sys.exit(1)
  pp.pprint(client.qf_dec_cardiet(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'qf_enc_cardno':
  if len(args) != 2:
    print 'qf_enc_cardno requires 2 args'
    sys.exit(1)
  pp.pprint(client.qf_enc_cardno(args[0],args[1],))

elif cmd == 'qf_dec_cardno':
  if len(args) != 2:
    print 'qf_dec_cardno requires 2 args'
    sys.exit(1)
  pp.pprint(client.qf_dec_cardno(args[0],args[1],))

elif cmd == 'qf_zek_de':
  if len(args) != 3:
    print 'qf_zek_de requires 3 args'
    sys.exit(1)
  pp.pprint(client.qf_zek_de(args[0],args[1],eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
