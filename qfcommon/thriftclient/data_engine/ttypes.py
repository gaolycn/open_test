#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Geo:
  """
  Attributes:
   - latitude
   - longitude
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'latitude', None, None, ), # 1
    (2, TType.DOUBLE, 'longitude', None, None, ), # 2
  )

  def __init__(self, latitude=None, longitude=None,):
    self.latitude = latitude
    self.longitude = longitude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Geo')
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.latitude is None:
      raise TProtocol.TProtocolException(message='Required field latitude is unset!')
    if self.longitude is None:
      raise TProtocol.TProtocolException(message='Required field longitude is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Trade:
  """
  Attributes:
   - userid
   - busicd
   - sysdtm
   - syssn
   - txamt
   - cardcd
   - cardtp
   - location
   - terminalid
   - payresp
   - hited
   - rejected
   - riskret
   - origssn
   - tocardtp
   - chnlid
   - groupid
   - app_mode
   - card_class
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRING, 'busicd', None, None, ), # 2
    (3, TType.I32, 'sysdtm', None, None, ), # 3
    (4, TType.STRING, 'syssn', None, None, ), # 4
    (5, TType.I32, 'txamt', None, None, ), # 5
    (6, TType.STRING, 'cardcd', None, None, ), # 6
    (7, TType.I16, 'cardtp', None, None, ), # 7
    (8, TType.STRUCT, 'location', (Geo, Geo.thrift_spec), None, ), # 8
    (9, TType.STRING, 'terminalid', None, None, ), # 9
    (10, TType.STRING, 'payresp', None, None, ), # 10
    (11, TType.STRING, 'hited', None, None, ), # 11
    (12, TType.STRING, 'rejected', None, None, ), # 12
    (13, TType.STRING, 'riskret', None, None, ), # 13
    (14, TType.STRING, 'origssn', None, None, ), # 14
    (15, TType.I16, 'tocardtp', None, None, ), # 15
    (16, TType.STRING, 'chnlid', None, None, ), # 16
    (17, TType.I32, 'groupid', None, None, ), # 17
    (18, TType.STRING, 'app_mode', None, None, ), # 18
    (19, TType.I16, 'card_class', None, None, ), # 19
  )

  def __init__(self, userid=None, busicd=None, sysdtm=None, syssn=None, txamt=None, cardcd=None, cardtp=None, location=None, terminalid=None, payresp=None, hited=None, rejected=None, riskret=None, origssn=None, tocardtp=None, chnlid=None, groupid=None, app_mode=None, card_class=None,):
    self.userid = userid
    self.busicd = busicd
    self.sysdtm = sysdtm
    self.syssn = syssn
    self.txamt = txamt
    self.cardcd = cardcd
    self.cardtp = cardtp
    self.location = location
    self.terminalid = terminalid
    self.payresp = payresp
    self.hited = hited
    self.rejected = rejected
    self.riskret = riskret
    self.origssn = origssn
    self.tocardtp = tocardtp
    self.chnlid = chnlid
    self.groupid = groupid
    self.app_mode = app_mode
    self.card_class = card_class

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.busicd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.syssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.txamt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cardcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.cardtp = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.location = Geo()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.terminalid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.payresp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.hited = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.rejected = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.riskret = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.origssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.tocardtp = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.chnlid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.groupid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.app_mode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I16:
          self.card_class = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trade')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 2)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 3)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 4)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 5)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.cardcd is not None:
      oprot.writeFieldBegin('cardcd', TType.STRING, 6)
      oprot.writeString(self.cardcd)
      oprot.writeFieldEnd()
    if self.cardtp is not None:
      oprot.writeFieldBegin('cardtp', TType.I16, 7)
      oprot.writeI16(self.cardtp)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 8)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.terminalid is not None:
      oprot.writeFieldBegin('terminalid', TType.STRING, 9)
      oprot.writeString(self.terminalid)
      oprot.writeFieldEnd()
    if self.payresp is not None:
      oprot.writeFieldBegin('payresp', TType.STRING, 10)
      oprot.writeString(self.payresp)
      oprot.writeFieldEnd()
    if self.hited is not None:
      oprot.writeFieldBegin('hited', TType.STRING, 11)
      oprot.writeString(self.hited)
      oprot.writeFieldEnd()
    if self.rejected is not None:
      oprot.writeFieldBegin('rejected', TType.STRING, 12)
      oprot.writeString(self.rejected)
      oprot.writeFieldEnd()
    if self.riskret is not None:
      oprot.writeFieldBegin('riskret', TType.STRING, 13)
      oprot.writeString(self.riskret)
      oprot.writeFieldEnd()
    if self.origssn is not None:
      oprot.writeFieldBegin('origssn', TType.STRING, 14)
      oprot.writeString(self.origssn)
      oprot.writeFieldEnd()
    if self.tocardtp is not None:
      oprot.writeFieldBegin('tocardtp', TType.I16, 15)
      oprot.writeI16(self.tocardtp)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.STRING, 16)
      oprot.writeString(self.chnlid)
      oprot.writeFieldEnd()
    if self.groupid is not None:
      oprot.writeFieldBegin('groupid', TType.I32, 17)
      oprot.writeI32(self.groupid)
      oprot.writeFieldEnd()
    if self.app_mode is not None:
      oprot.writeFieldBegin('app_mode', TType.STRING, 18)
      oprot.writeString(self.app_mode)
      oprot.writeFieldEnd()
    if self.card_class is not None:
      oprot.writeFieldBegin('card_class', TType.I16, 19)
      oprot.writeI16(self.card_class)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.busicd is None:
      raise TProtocol.TProtocolException(message='Required field busicd is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.cardcd is None:
      raise TProtocol.TProtocolException(message='Required field cardcd is unset!')
    if self.cardtp is None:
      raise TProtocol.TProtocolException(message='Required field cardtp is unset!')
    if self.location is None:
      raise TProtocol.TProtocolException(message='Required field location is unset!')
    if self.terminalid is None:
      raise TProtocol.TProtocolException(message='Required field terminalid is unset!')
    if self.payresp is None:
      raise TProtocol.TProtocolException(message='Required field payresp is unset!')
    if self.card_class is None:
      raise TProtocol.TProtocolException(message='Required field card_class is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Login:
  """
  Attributes:
   - userid
   - location
   - sysdtm
   - clidtm
   - payresp
   - hited
   - rejected
   - riskret
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRUCT, 'location', (Geo, Geo.thrift_spec), None, ), # 2
    (3, TType.I32, 'sysdtm', None, None, ), # 3
    (4, TType.I32, 'clidtm', None, None, ), # 4
    (5, TType.STRING, 'payresp', None, None, ), # 5
    (6, TType.STRING, 'hited', None, None, ), # 6
    (7, TType.STRING, 'rejected', None, None, ), # 7
    (8, TType.STRING, 'riskret', None, None, ), # 8
  )

  def __init__(self, userid=None, location=None, sysdtm=None, clidtm=None, payresp=None, hited=None, rejected=None, riskret=None,):
    self.userid = userid
    self.location = location
    self.sysdtm = sysdtm
    self.clidtm = clidtm
    self.payresp = payresp
    self.hited = hited
    self.rejected = rejected
    self.riskret = riskret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.location = Geo()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.clidtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.payresp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.hited = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.rejected = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.riskret = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Login')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 2)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 3)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.clidtm is not None:
      oprot.writeFieldBegin('clidtm', TType.I32, 4)
      oprot.writeI32(self.clidtm)
      oprot.writeFieldEnd()
    if self.payresp is not None:
      oprot.writeFieldBegin('payresp', TType.STRING, 5)
      oprot.writeString(self.payresp)
      oprot.writeFieldEnd()
    if self.hited is not None:
      oprot.writeFieldBegin('hited', TType.STRING, 6)
      oprot.writeString(self.hited)
      oprot.writeFieldEnd()
    if self.rejected is not None:
      oprot.writeFieldBegin('rejected', TType.STRING, 7)
      oprot.writeString(self.rejected)
      oprot.writeFieldEnd()
    if self.riskret is not None:
      oprot.writeFieldBegin('riskret', TType.STRING, 8)
      oprot.writeString(self.riskret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.location is None:
      raise TProtocol.TProtocolException(message='Required field location is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    if self.clidtm is None:
      raise TProtocol.TProtocolException(message='Required field clidtm is unset!')
    if self.payresp is None:
      raise TProtocol.TProtocolException(message='Required field payresp is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tuple:
  """
  Attributes:
   - cnt
   - amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cnt', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
  )

  def __init__(self, cnt=None, amt=None,):
    self.cnt = cnt
    self.amt = amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cnt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tuple')
    if self.cnt is not None:
      oprot.writeFieldBegin('cnt', TType.I32, 1)
      oprot.writeI32(self.cnt)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cnt is None:
      raise TProtocol.TProtocolException(message='Required field cnt is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Limit:
  """
  Attributes:
   - day
   - week
   - month
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'day', (Tuple, Tuple.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'week', (Tuple, Tuple.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'month', (Tuple, Tuple.thrift_spec), None, ), # 3
  )

  def __init__(self, day=None, week=None, month=None,):
    self.day = day
    self.week = week
    self.month = month

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.day = Tuple()
          self.day.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.week = Tuple()
          self.week.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.month = Tuple()
          self.month.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Limit')
    if self.day is not None:
      oprot.writeFieldBegin('day', TType.STRUCT, 1)
      self.day.write(oprot)
      oprot.writeFieldEnd()
    if self.week is not None:
      oprot.writeFieldBegin('week', TType.STRUCT, 2)
      self.week.write(oprot)
      oprot.writeFieldEnd()
    if self.month is not None:
      oprot.writeFieldBegin('month', TType.STRUCT, 3)
      self.month.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.day is None:
      raise TProtocol.TProtocolException(message='Required field day is unset!')
    if self.week is None:
      raise TProtocol.TProtocolException(message='Required field week is unset!')
    if self.month is None:
      raise TProtocol.TProtocolException(message='Required field month is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserParam:
  """
  Attributes:
   - userid
   - rcv_total
   - rcv_credit
   - day_rcv_credit_ratio
   - week_rcv_credit_ratio
   - month_rcv_redit_ratio
   - pay_debit
   - pay_credit
   - amt_per_debit
   - amt_per_credit
   - location
   - tocard_per_amt
   - business_start_time
   - business_end_time
   - use_tmp_param
   - rcv_alipay
   - alipay_timegap
   - amt_per_alipay
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRUCT, 'rcv_total', (Limit, Limit.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'rcv_credit', (Limit, Limit.thrift_spec), None, ), # 3
    (4, TType.DOUBLE, 'day_rcv_credit_ratio', None, None, ), # 4
    (5, TType.DOUBLE, 'week_rcv_credit_ratio', None, None, ), # 5
    (6, TType.DOUBLE, 'month_rcv_redit_ratio', None, None, ), # 6
    (7, TType.STRUCT, 'pay_debit', (Limit, Limit.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'pay_credit', (Limit, Limit.thrift_spec), None, ), # 8
    (9, TType.I32, 'amt_per_debit', None, None, ), # 9
    (10, TType.I32, 'amt_per_credit', None, None, ), # 10
    (11, TType.STRUCT, 'location', (Geo, Geo.thrift_spec), None, ), # 11
    (12, TType.I32, 'tocard_per_amt', None, None, ), # 12
    (13, TType.I32, 'business_start_time', None, None, ), # 13
    (14, TType.I32, 'business_end_time', None, None, ), # 14
    (15, TType.I32, 'use_tmp_param', None, None, ), # 15
    (16, TType.STRUCT, 'rcv_alipay', (Limit, Limit.thrift_spec), None, ), # 16
    (17, TType.STRING, 'alipay_timegap', None, None, ), # 17
    (18, TType.I32, 'amt_per_alipay', None, None, ), # 18
  )

  def __init__(self, userid=None, rcv_total=None, rcv_credit=None, day_rcv_credit_ratio=None, week_rcv_credit_ratio=None, month_rcv_redit_ratio=None, pay_debit=None, pay_credit=None, amt_per_debit=None, amt_per_credit=None, location=None, tocard_per_amt=None, business_start_time=None, business_end_time=None, use_tmp_param=None, rcv_alipay=None, alipay_timegap=None, amt_per_alipay=None,):
    self.userid = userid
    self.rcv_total = rcv_total
    self.rcv_credit = rcv_credit
    self.day_rcv_credit_ratio = day_rcv_credit_ratio
    self.week_rcv_credit_ratio = week_rcv_credit_ratio
    self.month_rcv_redit_ratio = month_rcv_redit_ratio
    self.pay_debit = pay_debit
    self.pay_credit = pay_credit
    self.amt_per_debit = amt_per_debit
    self.amt_per_credit = amt_per_credit
    self.location = location
    self.tocard_per_amt = tocard_per_amt
    self.business_start_time = business_start_time
    self.business_end_time = business_end_time
    self.use_tmp_param = use_tmp_param
    self.rcv_alipay = rcv_alipay
    self.alipay_timegap = alipay_timegap
    self.amt_per_alipay = amt_per_alipay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.rcv_total = Limit()
          self.rcv_total.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rcv_credit = Limit()
          self.rcv_credit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.day_rcv_credit_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.week_rcv_credit_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.month_rcv_redit_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.pay_debit = Limit()
          self.pay_debit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.pay_credit = Limit()
          self.pay_credit.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.amt_per_debit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.amt_per_credit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.location = Geo()
          self.location.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.tocard_per_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.business_start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.business_end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.use_tmp_param = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.rcv_alipay = Limit()
          self.rcv_alipay.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.alipay_timegap = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.amt_per_alipay = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserParam')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.rcv_total is not None:
      oprot.writeFieldBegin('rcv_total', TType.STRUCT, 2)
      self.rcv_total.write(oprot)
      oprot.writeFieldEnd()
    if self.rcv_credit is not None:
      oprot.writeFieldBegin('rcv_credit', TType.STRUCT, 3)
      self.rcv_credit.write(oprot)
      oprot.writeFieldEnd()
    if self.day_rcv_credit_ratio is not None:
      oprot.writeFieldBegin('day_rcv_credit_ratio', TType.DOUBLE, 4)
      oprot.writeDouble(self.day_rcv_credit_ratio)
      oprot.writeFieldEnd()
    if self.week_rcv_credit_ratio is not None:
      oprot.writeFieldBegin('week_rcv_credit_ratio', TType.DOUBLE, 5)
      oprot.writeDouble(self.week_rcv_credit_ratio)
      oprot.writeFieldEnd()
    if self.month_rcv_redit_ratio is not None:
      oprot.writeFieldBegin('month_rcv_redit_ratio', TType.DOUBLE, 6)
      oprot.writeDouble(self.month_rcv_redit_ratio)
      oprot.writeFieldEnd()
    if self.pay_debit is not None:
      oprot.writeFieldBegin('pay_debit', TType.STRUCT, 7)
      self.pay_debit.write(oprot)
      oprot.writeFieldEnd()
    if self.pay_credit is not None:
      oprot.writeFieldBegin('pay_credit', TType.STRUCT, 8)
      self.pay_credit.write(oprot)
      oprot.writeFieldEnd()
    if self.amt_per_debit is not None:
      oprot.writeFieldBegin('amt_per_debit', TType.I32, 9)
      oprot.writeI32(self.amt_per_debit)
      oprot.writeFieldEnd()
    if self.amt_per_credit is not None:
      oprot.writeFieldBegin('amt_per_credit', TType.I32, 10)
      oprot.writeI32(self.amt_per_credit)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.STRUCT, 11)
      self.location.write(oprot)
      oprot.writeFieldEnd()
    if self.tocard_per_amt is not None:
      oprot.writeFieldBegin('tocard_per_amt', TType.I32, 12)
      oprot.writeI32(self.tocard_per_amt)
      oprot.writeFieldEnd()
    if self.business_start_time is not None:
      oprot.writeFieldBegin('business_start_time', TType.I32, 13)
      oprot.writeI32(self.business_start_time)
      oprot.writeFieldEnd()
    if self.business_end_time is not None:
      oprot.writeFieldBegin('business_end_time', TType.I32, 14)
      oprot.writeI32(self.business_end_time)
      oprot.writeFieldEnd()
    if self.use_tmp_param is not None:
      oprot.writeFieldBegin('use_tmp_param', TType.I32, 15)
      oprot.writeI32(self.use_tmp_param)
      oprot.writeFieldEnd()
    if self.rcv_alipay is not None:
      oprot.writeFieldBegin('rcv_alipay', TType.STRUCT, 16)
      self.rcv_alipay.write(oprot)
      oprot.writeFieldEnd()
    if self.alipay_timegap is not None:
      oprot.writeFieldBegin('alipay_timegap', TType.STRING, 17)
      oprot.writeString(self.alipay_timegap)
      oprot.writeFieldEnd()
    if self.amt_per_alipay is not None:
      oprot.writeFieldBegin('amt_per_alipay', TType.I32, 18)
      oprot.writeI32(self.amt_per_alipay)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.rcv_total is None:
      raise TProtocol.TProtocolException(message='Required field rcv_total is unset!')
    if self.rcv_credit is None:
      raise TProtocol.TProtocolException(message='Required field rcv_credit is unset!')
    if self.day_rcv_credit_ratio is None:
      raise TProtocol.TProtocolException(message='Required field day_rcv_credit_ratio is unset!')
    if self.week_rcv_credit_ratio is None:
      raise TProtocol.TProtocolException(message='Required field week_rcv_credit_ratio is unset!')
    if self.month_rcv_redit_ratio is None:
      raise TProtocol.TProtocolException(message='Required field month_rcv_redit_ratio is unset!')
    if self.pay_debit is None:
      raise TProtocol.TProtocolException(message='Required field pay_debit is unset!')
    if self.pay_credit is None:
      raise TProtocol.TProtocolException(message='Required field pay_credit is unset!')
    if self.amt_per_debit is None:
      raise TProtocol.TProtocolException(message='Required field amt_per_debit is unset!')
    if self.amt_per_credit is None:
      raise TProtocol.TProtocolException(message='Required field amt_per_credit is unset!')
    if self.location is None:
      raise TProtocol.TProtocolException(message='Required field location is unset!')
    if self.tocard_per_amt is None:
      raise TProtocol.TProtocolException(message='Required field tocard_per_amt is unset!')
    if self.business_start_time is None:
      raise TProtocol.TProtocolException(message='Required field business_start_time is unset!')
    if self.business_end_time is None:
      raise TProtocol.TProtocolException(message='Required field business_end_time is unset!')
    if self.use_tmp_param is None:
      raise TProtocol.TProtocolException(message='Required field use_tmp_param is unset!')
    if self.rcv_alipay is None:
      raise TProtocol.TProtocolException(message='Required field rcv_alipay is unset!')
    if self.alipay_timegap is None:
      raise TProtocol.TProtocolException(message='Required field alipay_timegap is unset!')
    if self.amt_per_alipay is None:
      raise TProtocol.TProtocolException(message='Required field amt_per_alipay is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRecords:
  """
  Attributes:
   - userid
   - cardcd
   - user_trades
   - card_trades
   - userparam
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.STRING, 'cardcd', None, None, ), # 2
    (3, TType.LIST, 'user_trades', (TType.STRUCT,(Trade, Trade.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'card_trades', (TType.STRUCT,(Trade, Trade.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'userparam', (UserParam, UserParam.thrift_spec), None, ), # 5
    (6, TType.I32, 'api_ret', None, None, ), # 6
  )

  def __init__(self, userid=None, cardcd=None, user_trades=None, card_trades=None, userparam=None, api_ret=None,):
    self.userid = userid
    self.cardcd = cardcd
    self.user_trades = user_trades
    self.card_trades = card_trades
    self.userparam = userparam
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.cardcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.user_trades = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Trade()
            _elem5.read(iprot)
            self.user_trades.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.card_trades = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = Trade()
            _elem11.read(iprot)
            self.card_trades.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.userparam = UserParam()
          self.userparam.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRecords')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.cardcd is not None:
      oprot.writeFieldBegin('cardcd', TType.STRING, 2)
      oprot.writeString(self.cardcd)
      oprot.writeFieldEnd()
    if self.user_trades is not None:
      oprot.writeFieldBegin('user_trades', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.user_trades))
      for iter12 in self.user_trades:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.card_trades is not None:
      oprot.writeFieldBegin('card_trades', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.card_trades))
      for iter13 in self.card_trades:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userparam is not None:
      oprot.writeFieldBegin('userparam', TType.STRUCT, 5)
      self.userparam.write(oprot)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 6)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.cardcd is None:
      raise TProtocol.TProtocolException(message='Required field cardcd is unset!')
    if self.user_trades is None:
      raise TProtocol.TProtocolException(message='Required field user_trades is unset!')
    if self.card_trades is None:
      raise TProtocol.TProtocolException(message='Required field card_trades is unset!')
    if self.userparam is None:
      raise TProtocol.TProtocolException(message='Required field userparam is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LoginRecords:
  """
  Attributes:
   - userid
   - logins
   - userparam
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.LIST, 'logins', (TType.STRUCT,(Login, Login.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'userparam', (UserParam, UserParam.thrift_spec), None, ), # 3
    (4, TType.I32, 'api_ret', None, None, ), # 4
  )

  def __init__(self, userid=None, logins=None, userparam=None, api_ret=None,):
    self.userid = userid
    self.logins = logins
    self.userparam = userparam
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.logins = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = Login()
            _elem19.read(iprot)
            self.logins.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.userparam = UserParam()
          self.userparam.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LoginRecords')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.logins is not None:
      oprot.writeFieldBegin('logins', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.logins))
      for iter20 in self.logins:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userparam is not None:
      oprot.writeFieldBegin('userparam', TType.STRUCT, 3)
      self.userparam.write(oprot)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 4)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.logins is None:
      raise TProtocol.TProtocolException(message='Required field logins is unset!')
    if self.userparam is None:
      raise TProtocol.TProtocolException(message='Required field userparam is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserStatus:
  """
  Attributes:
   - userid
   - type
   - start_time
   - end_time
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'userid', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'start_time', None, 0, ), # 3
    (4, TType.I32, 'end_time', None, 0, ), # 4
    (5, TType.I32, 'api_ret', None, None, ), # 5
  )

  def __init__(self, userid=None, type=None, start_time=thrift_spec[3][4], end_time=thrift_spec[4][4], api_ret=None,):
    self.userid = userid
    self.type = type
    self.start_time = start_time
    self.end_time = end_time
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.userid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserStatus')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I32, 1)
      oprot.writeI32(self.userid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 3)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 5)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardStatus:
  """
  Attributes:
   - cardcd
   - type
   - start_time
   - end_time
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cardcd', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'start_time', None, 0, ), # 3
    (4, TType.I32, 'end_time', None, 0, ), # 4
    (5, TType.I32, 'api_ret', None, None, ), # 5
  )

  def __init__(self, cardcd=None, type=None, start_time=thrift_spec[3][4], end_time=thrift_spec[4][4], api_ret=None,):
    self.cardcd = cardcd
    self.type = type
    self.start_time = start_time
    self.end_time = end_time
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cardcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardStatus')
    if self.cardcd is not None:
      oprot.writeFieldBegin('cardcd', TType.STRING, 1)
      oprot.writeString(self.cardcd)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 3)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 5)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cardcd is None:
      raise TProtocol.TProtocolException(message='Required field cardcd is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskStatus:
  """
  Attributes:
   - type
   - start_time
   - end_time
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I32, 'start_time', None, 0, ), # 2
    (3, TType.I32, 'end_time', None, 0, ), # 3
    (4, TType.I32, 'api_ret', None, None, ), # 4
  )

  def __init__(self, type=None, start_time=thrift_spec[2][4], end_time=thrift_spec[3][4], api_ret=None,):
    self.type = type
    self.start_time = start_time
    self.end_time = end_time
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskStatus')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 2)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 3)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 4)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ParamList:
  """
  Attributes:
   - param
   - flag
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'param', (TType.STRING,None,TType.STRING,None), None, ), # 1
    (2, TType.I32, 'flag', None, None, ), # 2
    (3, TType.I32, 'api_ret', None, None, ), # 3
  )

  def __init__(self, param=None, flag=None, api_ret=None,):
    self.param = param
    self.flag = flag
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.param = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin() 
          for _i25 in xrange(_size21):
            _key26 = iprot.readString();
            _val27 = iprot.readString();
            self.param[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ParamList')
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.param))
      for kiter28,viter29 in self.param.items():
        oprot.writeString(kiter28)
        oprot.writeString(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.flag is not None:
      oprot.writeFieldBegin('flag', TType.I32, 2)
      oprot.writeI32(self.flag)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 3)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.param is None:
      raise TProtocol.TProtocolException(message='Required field param is unset!')
    if self.flag is None:
      raise TProtocol.TProtocolException(message='Required field flag is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskParamItem:
  """
  Attributes:
   - key
   - status
   - param_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'key', None, None, ), # 1
    (2, TType.STRUCT, 'status', (RiskStatus, RiskStatus.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'param_list', (ParamList, ParamList.thrift_spec), None, ), # 3
  )

  def __init__(self, key=None, status=None, param_list=None,):
    self.key = key
    self.status = status
    self.param_list = param_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.status = RiskStatus()
          self.status.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.param_list = ParamList()
          self.param_list.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskParamItem')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 1)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRUCT, 2)
      self.status.write(oprot)
      oprot.writeFieldEnd()
    if self.param_list is not None:
      oprot.writeFieldBegin('param_list', TType.STRUCT, 3)
      self.param_list.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.key is None:
      raise TProtocol.TProtocolException(message='Required field key is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.param_list is None:
      raise TProtocol.TProtocolException(message='Required field param_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RiskParam:
  """
  Attributes:
   - card_param
   - user_param
   - api_ret
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'card_param', (RiskParamItem, RiskParamItem.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'user_param', (RiskParamItem, RiskParamItem.thrift_spec), None, ), # 2
    (3, TType.I32, 'api_ret', None, None, ), # 3
  )

  def __init__(self, card_param=None, user_param=None, api_ret=None,):
    self.card_param = card_param
    self.user_param = user_param
    self.api_ret = api_ret

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.card_param = RiskParamItem()
          self.card_param.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user_param = RiskParamItem()
          self.user_param.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.api_ret = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RiskParam')
    if self.card_param is not None:
      oprot.writeFieldBegin('card_param', TType.STRUCT, 1)
      self.card_param.write(oprot)
      oprot.writeFieldEnd()
    if self.user_param is not None:
      oprot.writeFieldBegin('user_param', TType.STRUCT, 2)
      self.user_param.write(oprot)
      oprot.writeFieldEnd()
    if self.api_ret is not None:
      oprot.writeFieldBegin('api_ret', TType.I32, 3)
      oprot.writeI32(self.api_ret)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.card_param is None:
      raise TProtocol.TProtocolException(message='Required field card_param is unset!')
    if self.user_param is None:
      raise TProtocol.TProtocolException(message='Required field user_param is unset!')
    if self.api_ret is None:
      raise TProtocol.TProtocolException(message='Required field api_ret is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
