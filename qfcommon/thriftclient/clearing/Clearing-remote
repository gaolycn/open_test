#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from clearing import Clearing
from clearing.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  ReturnMsg clearing_by_bat_id(i64 check_bat_id)'
  print '  ReturnMsg clearing_by_error_bat_id(i64 error_bat_id)'
  print '  ReturnMsg clearing_to_account_by_bat_id(i64 settle_bat_id)'
  print '  ReturnMsg set_audit_result(i64 settle_bat_id, i32 audit_status)'
  print '  ReturnMsg drop_clearing_result(i64 settle_bat_id)'
  print '  ReturnMsg withdraw_generate( userid_list)'
  print '  ReturnMsg withdraw_apply(i64 bat_id)'
  print '  ReturnMsg withdraw_audit(i64 bat_id)'
  print '  ReturnMsg withdraw_audit_refuse(i64 bat_id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Clearing.Client(protocol)
transport.open()

if cmd == 'clearing_by_bat_id':
  if len(args) != 1:
    print 'clearing_by_bat_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearing_by_bat_id(eval(args[0]),))

elif cmd == 'clearing_by_error_bat_id':
  if len(args) != 1:
    print 'clearing_by_error_bat_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearing_by_error_bat_id(eval(args[0]),))

elif cmd == 'clearing_to_account_by_bat_id':
  if len(args) != 1:
    print 'clearing_to_account_by_bat_id requires 1 args'
    sys.exit(1)
  pp.pprint(client.clearing_to_account_by_bat_id(eval(args[0]),))

elif cmd == 'set_audit_result':
  if len(args) != 2:
    print 'set_audit_result requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_audit_result(eval(args[0]),eval(args[1]),))

elif cmd == 'drop_clearing_result':
  if len(args) != 1:
    print 'drop_clearing_result requires 1 args'
    sys.exit(1)
  pp.pprint(client.drop_clearing_result(eval(args[0]),))

elif cmd == 'withdraw_generate':
  if len(args) != 1:
    print 'withdraw_generate requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_generate(eval(args[0]),))

elif cmd == 'withdraw_apply':
  if len(args) != 1:
    print 'withdraw_apply requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_apply(eval(args[0]),))

elif cmd == 'withdraw_audit':
  if len(args) != 1:
    print 'withdraw_audit requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_audit(eval(args[0]),))

elif cmd == 'withdraw_audit_refuse':
  if len(args) != 1:
    print 'withdraw_audit_refuse requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_audit_refuse(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
