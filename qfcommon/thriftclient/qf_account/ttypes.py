#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Response:
  """
  Attributes:
   - id
   - biz_sn
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'biz_sn', None, None, ), # 2
    (3, TType.STRING, 'code', None, None, ), # 3
    (4, TType.STRING, 'msg', None, None, ), # 4
  )

  def __init__(self, id=None, biz_sn=None, code=None, msg=None,):
    self.id = id
    self.biz_sn = biz_sn
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Response')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 2)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 3)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 4)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageReq:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageReq')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PageResp:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PageResp')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Account:
  """
  Attributes:
   - id
   - userid
   - biz_id
   - amt
   - txcurrcd
   - acct_type_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'biz_id', None, None, ), # 3
    (4, TType.I64, 'amt', None, None, ), # 4
    (5, TType.STRING, 'txcurrcd', None, None, ), # 5
    (6, TType.I64, 'acct_type_id', None, None, ), # 6
  )

  def __init__(self, id=None, userid=None, biz_id=None, amt=None, txcurrcd=None, acct_type_id=None,):
    self.id = id
    self.userid = userid
    self.biz_id = biz_id
    self.amt = amt
    self.txcurrcd = txcurrcd
    self.acct_type_id = acct_type_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Account')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 3)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 4)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 5)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.acct_type_id is not None:
      oprot.writeFieldBegin('acct_type_id', TType.I64, 6)
      oprot.writeI64(self.acct_type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountQueryArgs:
  """
  Attributes:
   - userid
   - biz_id
   - amt
   - pos
   - count
   - txcurrcd
   - acct_type_id
   - userids
   - biz_ids
   - acct_types
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'biz_id', None, None, ), # 2
    (3, TType.I64, 'amt', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
    (6, TType.STRING, 'txcurrcd', None, "", ), # 6
    (7, TType.I64, 'acct_type_id', None, None, ), # 7
    (8, TType.LIST, 'userids', (TType.I64,None), [
    ], ), # 8
    (9, TType.LIST, 'biz_ids', (TType.I64,None), [
    ], ), # 9
    (10, TType.LIST, 'acct_types', (TType.I64,None), [
    ], ), # 10
  )

  def __init__(self, userid=None, biz_id=None, amt=None, pos=thrift_spec[4][4], count=thrift_spec[5][4], txcurrcd=thrift_spec[6][4], acct_type_id=None, userids=thrift_spec[8][4], biz_ids=thrift_spec[9][4], acct_types=thrift_spec[10][4],):
    self.userid = userid
    self.biz_id = biz_id
    self.amt = amt
    self.pos = pos
    self.count = count
    self.txcurrcd = txcurrcd
    self.acct_type_id = acct_type_id
    if userids is self.thrift_spec[8][4]:
      userids = [
    ]
    self.userids = userids
    if biz_ids is self.thrift_spec[9][4]:
      biz_ids = [
    ]
    self.biz_ids = biz_ids
    if acct_types is self.thrift_spec[10][4]:
      acct_types = [
    ]
    self.acct_types = acct_types

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.userids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.userids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.biz_ids = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.biz_ids.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.acct_types = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.acct_types.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountQueryArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 2)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 3)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 6)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.acct_type_id is not None:
      oprot.writeFieldBegin('acct_type_id', TType.I64, 7)
      oprot.writeI64(self.acct_type_id)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.userids))
      for iter18 in self.userids:
        oprot.writeI64(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.biz_ids is not None:
      oprot.writeFieldBegin('biz_ids', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.biz_ids))
      for iter19 in self.biz_ids:
        oprot.writeI64(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.acct_types is not None:
      oprot.writeFieldBegin('acct_types', TType.LIST, 10)
      oprot.writeListBegin(TType.I64, len(self.acct_types))
      for iter20 in self.acct_types:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountRecordArgs:
  """
  Attributes:
   - userid
   - biz_id
   - title
   - start_time
   - end_time
   - pos
   - count
   - chnl_code
   - biz_sn
   - acct_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'biz_id', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I32, 'start_time', None, None, ), # 4
    (5, TType.I32, 'end_time', None, None, ), # 5
    (6, TType.I32, 'pos', None, 0, ), # 6
    (7, TType.I32, 'count', None, 20, ), # 7
    (8, TType.STRING, 'chnl_code', None, None, ), # 8
    (9, TType.STRING, 'biz_sn', None, None, ), # 9
    (10, TType.I64, 'acct_id', None, None, ), # 10
  )

  def __init__(self, userid=None, biz_id=None, title=None, start_time=None, end_time=None, pos=thrift_spec[6][4], count=thrift_spec[7][4], chnl_code=None, biz_sn=None, acct_id=None,):
    self.userid = userid
    self.biz_id = biz_id
    self.title = title
    self.start_time = start_time
    self.end_time = end_time
    self.pos = pos
    self.count = count
    self.chnl_code = chnl_code
    self.biz_sn = biz_sn
    self.acct_id = acct_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.chnl_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.acct_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountRecordArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 2)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 4)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 5)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 6)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 7)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.chnl_code is not None:
      oprot.writeFieldBegin('chnl_code', TType.STRING, 8)
      oprot.writeString(self.chnl_code)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 9)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.acct_id is not None:
      oprot.writeFieldBegin('acct_id', TType.I64, 10)
      oprot.writeI64(self.acct_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountRecord:
  """
  Attributes:
   - id
   - userid
   - acct_id
   - biz_id
   - title
   - detail
   - biz_sn
   - amt
   - fee
   - fee_ratio
   - max_fee
   - sysdtm
   - chnl_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'acct_id', None, None, ), # 3
    (4, TType.I64, 'biz_id', None, None, ), # 4
    (5, TType.STRING, 'title', None, None, ), # 5
    (6, TType.STRING, 'detail', None, None, ), # 6
    (7, TType.STRING, 'biz_sn', None, None, ), # 7
    (8, TType.I64, 'amt', None, None, ), # 8
    (9, TType.I32, 'fee', None, None, ), # 9
    (10, TType.DOUBLE, 'fee_ratio', None, None, ), # 10
    (11, TType.I32, 'max_fee', None, None, ), # 11
    (12, TType.I32, 'sysdtm', None, None, ), # 12
    (13, TType.I64, 'chnl_id', None, None, ), # 13
  )

  def __init__(self, id=None, userid=None, acct_id=None, biz_id=None, title=None, detail=None, biz_sn=None, amt=None, fee=None, fee_ratio=None, max_fee=None, sysdtm=None, chnl_id=None,):
    self.id = id
    self.userid = userid
    self.acct_id = acct_id
    self.biz_id = biz_id
    self.title = title
    self.detail = detail
    self.biz_sn = biz_sn
    self.amt = amt
    self.fee = fee
    self.fee_ratio = fee_ratio
    self.max_fee = max_fee
    self.sysdtm = sysdtm
    self.chnl_id = chnl_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.acct_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.fee_ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.max_fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.acct_id is not None:
      oprot.writeFieldBegin('acct_id', TType.I64, 3)
      oprot.writeI64(self.acct_id)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 4)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 5)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 6)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 7)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 8)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I32, 9)
      oprot.writeI32(self.fee)
      oprot.writeFieldEnd()
    if self.fee_ratio is not None:
      oprot.writeFieldBegin('fee_ratio', TType.DOUBLE, 10)
      oprot.writeDouble(self.fee_ratio)
      oprot.writeFieldEnd()
    if self.max_fee is not None:
      oprot.writeFieldBegin('max_fee', TType.I32, 11)
      oprot.writeI32(self.max_fee)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 12)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 13)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountStat:
  """
  Attributes:
   - userid
   - total_amt
   - withdraw_amt
   - txcurrcd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'total_amt', None, None, ), # 2
    (3, TType.I64, 'withdraw_amt', None, None, ), # 3
    (4, TType.STRING, 'txcurrcd', None, None, ), # 4
  )

  def __init__(self, userid=None, total_amt=None, withdraw_amt=None, txcurrcd=None,):
    self.userid = userid
    self.total_amt = total_amt
    self.withdraw_amt = withdraw_amt
    self.txcurrcd = txcurrcd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.total_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.withdraw_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountStat')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.total_amt is not None:
      oprot.writeFieldBegin('total_amt', TType.I64, 2)
      oprot.writeI64(self.total_amt)
      oprot.writeFieldEnd()
    if self.withdraw_amt is not None:
      oprot.writeFieldBegin('withdraw_amt', TType.I64, 3)
      oprot.writeI64(self.withdraw_amt)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 4)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Trade:
  """
  Attributes:
   - userid
   - amt
   - txcurrcd
   - biz_sn
   - sysdtm
   - biz_id
   - trade_type
   - card_type
   - settletn
   - title
   - detail
   - orig_biz_sn
   - chnl_code
   - qfpay_acct_id
   - acct_type_id
   - fee_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.STRING, 'txcurrcd', None, "156", ), # 3
    (4, TType.STRING, 'biz_sn', None, None, ), # 4
    (5, TType.I32, 'sysdtm', None, None, ), # 5
    (6, TType.I64, 'biz_id', None, None, ), # 6
    (7, TType.STRING, 'trade_type', None, None, ), # 7
    (8, TType.I16, 'card_type', None, None, ), # 8
    (9, TType.I16, 'settletn', None, None, ), # 9
    (10, TType.STRING, 'title', None, None, ), # 10
    (11, TType.STRING, 'detail', None, None, ), # 11
    (12, TType.STRING, 'orig_biz_sn', None, None, ), # 12
    (13, TType.STRING, 'chnl_code', None, None, ), # 13
    (14, TType.I64, 'qfpay_acct_id', None, -1, ), # 14
    (15, TType.I64, 'acct_type_id', None, -1, ), # 15
    (16, TType.I32, 'fee_amt', None, 0, ), # 16
  )

  def __init__(self, userid=None, amt=None, txcurrcd=thrift_spec[3][4], biz_sn=None, sysdtm=None, biz_id=None, trade_type=None, card_type=None, settletn=None, title=None, detail=None, orig_biz_sn=None, chnl_code=None, qfpay_acct_id=thrift_spec[14][4], acct_type_id=thrift_spec[15][4], fee_amt=thrift_spec[16][4],):
    self.userid = userid
    self.amt = amt
    self.txcurrcd = txcurrcd
    self.biz_sn = biz_sn
    self.sysdtm = sysdtm
    self.biz_id = biz_id
    self.trade_type = trade_type
    self.card_type = card_type
    self.settletn = settletn
    self.title = title
    self.detail = detail
    self.orig_biz_sn = orig_biz_sn
    self.chnl_code = chnl_code
    self.qfpay_acct_id = qfpay_acct_id
    self.acct_type_id = acct_type_id
    self.fee_amt = fee_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.settletn = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.chnl_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.qfpay_acct_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.fee_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trade')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 3)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 4)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 5)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 6)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 7)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 8)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.settletn is not None:
      oprot.writeFieldBegin('settletn', TType.I16, 9)
      oprot.writeI16(self.settletn)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 10)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 11)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 12)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.chnl_code is not None:
      oprot.writeFieldBegin('chnl_code', TType.STRING, 13)
      oprot.writeString(self.chnl_code)
      oprot.writeFieldEnd()
    if self.qfpay_acct_id is not None:
      oprot.writeFieldBegin('qfpay_acct_id', TType.I64, 14)
      oprot.writeI64(self.qfpay_acct_id)
      oprot.writeFieldEnd()
    if self.acct_type_id is not None:
      oprot.writeFieldBegin('acct_type_id', TType.I64, 15)
      oprot.writeI64(self.acct_type_id)
      oprot.writeFieldEnd()
    if self.fee_amt is not None:
      oprot.writeFieldBegin('fee_amt', TType.I32, 16)
      oprot.writeI32(self.fee_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    if self.txcurrcd is None:
      raise TProtocol.TProtocolException(message='Required field txcurrcd is unset!')
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Transfer:
  """
  Attributes:
   - amt
   - txcurrcd
   - biz_sn
   - from_userid
   - from_biz_id
   - from_acct_type_id
   - to_userid
   - to_biz_id
   - to_acct_type_id
   - sysdtm
   - title
   - detail
   - orig_biz_sn
   - qfpay_acct_id
   - biz_sns
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'amt', None, None, ), # 1
    (2, TType.STRING, 'txcurrcd', None, "156", ), # 2
    (3, TType.STRING, 'biz_sn', None, None, ), # 3
    (4, TType.I64, 'from_userid', None, None, ), # 4
    (5, TType.I64, 'from_biz_id', None, None, ), # 5
    (6, TType.I64, 'from_acct_type_id', None, None, ), # 6
    (7, TType.I64, 'to_userid', None, None, ), # 7
    (8, TType.I64, 'to_biz_id', None, None, ), # 8
    (9, TType.I64, 'to_acct_type_id', None, None, ), # 9
    (10, TType.I32, 'sysdtm', None, None, ), # 10
    (11, TType.STRING, 'title', None, None, ), # 11
    (12, TType.STRING, 'detail', None, None, ), # 12
    (13, TType.STRING, 'orig_biz_sn', None, "", ), # 13
    (14, TType.I64, 'qfpay_acct_id', None, -1, ), # 14
    (15, TType.LIST, 'biz_sns', (TType.STRING,None), None, ), # 15
  )

  def __init__(self, amt=None, txcurrcd=thrift_spec[2][4], biz_sn=None, from_userid=None, from_biz_id=None, from_acct_type_id=None, to_userid=None, to_biz_id=None, to_acct_type_id=None, sysdtm=None, title=None, detail=None, orig_biz_sn=thrift_spec[13][4], qfpay_acct_id=thrift_spec[14][4], biz_sns=None,):
    self.amt = amt
    self.txcurrcd = txcurrcd
    self.biz_sn = biz_sn
    self.from_userid = from_userid
    self.from_biz_id = from_biz_id
    self.from_acct_type_id = from_acct_type_id
    self.to_userid = to_userid
    self.to_biz_id = to_biz_id
    self.to_acct_type_id = to_acct_type_id
    self.sysdtm = sysdtm
    self.title = title
    self.detail = detail
    self.orig_biz_sn = orig_biz_sn
    self.qfpay_acct_id = qfpay_acct_id
    self.biz_sns = biz_sns

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.from_userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.from_biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.from_acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.to_userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.to_biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.to_acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.qfpay_acct_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.biz_sns = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.biz_sns.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Transfer')
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 1)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 2)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 3)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.from_userid is not None:
      oprot.writeFieldBegin('from_userid', TType.I64, 4)
      oprot.writeI64(self.from_userid)
      oprot.writeFieldEnd()
    if self.from_biz_id is not None:
      oprot.writeFieldBegin('from_biz_id', TType.I64, 5)
      oprot.writeI64(self.from_biz_id)
      oprot.writeFieldEnd()
    if self.from_acct_type_id is not None:
      oprot.writeFieldBegin('from_acct_type_id', TType.I64, 6)
      oprot.writeI64(self.from_acct_type_id)
      oprot.writeFieldEnd()
    if self.to_userid is not None:
      oprot.writeFieldBegin('to_userid', TType.I64, 7)
      oprot.writeI64(self.to_userid)
      oprot.writeFieldEnd()
    if self.to_biz_id is not None:
      oprot.writeFieldBegin('to_biz_id', TType.I64, 8)
      oprot.writeI64(self.to_biz_id)
      oprot.writeFieldEnd()
    if self.to_acct_type_id is not None:
      oprot.writeFieldBegin('to_acct_type_id', TType.I64, 9)
      oprot.writeI64(self.to_acct_type_id)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 10)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 11)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 12)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 13)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.qfpay_acct_id is not None:
      oprot.writeFieldBegin('qfpay_acct_id', TType.I64, 14)
      oprot.writeI64(self.qfpay_acct_id)
      oprot.writeFieldEnd()
    if self.biz_sns is not None:
      oprot.writeFieldBegin('biz_sns', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.biz_sns))
      for iter27 in self.biz_sns:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    if self.txcurrcd is None:
      raise TProtocol.TProtocolException(message='Required field txcurrcd is unset!')
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.from_userid is None:
      raise TProtocol.TProtocolException(message='Required field from_userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Recharge:
  """
  Attributes:
   - biz_sn
   - txcurrcd
   - sysdtm
   - amt
   - title
   - detail
   - orig_biz_sn
   - acct_id
   - userid
   - acct_type_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'biz_sn', None, None, ), # 1
    (2, TType.STRING, 'txcurrcd', None, "156", ), # 2
    (3, TType.I32, 'sysdtm', None, None, ), # 3
    (4, TType.I64, 'amt', None, None, ), # 4
    (5, TType.STRING, 'title', None, "", ), # 5
    (6, TType.STRING, 'detail', None, "", ), # 6
    (7, TType.STRING, 'orig_biz_sn', None, "", ), # 7
    (8, TType.I64, 'acct_id', None, -1, ), # 8
    (9, TType.I64, 'userid', None, -1, ), # 9
    (10, TType.I64, 'acct_type_id', None, -1, ), # 10
  )

  def __init__(self, biz_sn=None, txcurrcd=thrift_spec[2][4], sysdtm=None, amt=None, title=thrift_spec[5][4], detail=thrift_spec[6][4], orig_biz_sn=thrift_spec[7][4], acct_id=thrift_spec[8][4], userid=thrift_spec[9][4], acct_type_id=thrift_spec[10][4],):
    self.biz_sn = biz_sn
    self.txcurrcd = txcurrcd
    self.sysdtm = sysdtm
    self.amt = amt
    self.title = title
    self.detail = detail
    self.orig_biz_sn = orig_biz_sn
    self.acct_id = acct_id
    self.userid = userid
    self.acct_type_id = acct_type_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.txcurrcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sysdtm = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.detail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.acct_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.acct_type_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Recharge')
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 1)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.txcurrcd is not None:
      oprot.writeFieldBegin('txcurrcd', TType.STRING, 2)
      oprot.writeString(self.txcurrcd)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.I32, 3)
      oprot.writeI32(self.sysdtm)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 4)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 5)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.detail is not None:
      oprot.writeFieldBegin('detail', TType.STRING, 6)
      oprot.writeString(self.detail)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 7)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.acct_id is not None:
      oprot.writeFieldBegin('acct_id', TType.I64, 8)
      oprot.writeI64(self.acct_id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 9)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.acct_type_id is not None:
      oprot.writeFieldBegin('acct_type_id', TType.I64, 10)
      oprot.writeI64(self.acct_type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.txcurrcd is None:
      raise TProtocol.TProtocolException(message='Required field txcurrcd is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserCard:
  """
  Attributes:
   - id
   - userid
   - name
   - cardno
   - card_type
   - bank_name
   - bank_brch
   - bank_area
   - bank_city
   - bank_code
   - bank_type
   - mobile
   - state
   - enable
   - ctime
   - uptime
   - swift_code
   - bank_addr
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'cardno', None, None, ), # 4
    (5, TType.I16, 'card_type', None, None, ), # 5
    (6, TType.STRING, 'bank_name', None, None, ), # 6
    (7, TType.STRING, 'bank_brch', None, None, ), # 7
    (8, TType.STRING, 'bank_area', None, None, ), # 8
    (9, TType.STRING, 'bank_city', None, None, ), # 9
    (10, TType.STRING, 'bank_code', None, None, ), # 10
    (11, TType.I16, 'bank_type', None, None, ), # 11
    (12, TType.STRING, 'mobile', None, None, ), # 12
    (13, TType.I16, 'state', None, None, ), # 13
    (14, TType.I16, 'enable', None, None, ), # 14
    (15, TType.I32, 'ctime', None, None, ), # 15
    (16, TType.I32, 'uptime', None, None, ), # 16
    (17, TType.STRING, 'swift_code', None, None, ), # 17
    (18, TType.STRING, 'bank_addr', None, None, ), # 18
    (19, TType.STRING, 'content', None, None, ), # 19
  )

  def __init__(self, id=None, userid=None, name=None, cardno=None, card_type=None, bank_name=None, bank_brch=None, bank_area=None, bank_city=None, bank_code=None, bank_type=None, mobile=None, state=None, enable=None, ctime=None, uptime=None, swift_code=None, bank_addr=None, content=None,):
    self.id = id
    self.userid = userid
    self.name = name
    self.cardno = cardno
    self.card_type = card_type
    self.bank_name = bank_name
    self.bank_brch = bank_brch
    self.bank_area = bank_area
    self.bank_city = bank_city
    self.bank_code = bank_code
    self.bank_type = bank_type
    self.mobile = mobile
    self.state = state
    self.enable = enable
    self.ctime = ctime
    self.uptime = uptime
    self.swift_code = swift_code
    self.bank_addr = bank_addr
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.cardno = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bank_brch = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bank_area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bank_city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.bank_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.bank_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.state = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.ctime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.uptime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.swift_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.bank_addr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCard')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.cardno is not None:
      oprot.writeFieldBegin('cardno', TType.STRING, 4)
      oprot.writeString(self.cardno)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 5)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 6)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.bank_brch is not None:
      oprot.writeFieldBegin('bank_brch', TType.STRING, 7)
      oprot.writeString(self.bank_brch)
      oprot.writeFieldEnd()
    if self.bank_area is not None:
      oprot.writeFieldBegin('bank_area', TType.STRING, 8)
      oprot.writeString(self.bank_area)
      oprot.writeFieldEnd()
    if self.bank_city is not None:
      oprot.writeFieldBegin('bank_city', TType.STRING, 9)
      oprot.writeString(self.bank_city)
      oprot.writeFieldEnd()
    if self.bank_code is not None:
      oprot.writeFieldBegin('bank_code', TType.STRING, 10)
      oprot.writeString(self.bank_code)
      oprot.writeFieldEnd()
    if self.bank_type is not None:
      oprot.writeFieldBegin('bank_type', TType.I16, 11)
      oprot.writeI16(self.bank_type)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 12)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 13)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 14)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 15)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.uptime is not None:
      oprot.writeFieldBegin('uptime', TType.I32, 16)
      oprot.writeI32(self.uptime)
      oprot.writeFieldEnd()
    if self.swift_code is not None:
      oprot.writeFieldBegin('swift_code', TType.STRING, 17)
      oprot.writeString(self.swift_code)
      oprot.writeFieldEnd()
    if self.bank_addr is not None:
      oprot.writeFieldBegin('bank_addr', TType.STRING, 18)
      oprot.writeString(self.bank_addr)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 19)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardQueryArgs:
  """
  Attributes:
   - userid
   - state
   - enable
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userid', (TType.I64,None), None, ), # 1
    (2, TType.I16, 'state', None, None, ), # 2
    (3, TType.I16, 'enable', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
  )

  def __init__(self, userid=None, state=None, enable=None, pos=thrift_spec[4][4], count=thrift_spec[5][4],):
    self.userid = userid
    self.state = state
    self.enable = enable
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userid = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI64();
            self.userid.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.state = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardQueryArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.userid))
      for iter34 in self.userid:
        oprot.writeI64(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 2)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 3)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CardRecordArgs:
  """
  Attributes:
   - userid
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userid', (TType.I64,None), None, ), # 1
    (2, TType.I32, 'pos', None, 0, ), # 2
    (3, TType.I32, 'count', None, 20, ), # 3
  )

  def __init__(self, userid=None, pos=thrift_spec[2][4], count=thrift_spec[3][4],):
    self.userid = userid
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userid = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI64();
            self.userid.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CardRecordArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.userid))
      for iter41 in self.userid:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 2)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeRatio:
  """
  Attributes:
   - id
   - userid
   - trade_type
   - card_type
   - settletn
   - ratio
   - max_fee
   - enable
   - ctime
   - uptime
   - is_update
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'trade_type', None, None, ), # 3
    (4, TType.I32, 'card_type', None, None, ), # 4
    (5, TType.I16, 'settletn', None, None, ), # 5
    (6, TType.DOUBLE, 'ratio', None, None, ), # 6
    (7, TType.I32, 'max_fee', None, None, ), # 7
    (8, TType.I16, 'enable', None, None, ), # 8
    (9, TType.I32, 'ctime', None, None, ), # 9
    (10, TType.I32, 'uptime', None, None, ), # 10
    (11, TType.I16, 'is_update', None, 0, ), # 11
  )

  def __init__(self, id=None, userid=None, trade_type=None, card_type=None, settletn=None, ratio=None, max_fee=None, enable=None, ctime=None, uptime=None, is_update=thrift_spec[11][4],):
    self.id = id
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type
    self.settletn = settletn
    self.ratio = ratio
    self.max_fee = max_fee
    self.enable = enable
    self.ctime = ctime
    self.uptime = uptime
    self.is_update = is_update

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.card_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.settletn = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.max_fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.ctime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.uptime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.is_update = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeRatio')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 3)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I32, 4)
      oprot.writeI32(self.card_type)
      oprot.writeFieldEnd()
    if self.settletn is not None:
      oprot.writeFieldBegin('settletn', TType.I16, 5)
      oprot.writeI16(self.settletn)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 6)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    if self.max_fee is not None:
      oprot.writeFieldBegin('max_fee', TType.I32, 7)
      oprot.writeI32(self.max_fee)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 8)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.I32, 9)
      oprot.writeI32(self.ctime)
      oprot.writeFieldEnd()
    if self.uptime is not None:
      oprot.writeFieldBegin('uptime', TType.I32, 10)
      oprot.writeI32(self.uptime)
      oprot.writeFieldEnd()
    if self.is_update is not None:
      oprot.writeFieldBegin('is_update', TType.I16, 11)
      oprot.writeI16(self.is_update)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeQueryArgs:
  """
  Attributes:
   - userid
   - trade_type
   - card_type
   - settletn
   - enable
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trade_type', None, None, ), # 2
    (3, TType.I16, 'card_type', None, None, ), # 3
    (4, TType.I16, 'settletn', None, None, ), # 4
    (5, TType.I16, 'enable', None, None, ), # 5
    (6, TType.I32, 'pos', None, 0, ), # 6
    (7, TType.I32, 'count', None, 20, ), # 7
  )

  def __init__(self, userid=None, trade_type=None, card_type=None, settletn=None, enable=None, pos=thrift_spec[6][4], count=thrift_spec[7][4],):
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type
    self.settletn = settletn
    self.enable = enable
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.settletn = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeQueryArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 2)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 3)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.settletn is not None:
      oprot.writeFieldBegin('settletn', TType.I16, 4)
      oprot.writeI16(self.settletn)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 5)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 6)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 7)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CalculateFeeArgs:
  """
  Attributes:
   - userid
   - trade_type
   - card_type
   - settletn
   - trade_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trade_type', None, None, ), # 2
    (3, TType.I16, 'card_type', None, None, ), # 3
    (4, TType.I16, 'settletn', None, 1, ), # 4
    (5, TType.I64, 'trade_amt', None, None, ), # 5
  )

  def __init__(self, userid=None, trade_type=None, card_type=None, settletn=thrift_spec[4][4], trade_amt=None,):
    self.userid = userid
    self.trade_type = trade_type
    self.card_type = card_type
    self.settletn = settletn
    self.trade_amt = trade_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trade_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.card_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.settletn = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.trade_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CalculateFeeArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.trade_type is not None:
      oprot.writeFieldBegin('trade_type', TType.STRING, 2)
      oprot.writeString(self.trade_type)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I16, 3)
      oprot.writeI16(self.card_type)
      oprot.writeFieldEnd()
    if self.settletn is not None:
      oprot.writeFieldBegin('settletn', TType.I16, 4)
      oprot.writeI16(self.settletn)
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I64, 5)
      oprot.writeI64(self.trade_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.trade_type is None:
      raise TProtocol.TProtocolException(message='Required field trade_type is unset!')
    if self.card_type is None:
      raise TProtocol.TProtocolException(message='Required field card_type is unset!')
    if self.settletn is None:
      raise TProtocol.TProtocolException(message='Required field settletn is unset!')
    if self.trade_amt is None:
      raise TProtocol.TProtocolException(message='Required field trade_amt is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeeResp:
  """
  Attributes:
   - fee
   - ratio
   - max_fee
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fee', None, None, ), # 1
    (2, TType.DOUBLE, 'ratio', None, None, ), # 2
    (3, TType.I32, 'max_fee', None, None, ), # 3
  )

  def __init__(self, fee=None, ratio=None, max_fee=None,):
    self.fee = fee
    self.ratio = ratio
    self.max_fee = max_fee

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.ratio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.max_fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeeResp')
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I32, 1)
      oprot.writeI32(self.fee)
      oprot.writeFieldEnd()
    if self.ratio is not None:
      oprot.writeFieldBegin('ratio', TType.DOUBLE, 2)
      oprot.writeDouble(self.ratio)
      oprot.writeFieldEnd()
    if self.max_fee is not None:
      oprot.writeFieldBegin('max_fee', TType.I32, 3)
      oprot.writeI32(self.max_fee)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IsCancelResp:
  """
  Attributes:
   - cancel_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cancel_amt', None, None, ), # 1
  )

  def __init__(self, cancel_amt=None,):
    self.cancel_amt = cancel_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cancel_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IsCancelResp')
    if self.cancel_amt is not None:
      oprot.writeFieldBegin('cancel_amt', TType.I64, 1)
      oprot.writeI64(self.cancel_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
