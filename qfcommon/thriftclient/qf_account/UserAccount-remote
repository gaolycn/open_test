#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import UserAccount
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i16 ping()'
  print '  i16 account_init(i64 userid, string txcurrcd)'
  print '   account_query(AccountQueryArgs query_args)'
  print '  i32 account_count(AccountQueryArgs query_args)'
  print '   account_record(AccountRecordArgs query_args)'
  print '  i32 record_count(AccountRecordArgs query_args)'
  print '  AccountStat account_stat(i64 userid)'
  print '  i16 trade_payment(Trade pay_args)'
  print '  i16 trade_cancel(Trade cancel_args)'
  print '  IsCancelResp trade_is_cancel(Trade cancel_args)'
  print '  i16 trade_refund(Trade refund_args)'
  print '  i16 trade_modify(Trade refund_args)'
  print '  i16 settle(Trade param)'
  print '  i16 settle_delay(Trade param)'
  print '  i16 settle_realname(Trade param)'
  print '  i16 settle_zxswiftpass(Trade param)'
  print '  i16 settlement(Transfer req_args)'
  print '  i16 settlement_realtime(Transfer req_args)'
  print '  i16 remit(Trade param)'
  print '  i16 remit_return(Trade param)'
  print '  i16 fund_blocking(Trade param)'
  print '  i16 fund_deblocking(Trade param)'
  print '  i16 fund_deblocking_realname(Trade param)'
  print '  i16 fund_blocking_general(Transfer param)'
  print '  i16 fund_deblocking_general(Transfer param)'
  print '  i16 recharge(Recharge param)'
  print '  i16 recharge_cancel(Recharge param)'
  print '  i16 withdraw(Trade req_args)'
  print '  i16 withdraw_return(Trade req_args)'
  print '   is_open_withdraw( userids)'
  print '  i64 card_save(UserCard card_info)'
  print '  i64 card_save_one(UserCard card_info)'
  print '   card_query(CardQueryArgs query_args)'
  print '  i32 card_count(CardQueryArgs query_args)'
  print '   card_record(CardRecordArgs query_args)'
  print '  i64 fee_ratio_save(FeeRatio fee_info)'
  print '   fee_ratio_query(FeeQueryArgs query_args)'
  print '  i32 fee_ratio_count(FeeQueryArgs query_args)'
  print '  FeeResp calculate_fee(CalculateFeeArgs param)'
  print '  i32 subscribe(string req_data)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = UserAccount.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'account_init':
  if len(args) != 2:
    print 'account_init requires 2 args'
    sys.exit(1)
  pp.pprint(client.account_init(eval(args[0]),args[1],))

elif cmd == 'account_query':
  if len(args) != 1:
    print 'account_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_query(eval(args[0]),))

elif cmd == 'account_count':
  if len(args) != 1:
    print 'account_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_count(eval(args[0]),))

elif cmd == 'account_record':
  if len(args) != 1:
    print 'account_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_record(eval(args[0]),))

elif cmd == 'record_count':
  if len(args) != 1:
    print 'record_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.record_count(eval(args[0]),))

elif cmd == 'account_stat':
  if len(args) != 1:
    print 'account_stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.account_stat(eval(args[0]),))

elif cmd == 'trade_payment':
  if len(args) != 1:
    print 'trade_payment requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_payment(eval(args[0]),))

elif cmd == 'trade_cancel':
  if len(args) != 1:
    print 'trade_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_cancel(eval(args[0]),))

elif cmd == 'trade_is_cancel':
  if len(args) != 1:
    print 'trade_is_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_is_cancel(eval(args[0]),))

elif cmd == 'trade_refund':
  if len(args) != 1:
    print 'trade_refund requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_refund(eval(args[0]),))

elif cmd == 'trade_modify':
  if len(args) != 1:
    print 'trade_modify requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_modify(eval(args[0]),))

elif cmd == 'settle':
  if len(args) != 1:
    print 'settle requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle(eval(args[0]),))

elif cmd == 'settle_delay':
  if len(args) != 1:
    print 'settle_delay requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle_delay(eval(args[0]),))

elif cmd == 'settle_realname':
  if len(args) != 1:
    print 'settle_realname requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle_realname(eval(args[0]),))

elif cmd == 'settle_zxswiftpass':
  if len(args) != 1:
    print 'settle_zxswiftpass requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle_zxswiftpass(eval(args[0]),))

elif cmd == 'settlement':
  if len(args) != 1:
    print 'settlement requires 1 args'
    sys.exit(1)
  pp.pprint(client.settlement(eval(args[0]),))

elif cmd == 'settlement_realtime':
  if len(args) != 1:
    print 'settlement_realtime requires 1 args'
    sys.exit(1)
  pp.pprint(client.settlement_realtime(eval(args[0]),))

elif cmd == 'remit':
  if len(args) != 1:
    print 'remit requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit(eval(args[0]),))

elif cmd == 'remit_return':
  if len(args) != 1:
    print 'remit_return requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit_return(eval(args[0]),))

elif cmd == 'fund_blocking':
  if len(args) != 1:
    print 'fund_blocking requires 1 args'
    sys.exit(1)
  pp.pprint(client.fund_blocking(eval(args[0]),))

elif cmd == 'fund_deblocking':
  if len(args) != 1:
    print 'fund_deblocking requires 1 args'
    sys.exit(1)
  pp.pprint(client.fund_deblocking(eval(args[0]),))

elif cmd == 'fund_deblocking_realname':
  if len(args) != 1:
    print 'fund_deblocking_realname requires 1 args'
    sys.exit(1)
  pp.pprint(client.fund_deblocking_realname(eval(args[0]),))

elif cmd == 'fund_blocking_general':
  if len(args) != 1:
    print 'fund_blocking_general requires 1 args'
    sys.exit(1)
  pp.pprint(client.fund_blocking_general(eval(args[0]),))

elif cmd == 'fund_deblocking_general':
  if len(args) != 1:
    print 'fund_deblocking_general requires 1 args'
    sys.exit(1)
  pp.pprint(client.fund_deblocking_general(eval(args[0]),))

elif cmd == 'recharge':
  if len(args) != 1:
    print 'recharge requires 1 args'
    sys.exit(1)
  pp.pprint(client.recharge(eval(args[0]),))

elif cmd == 'recharge_cancel':
  if len(args) != 1:
    print 'recharge_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.recharge_cancel(eval(args[0]),))

elif cmd == 'withdraw':
  if len(args) != 1:
    print 'withdraw requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw(eval(args[0]),))

elif cmd == 'withdraw_return':
  if len(args) != 1:
    print 'withdraw_return requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_return(eval(args[0]),))

elif cmd == 'is_open_withdraw':
  if len(args) != 1:
    print 'is_open_withdraw requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_open_withdraw(eval(args[0]),))

elif cmd == 'card_save':
  if len(args) != 1:
    print 'card_save requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_save(eval(args[0]),))

elif cmd == 'card_save_one':
  if len(args) != 1:
    print 'card_save_one requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_save_one(eval(args[0]),))

elif cmd == 'card_query':
  if len(args) != 1:
    print 'card_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_query(eval(args[0]),))

elif cmd == 'card_count':
  if len(args) != 1:
    print 'card_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_count(eval(args[0]),))

elif cmd == 'card_record':
  if len(args) != 1:
    print 'card_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.card_record(eval(args[0]),))

elif cmd == 'fee_ratio_save':
  if len(args) != 1:
    print 'fee_ratio_save requires 1 args'
    sys.exit(1)
  pp.pprint(client.fee_ratio_save(eval(args[0]),))

elif cmd == 'fee_ratio_query':
  if len(args) != 1:
    print 'fee_ratio_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.fee_ratio_query(eval(args[0]),))

elif cmd == 'fee_ratio_count':
  if len(args) != 1:
    print 'fee_ratio_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.fee_ratio_count(eval(args[0]),))

elif cmd == 'calculate_fee':
  if len(args) != 1:
    print 'calculate_fee requires 1 args'
    sys.exit(1)
  pp.pprint(client.calculate_fee(eval(args[0]),))

elif cmd == 'subscribe':
  if len(args) != 1:
    print 'subscribe requires 1 args'
    sys.exit(1)
  pp.pprint(client.subscribe(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
