#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from captcha import CaptchaServer
from captcha.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  void ping()')
  print('  string captcha_get(string ucode, string src)')
  print('  string captcha_get_ex(string ucode, string src, i32 expires, i16 length, i16 mode, i16 limit_time)')
  print('  i32 captcha_check(string ucode, string src, string code)')
  print('  i32 captcha_check_ex(string ucode, string src, string code, i16 mode)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = CaptchaServer.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'captcha_get':
  if len(args) != 2:
    print('captcha_get requires 2 args')
    sys.exit(1)
  pp.pprint(client.captcha_get(args[0],args[1],))

elif cmd == 'captcha_get_ex':
  if len(args) != 6:
    print('captcha_get_ex requires 6 args')
    sys.exit(1)
  pp.pprint(client.captcha_get_ex(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'captcha_check':
  if len(args) != 3:
    print('captcha_check requires 3 args')
    sys.exit(1)
  pp.pprint(client.captcha_check(args[0],args[1],args[2],))

elif cmd == 'captcha_check_ex':
  if len(args) != 4:
    print('captcha_check_ex requires 4 args')
    sys.exit(1)
  pp.pprint(client.captcha_check_ex(args[0],args[1],args[2],eval(args[3]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
