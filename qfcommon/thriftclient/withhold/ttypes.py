#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class WithHoldError(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithHoldError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RuleParam:
  """
  Attributes:
   - userid
   - title
   - should_amt
   - withhold_type
   - enable
   - effective_time
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.I64, 'should_amt', None, None, ), # 3
    (4, TType.I16, 'withhold_type', None, None, ), # 4
    (5, TType.I16, 'enable', None, None, ), # 5
    (6, TType.STRING, 'effective_time', None, None, ), # 6
    (7, TType.STRING, 'expire_time', None, None, ), # 7
  )

  def __init__(self, userid=None, title=None, should_amt=None, withhold_type=None, enable=None, effective_time=None, expire_time=None,):
    self.userid = userid
    self.title = title
    self.should_amt = should_amt
    self.withhold_type = withhold_type
    self.enable = enable
    self.effective_time = effective_time
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.should_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.withhold_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.effective_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.expire_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RuleParam')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.should_amt is not None:
      oprot.writeFieldBegin('should_amt', TType.I64, 3)
      oprot.writeI64(self.should_amt)
      oprot.writeFieldEnd()
    if self.withhold_type is not None:
      oprot.writeFieldBegin('withhold_type', TType.I16, 4)
      oprot.writeI16(self.withhold_type)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 5)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.effective_time is not None:
      oprot.writeFieldBegin('effective_time', TType.STRING, 6)
      oprot.writeString(self.effective_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.STRING, 7)
      oprot.writeString(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.should_amt is None:
      raise TProtocol.TProtocolException(message='Required field should_amt is unset!')
    if self.withhold_type is None:
      raise TProtocol.TProtocolException(message='Required field withhold_type is unset!')
    if self.enable is None:
      raise TProtocol.TProtocolException(message='Required field enable is unset!')
    if self.effective_time is None:
      raise TProtocol.TProtocolException(message='Required field effective_time is unset!')
    if self.expire_time is None:
      raise TProtocol.TProtocolException(message='Required field expire_time is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateRuleParam:
  """
  Attributes:
   - id
   - userid
   - title
   - should_amt
   - withhold_type
   - enable
   - effective_time
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I64, 'should_amt', None, None, ), # 4
    (5, TType.I16, 'withhold_type', None, None, ), # 5
    (6, TType.I16, 'enable', None, None, ), # 6
    (7, TType.STRING, 'effective_time', None, None, ), # 7
    (8, TType.STRING, 'expire_time', None, None, ), # 8
  )

  def __init__(self, id=None, userid=None, title=None, should_amt=None, withhold_type=None, enable=None, effective_time=None, expire_time=None,):
    self.id = id
    self.userid = userid
    self.title = title
    self.should_amt = should_amt
    self.withhold_type = withhold_type
    self.enable = enable
    self.effective_time = effective_time
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.should_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.withhold_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.enable = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.effective_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.expire_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateRuleParam')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.should_amt is not None:
      oprot.writeFieldBegin('should_amt', TType.I64, 4)
      oprot.writeI64(self.should_amt)
      oprot.writeFieldEnd()
    if self.withhold_type is not None:
      oprot.writeFieldBegin('withhold_type', TType.I16, 5)
      oprot.writeI16(self.withhold_type)
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 6)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.effective_time is not None:
      oprot.writeFieldBegin('effective_time', TType.STRING, 7)
      oprot.writeString(self.effective_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.STRING, 8)
      oprot.writeString(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.should_amt is None:
      raise TProtocol.TProtocolException(message='Required field should_amt is unset!')
    if self.withhold_type is None:
      raise TProtocol.TProtocolException(message='Required field withhold_type is unset!')
    if self.enable is None:
      raise TProtocol.TProtocolException(message='Required field enable is unset!')
    if self.effective_time is None:
      raise TProtocol.TProtocolException(message='Required field effective_time is unset!')
    if self.expire_time is None:
      raise TProtocol.TProtocolException(message='Required field expire_time is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
