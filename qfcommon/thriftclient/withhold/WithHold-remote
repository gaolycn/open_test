#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from WithHold import WithHold
from WithHold.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string ping()'
  print '  i32 add_withhold_rule( params)'
  print '  i32 update_withhold_rule(UpdateRuleParam update_rule)'
  print '  void withhold()'
  print '  i32 withhold_cancel(i64 userid)'
  print '  i32 withhold_apply(i64 withhold_bat_id)'
  print '  i32 withhold_audit(i64 withhold_bat_id)'
  print '  i32 withhold_audit_refuse(i64 withhold_bat_id)'
  print '  void download_rule_excel(string userid, string title, string finish, string enable)'
  print '  void download_history_excel(string bat_id)'
  print '  i16 get_finish_flag()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WithHold.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'add_withhold_rule':
  if len(args) != 1:
    print 'add_withhold_rule requires 1 args'
    sys.exit(1)
  pp.pprint(client.add_withhold_rule(eval(args[0]),))

elif cmd == 'update_withhold_rule':
  if len(args) != 1:
    print 'update_withhold_rule requires 1 args'
    sys.exit(1)
  pp.pprint(client.update_withhold_rule(eval(args[0]),))

elif cmd == 'withhold':
  if len(args) != 0:
    print 'withhold requires 0 args'
    sys.exit(1)
  pp.pprint(client.withhold())

elif cmd == 'withhold_cancel':
  if len(args) != 1:
    print 'withhold_cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.withhold_cancel(eval(args[0]),))

elif cmd == 'withhold_apply':
  if len(args) != 1:
    print 'withhold_apply requires 1 args'
    sys.exit(1)
  pp.pprint(client.withhold_apply(eval(args[0]),))

elif cmd == 'withhold_audit':
  if len(args) != 1:
    print 'withhold_audit requires 1 args'
    sys.exit(1)
  pp.pprint(client.withhold_audit(eval(args[0]),))

elif cmd == 'withhold_audit_refuse':
  if len(args) != 1:
    print 'withhold_audit_refuse requires 1 args'
    sys.exit(1)
  pp.pprint(client.withhold_audit_refuse(eval(args[0]),))

elif cmd == 'download_rule_excel':
  if len(args) != 4:
    print 'download_rule_excel requires 4 args'
    sys.exit(1)
  pp.pprint(client.download_rule_excel(args[0],args[1],args[2],args[3],))

elif cmd == 'download_history_excel':
  if len(args) != 1:
    print 'download_history_excel requires 1 args'
    sys.exit(1)
  pp.pprint(client.download_history_excel(args[0],))

elif cmd == 'get_finish_flag':
  if len(args) != 0:
    print 'get_finish_flag requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_finish_flag())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
