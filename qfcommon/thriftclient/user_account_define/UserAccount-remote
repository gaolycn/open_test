#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import UserAccount
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i16 init_balance_account(string userid, string src)'
  print '  i16 trade_success_to_balance(BalanceArgs balance_args)'
  print '  i16 trade_cancel_to_balance(BalanceArgs balance_args)'
  print '  i16 trade_cancel_rollback_to_balance(BalanceArgs balance_args)'
  print '  i16 trade_refund_to_balance(BalanceArgs balance_args)'
  print '  i16 trade_refund_rollback_to_balance(BalanceArgs balance_args)'
  print '  i16 withdraw_to_balance(BalanceArgs balance_args)'
  print '  i16 settle_to_balance(SettleBalanceArgs balance_args)'
  print '  BalanceRet get_balance_account_info(string userid, string src,  account_types)'
  print '  BillRet get_user_bill(BillArgs bill_args)'
  print '  BillRet get_user_bill_v2(BillArgsV2 bill_args)'
  print '  i16 remit_success_to_balance(BalanceArgs balance_args)'
  print '  i16 remit_fail_to_balance(BalanceArgs balance_args)'
  print '  i16 remit_return_to_balance(BalanceArgs balance_args)'
  print '  i16 batch_remit_success_to_balance(BatchRemitArgs remit_args)'
  print '  i16 manual_recharge_to_balance(BalanceArgs balance_args)'
  print '  i16 manual_recharge_to_proxy_balance(BalanceArgs balance_args)'
  print '  i16 disable_recharge_to_balance(BalanceArgs balance_args)'
  print '  i16 disable_recharge_to_proxy_balance(BalanceArgs balance_args)'
  print '  i32 subscribe(string data)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = UserAccount.Client(protocol)
transport.open()

if cmd == 'init_balance_account':
  if len(args) != 2:
    print 'init_balance_account requires 2 args'
    sys.exit(1)
  pp.pprint(client.init_balance_account(args[0],args[1],))

elif cmd == 'trade_success_to_balance':
  if len(args) != 1:
    print 'trade_success_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_success_to_balance(eval(args[0]),))

elif cmd == 'trade_cancel_to_balance':
  if len(args) != 1:
    print 'trade_cancel_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_cancel_to_balance(eval(args[0]),))

elif cmd == 'trade_cancel_rollback_to_balance':
  if len(args) != 1:
    print 'trade_cancel_rollback_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_cancel_rollback_to_balance(eval(args[0]),))

elif cmd == 'trade_refund_to_balance':
  if len(args) != 1:
    print 'trade_refund_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_refund_to_balance(eval(args[0]),))

elif cmd == 'trade_refund_rollback_to_balance':
  if len(args) != 1:
    print 'trade_refund_rollback_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade_refund_rollback_to_balance(eval(args[0]),))

elif cmd == 'withdraw_to_balance':
  if len(args) != 1:
    print 'withdraw_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.withdraw_to_balance(eval(args[0]),))

elif cmd == 'settle_to_balance':
  if len(args) != 1:
    print 'settle_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.settle_to_balance(eval(args[0]),))

elif cmd == 'get_balance_account_info':
  if len(args) != 3:
    print 'get_balance_account_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_balance_account_info(args[0],args[1],eval(args[2]),))

elif cmd == 'get_user_bill':
  if len(args) != 1:
    print 'get_user_bill requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_user_bill(eval(args[0]),))

elif cmd == 'get_user_bill_v2':
  if len(args) != 1:
    print 'get_user_bill_v2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_user_bill_v2(eval(args[0]),))

elif cmd == 'remit_success_to_balance':
  if len(args) != 1:
    print 'remit_success_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit_success_to_balance(eval(args[0]),))

elif cmd == 'remit_fail_to_balance':
  if len(args) != 1:
    print 'remit_fail_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit_fail_to_balance(eval(args[0]),))

elif cmd == 'remit_return_to_balance':
  if len(args) != 1:
    print 'remit_return_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.remit_return_to_balance(eval(args[0]),))

elif cmd == 'batch_remit_success_to_balance':
  if len(args) != 1:
    print 'batch_remit_success_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.batch_remit_success_to_balance(eval(args[0]),))

elif cmd == 'manual_recharge_to_balance':
  if len(args) != 1:
    print 'manual_recharge_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.manual_recharge_to_balance(eval(args[0]),))

elif cmd == 'manual_recharge_to_proxy_balance':
  if len(args) != 1:
    print 'manual_recharge_to_proxy_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.manual_recharge_to_proxy_balance(eval(args[0]),))

elif cmd == 'disable_recharge_to_balance':
  if len(args) != 1:
    print 'disable_recharge_to_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.disable_recharge_to_balance(eval(args[0]),))

elif cmd == 'disable_recharge_to_proxy_balance':
  if len(args) != 1:
    print 'disable_recharge_to_proxy_balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.disable_recharge_to_proxy_balance(eval(args[0]),))

elif cmd == 'subscribe':
  if len(args) != 1:
    print 'subscribe requires 1 args'
    sys.exit(1)
  pp.pprint(client.subscribe(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
