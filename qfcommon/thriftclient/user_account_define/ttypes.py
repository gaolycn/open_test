#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AccountType:
  UNAVAILABLE = 0
  AVAILABLE = 1
  PROXY = 2

  _VALUES_TO_NAMES = {
    0: "UNAVAILABLE",
    1: "AVAILABLE",
    2: "PROXY",
  }

  _NAMES_TO_VALUES = {
    "UNAVAILABLE": 0,
    "AVAILABLE": 1,
    "PROXY": 2,
  }


class ServerException(Exception):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.error_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.I32, 1)
      oprot.writeI32(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceRet:
  """
  Attributes:
   - total_balance
   - available_balance
   - unavailable_balance
   - proxy_balance
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total_balance', None, None, ), # 1
    (2, TType.I32, 'available_balance', None, None, ), # 2
    (3, TType.I32, 'unavailable_balance', None, None, ), # 3
    (4, TType.I32, 'proxy_balance', None, None, ), # 4
  )

  def __init__(self, total_balance=None, available_balance=None, unavailable_balance=None, proxy_balance=None,):
    self.total_balance = total_balance
    self.available_balance = available_balance
    self.unavailable_balance = unavailable_balance
    self.proxy_balance = proxy_balance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.available_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.unavailable_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.proxy_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceRet')
    if self.total_balance is not None:
      oprot.writeFieldBegin('total_balance', TType.I32, 1)
      oprot.writeI32(self.total_balance)
      oprot.writeFieldEnd()
    if self.available_balance is not None:
      oprot.writeFieldBegin('available_balance', TType.I32, 2)
      oprot.writeI32(self.available_balance)
      oprot.writeFieldEnd()
    if self.unavailable_balance is not None:
      oprot.writeFieldBegin('unavailable_balance', TType.I32, 3)
      oprot.writeI32(self.unavailable_balance)
      oprot.writeFieldEnd()
    if self.proxy_balance is not None:
      oprot.writeFieldBegin('proxy_balance', TType.I32, 4)
      oprot.writeI32(self.proxy_balance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceArgs:
  """
  Attributes:
   - userid
   - src
   - change_amt
   - op_token
   - out_token
   - relate_op_token
   - other_side
   - product_name
   - biz_summary
   - note
   - memo
   - fee_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'change_amt', None, None, ), # 3
    (4, TType.STRING, 'op_token', None, None, ), # 4
    (5, TType.STRING, 'out_token', None, None, ), # 5
    (6, TType.STRING, 'relate_op_token', None, None, ), # 6
    (7, TType.STRING, 'other_side', None, None, ), # 7
    (8, TType.STRING, 'product_name', None, None, ), # 8
    (9, TType.STRING, 'biz_summary', None, None, ), # 9
    (10, TType.STRING, 'note', None, None, ), # 10
    (11, TType.STRING, 'memo', None, None, ), # 11
    (12, TType.I16, 'fee_type', None, None, ), # 12
  )

  def __init__(self, userid=None, src=None, change_amt=None, op_token=None, out_token=None, relate_op_token=None, other_side=None, product_name=None, biz_summary=None, note=None, memo=None, fee_type=None,):
    self.userid = userid
    self.src = src
    self.change_amt = change_amt
    self.op_token = op_token
    self.out_token = out_token
    self.relate_op_token = relate_op_token
    self.other_side = other_side
    self.product_name = product_name
    self.biz_summary = biz_summary
    self.note = note
    self.memo = memo
    self.fee_type = fee_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.change_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.out_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.relate_op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.other_side = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.product_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.biz_summary = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.fee_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I32, 3)
      oprot.writeI32(self.change_amt)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 4)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.out_token is not None:
      oprot.writeFieldBegin('out_token', TType.STRING, 5)
      oprot.writeString(self.out_token)
      oprot.writeFieldEnd()
    if self.relate_op_token is not None:
      oprot.writeFieldBegin('relate_op_token', TType.STRING, 6)
      oprot.writeString(self.relate_op_token)
      oprot.writeFieldEnd()
    if self.other_side is not None:
      oprot.writeFieldBegin('other_side', TType.STRING, 7)
      oprot.writeString(self.other_side)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 8)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.biz_summary is not None:
      oprot.writeFieldBegin('biz_summary', TType.STRING, 9)
      oprot.writeString(self.biz_summary)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 10)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 11)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.fee_type is not None:
      oprot.writeFieldBegin('fee_type', TType.I16, 12)
      oprot.writeI16(self.fee_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettleBalanceArgs:
  """
  Attributes:
   - userid
   - src
   - change_amt
   - op_token
   - fee
   - out_token
   - relate_op_token
   - other_side
   - product_name
   - biz_summary
   - note
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'change_amt', None, None, ), # 3
    (4, TType.STRING, 'op_token', None, None, ), # 4
    (5, TType.I32, 'fee', None, 0, ), # 5
    (6, TType.STRING, 'out_token', None, None, ), # 6
    (7, TType.STRING, 'relate_op_token', None, None, ), # 7
    (8, TType.STRING, 'other_side', None, None, ), # 8
    (9, TType.STRING, 'product_name', None, None, ), # 9
    (10, TType.STRING, 'biz_summary', None, None, ), # 10
    (11, TType.STRING, 'note', None, None, ), # 11
    (12, TType.STRING, 'memo', None, None, ), # 12
  )

  def __init__(self, userid=None, src=None, change_amt=None, op_token=None, fee=thrift_spec[5][4], out_token=None, relate_op_token=None, other_side=None, product_name=None, biz_summary=None, note=None, memo=None,):
    self.userid = userid
    self.src = src
    self.change_amt = change_amt
    self.op_token = op_token
    self.fee = fee
    self.out_token = out_token
    self.relate_op_token = relate_op_token
    self.other_side = other_side
    self.product_name = product_name
    self.biz_summary = biz_summary
    self.note = note
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.change_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.fee = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.out_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.relate_op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.other_side = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.product_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.biz_summary = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettleBalanceArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I32, 3)
      oprot.writeI32(self.change_amt)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 4)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I32, 5)
      oprot.writeI32(self.fee)
      oprot.writeFieldEnd()
    if self.out_token is not None:
      oprot.writeFieldBegin('out_token', TType.STRING, 6)
      oprot.writeString(self.out_token)
      oprot.writeFieldEnd()
    if self.relate_op_token is not None:
      oprot.writeFieldBegin('relate_op_token', TType.STRING, 7)
      oprot.writeString(self.relate_op_token)
      oprot.writeFieldEnd()
    if self.other_side is not None:
      oprot.writeFieldBegin('other_side', TType.STRING, 8)
      oprot.writeString(self.other_side)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 9)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.biz_summary is not None:
      oprot.writeFieldBegin('biz_summary', TType.STRING, 10)
      oprot.writeString(self.biz_summary)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 11)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 12)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillArgs:
  """
  Attributes:
   - userid
   - src
   - account_type
   - start_time
   - end_time
   - op_type
   - status
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'account_type', None, None, ), # 3
    (4, TType.STRING, 'start_time', None, None, ), # 4
    (5, TType.STRING, 'end_time', None, None, ), # 5
    (6, TType.I16, 'op_type', None, None, ), # 6
    (7, TType.I16, 'status', None, None, ), # 7
    (8, TType.I32, 'page', None, None, ), # 8
    (9, TType.I64, 'maxnum', None, None, ), # 9
  )

  def __init__(self, userid=None, src=None, account_type=None, start_time=None, end_time=None, op_type=None, status=None, page=None, maxnum=None,):
    self.userid = userid
    self.src = src
    self.account_type = account_type
    self.start_time = start_time
    self.end_time = end_time
    self.op_type = op_type
    self.status = status
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.account_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.op_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 3)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 4)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 5)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.I16, 6)
      oprot.writeI16(self.op_type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 7)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 8)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 9)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillArgsV2:
  """
  Attributes:
   - userid
   - src
   - account_type
   - start_time
   - end_time
   - op_type
   - status
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.LIST, 'account_type', (TType.I32,None), None, ), # 3
    (4, TType.STRING, 'start_time', None, None, ), # 4
    (5, TType.STRING, 'end_time', None, None, ), # 5
    (6, TType.LIST, 'op_type', (TType.I16,None), None, ), # 6
    (7, TType.LIST, 'status', (TType.I16,None), None, ), # 7
    (8, TType.I32, 'page', None, None, ), # 8
    (9, TType.I64, 'maxnum', None, None, ), # 9
  )

  def __init__(self, userid=None, src=None, account_type=None, start_time=None, end_time=None, op_type=None, status=None, page=None, maxnum=None,):
    self.userid = userid
    self.src = src
    self.account_type = account_type
    self.start_time = start_time
    self.end_time = end_time
    self.op_type = op_type
    self.status = status
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.account_type = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.account_type.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.start_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.op_type = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI16();
            self.op_type.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.status = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI16();
            self.status.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.maxnum = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillArgsV2')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.account_type))
      for iter18 in self.account_type:
        oprot.writeI32(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.STRING, 4)
      oprot.writeString(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.STRING, 5)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.LIST, 6)
      oprot.writeListBegin(TType.I16, len(self.op_type))
      for iter19 in self.op_type:
        oprot.writeI16(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.status))
      for iter20 in self.status:
        oprot.writeI16(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 8)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I64, 9)
      oprot.writeI64(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillItem:
  """
  Attributes:
   - change_amt
   - op_type
   - account_type
   - open_balance
   - close_balance
   - op_token
   - out_token
   - relate_op_token
   - status
   - other_side
   - product_name
   - biz_summary
   - note
   - create_time
   - fee_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'change_amt', None, None, ), # 1
    (2, TType.I16, 'op_type', None, None, ), # 2
    (3, TType.I32, 'account_type', None, None, ), # 3
    (4, TType.I32, 'open_balance', None, None, ), # 4
    (5, TType.I32, 'close_balance', None, None, ), # 5
    (6, TType.STRING, 'op_token', None, None, ), # 6
    (7, TType.STRING, 'out_token', None, None, ), # 7
    (8, TType.STRING, 'relate_op_token', None, None, ), # 8
    (9, TType.I16, 'status', None, None, ), # 9
    (10, TType.STRING, 'other_side', None, None, ), # 10
    (11, TType.STRING, 'product_name', None, None, ), # 11
    (12, TType.STRING, 'biz_summary', None, None, ), # 12
    (13, TType.STRING, 'note', None, None, ), # 13
    (14, TType.STRING, 'create_time', None, None, ), # 14
    (15, TType.I32, 'fee_amt', None, None, ), # 15
  )

  def __init__(self, change_amt=None, op_type=None, account_type=None, open_balance=None, close_balance=None, op_token=None, out_token=None, relate_op_token=None, status=None, other_side=None, product_name=None, biz_summary=None, note=None, create_time=None, fee_amt=None,):
    self.change_amt = change_amt
    self.op_type = op_type
    self.account_type = account_type
    self.open_balance = open_balance
    self.close_balance = close_balance
    self.op_token = op_token
    self.out_token = out_token
    self.relate_op_token = relate_op_token
    self.status = status
    self.other_side = other_side
    self.product_name = product_name
    self.biz_summary = biz_summary
    self.note = note
    self.create_time = create_time
    self.fee_amt = fee_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.change_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.op_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.account_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.open_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.close_balance = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.out_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.relate_op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.other_side = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.product_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.biz_summary = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.create_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.fee_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillItem')
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I32, 1)
      oprot.writeI32(self.change_amt)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.I16, 2)
      oprot.writeI16(self.op_type)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 3)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.open_balance is not None:
      oprot.writeFieldBegin('open_balance', TType.I32, 4)
      oprot.writeI32(self.open_balance)
      oprot.writeFieldEnd()
    if self.close_balance is not None:
      oprot.writeFieldBegin('close_balance', TType.I32, 5)
      oprot.writeI32(self.close_balance)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 6)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.out_token is not None:
      oprot.writeFieldBegin('out_token', TType.STRING, 7)
      oprot.writeString(self.out_token)
      oprot.writeFieldEnd()
    if self.relate_op_token is not None:
      oprot.writeFieldBegin('relate_op_token', TType.STRING, 8)
      oprot.writeString(self.relate_op_token)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 9)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.other_side is not None:
      oprot.writeFieldBegin('other_side', TType.STRING, 10)
      oprot.writeString(self.other_side)
      oprot.writeFieldEnd()
    if self.product_name is not None:
      oprot.writeFieldBegin('product_name', TType.STRING, 11)
      oprot.writeString(self.product_name)
      oprot.writeFieldEnd()
    if self.biz_summary is not None:
      oprot.writeFieldBegin('biz_summary', TType.STRING, 12)
      oprot.writeString(self.biz_summary)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 13)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.STRING, 14)
      oprot.writeString(self.create_time)
      oprot.writeFieldEnd()
    if self.fee_amt is not None:
      oprot.writeFieldBegin('fee_amt', TType.I32, 15)
      oprot.writeI32(self.fee_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BillRet:
  """
  Attributes:
   - total_count
   - bill_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'total_count', None, None, ), # 1
    (2, TType.LIST, 'bill_list', (TType.STRUCT,(BillItem, BillItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, total_count=None, bill_list=None,):
    self.total_count = total_count
    self.bill_list = bill_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.total_count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.bill_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = BillItem()
            _elem26.read(iprot)
            self.bill_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BillRet')
    if self.total_count is not None:
      oprot.writeFieldBegin('total_count', TType.I64, 1)
      oprot.writeI64(self.total_count)
      oprot.writeFieldEnd()
    if self.bill_list is not None:
      oprot.writeFieldBegin('bill_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.bill_list))
      for iter27 in self.bill_list:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BatchRemitArgs:
  """
  Attributes:
   - userid
   - src
   - change_amt
   - count
   - op_token
   - out_token
   - relate_op_token
   - biz_summary
   - note
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.I32, 'change_amt', None, None, ), # 3
    (4, TType.I32, 'count', None, None, ), # 4
    (5, TType.STRING, 'op_token', None, None, ), # 5
    (6, TType.STRING, 'out_token', None, None, ), # 6
    (7, TType.STRING, 'relate_op_token', None, None, ), # 7
    (8, TType.STRING, 'biz_summary', None, None, ), # 8
    (9, TType.STRING, 'note', None, None, ), # 9
    (10, TType.STRING, 'memo', None, None, ), # 10
  )

  def __init__(self, userid=None, src=None, change_amt=None, count=None, op_token=None, out_token=None, relate_op_token=None, biz_summary=None, note=None, memo=None,):
    self.userid = userid
    self.src = src
    self.change_amt = change_amt
    self.count = count
    self.op_token = op_token
    self.out_token = out_token
    self.relate_op_token = relate_op_token
    self.biz_summary = biz_summary
    self.note = note
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.change_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.out_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.relate_op_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.biz_summary = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BatchRemitArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.change_amt is not None:
      oprot.writeFieldBegin('change_amt', TType.I32, 3)
      oprot.writeI32(self.change_amt)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 5)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.out_token is not None:
      oprot.writeFieldBegin('out_token', TType.STRING, 6)
      oprot.writeString(self.out_token)
      oprot.writeFieldEnd()
    if self.relate_op_token is not None:
      oprot.writeFieldBegin('relate_op_token', TType.STRING, 7)
      oprot.writeString(self.relate_op_token)
      oprot.writeFieldEnd()
    if self.biz_summary is not None:
      oprot.writeFieldBegin('biz_summary', TType.STRING, 8)
      oprot.writeString(self.biz_summary)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 9)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 10)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.change_amt is None:
      raise TProtocol.TProtocolException(message='Required field change_amt is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    if self.op_token is None:
      raise TProtocol.TProtocolException(message='Required field op_token is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
