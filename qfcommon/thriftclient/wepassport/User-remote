#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import User
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string signup(string mobile, string passwd, string nickname)'
  print '  string login(string mobile, string passwd)'
  print '  string login2(string mobile)'
  print '  string logout(string userid,  sesid)'
  print '  string query( sesid)'
  print '  string remove(string mobile, string passwd,  sesid)'
  print '  string reset_password(string userid, string mobile, string passwd, string new_passwd)'
  print '  string password(string mobile)'
  print '  string save( sesid, string data)'
  print '  string getaddr(string userid)'
  print '  string setaddr(string userid, string lat, string lng, string area, string addr)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = User.Client(protocol)
transport.open()

if cmd == 'signup':
  if len(args) != 3:
    print 'signup requires 3 args'
    sys.exit(1)
  pp.pprint(client.signup(args[0],args[1],args[2],))

elif cmd == 'login':
  if len(args) != 2:
    print 'login requires 2 args'
    sys.exit(1)
  pp.pprint(client.login(args[0],args[1],))

elif cmd == 'login2':
  if len(args) != 1:
    print 'login2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.login2(args[0],))

elif cmd == 'logout':
  if len(args) != 2:
    print 'logout requires 2 args'
    sys.exit(1)
  pp.pprint(client.logout(args[0],eval(args[1]),))

elif cmd == 'query':
  if len(args) != 1:
    print 'query requires 1 args'
    sys.exit(1)
  pp.pprint(client.query(eval(args[0]),))

elif cmd == 'remove':
  if len(args) != 3:
    print 'remove requires 3 args'
    sys.exit(1)
  pp.pprint(client.remove(args[0],args[1],eval(args[2]),))

elif cmd == 'reset_password':
  if len(args) != 4:
    print 'reset_password requires 4 args'
    sys.exit(1)
  pp.pprint(client.reset_password(args[0],args[1],args[2],args[3],))

elif cmd == 'password':
  if len(args) != 1:
    print 'password requires 1 args'
    sys.exit(1)
  pp.pprint(client.password(args[0],))

elif cmd == 'save':
  if len(args) != 2:
    print 'save requires 2 args'
    sys.exit(1)
  pp.pprint(client.save(eval(args[0]),args[1],))

elif cmd == 'getaddr':
  if len(args) != 1:
    print 'getaddr requires 1 args'
    sys.exit(1)
  pp.pprint(client.getaddr(args[0],))

elif cmd == 'setaddr':
  if len(args) != 5:
    print 'setaddr requires 5 args'
    sys.exit(1)
  pp.pprint(client.setaddr(args[0],args[1],args[2],args[3],args[4],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
