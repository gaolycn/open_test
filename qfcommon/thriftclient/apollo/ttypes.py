#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RecommendType:
  SALESMAN = 1

  _VALUES_TO_NAMES = {
    1: "SALESMAN",
  }

  _NAMES_TO_VALUES = {
    "SALESMAN": 1,
  }


class UserCate:
  """
  Attributes:
   - code
   - name
   - ctime
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'ctime', None, None, ), # 3
    (4, TType.I32, 'status', None, 1, ), # 4
  )

  def __init__(self, code=None, name=None, ctime=None, status=thrift_spec[4][4],):
    self.code = code
    self.name = name
    self.ctime = ctime
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ctime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserCate')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 3)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.ctime)
    value = (value * 31) ^ hash(self.status)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserTag:
  """
  Attributes:
   - name
   - ctime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'ctime', None, None, ), # 2
  )

  def __init__(self, name=None, ctime=None,):
    self.name = name
    self.ctime = ctime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ctime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserTag')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 2)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.ctime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserService:
  """
  Attributes:
   - code
   - name
   - starttime
   - endtime
   - status
   - memo
   - ctime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'starttime', None, None, ), # 3
    (4, TType.STRING, 'endtime', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.STRING, 'memo', None, None, ), # 6
    (7, TType.STRING, 'ctime', None, None, ), # 7
  )

  def __init__(self, code=None, name=None, starttime=None, endtime=None, status=None, memo=None, ctime=None,):
    self.code = code
    self.name = name
    self.starttime = starttime
    self.endtime = endtime
    self.status = status
    self.memo = memo
    self.ctime = ctime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.starttime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.endtime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ctime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserService')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.STRING, 3)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.STRING, 4)
      oprot.writeString(self.endtime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 6)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.ctime is not None:
      oprot.writeFieldBegin('ctime', TType.STRING, 7)
      oprot.writeString(self.ctime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.starttime)
    value = (value * 31) ^ hash(self.endtime)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.ctime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BankInfo:
  """
  Attributes:
   - headbankname
   - bankuser
   - bankaccount
   - banktype
   - bankname
   - bankcode
   - bankProvince
   - bankCity
   - bankmobile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'headbankname', None, None, ), # 1
    (2, TType.STRING, 'bankuser', None, None, ), # 2
    (3, TType.STRING, 'bankaccount', None, None, ), # 3
    (4, TType.I32, 'banktype', None, 1, ), # 4
    (5, TType.STRING, 'bankname', None, None, ), # 5
    (6, TType.STRING, 'bankcode', None, None, ), # 6
    (7, TType.STRING, 'bankProvince', None, "", ), # 7
    (8, TType.STRING, 'bankCity', None, "", ), # 8
    (9, TType.STRING, 'bankmobile', None, "", ), # 9
  )

  def __init__(self, headbankname=None, bankuser=None, bankaccount=None, banktype=thrift_spec[4][4], bankname=None, bankcode=None, bankProvince=thrift_spec[7][4], bankCity=thrift_spec[8][4], bankmobile=thrift_spec[9][4],):
    self.headbankname = headbankname
    self.bankuser = bankuser
    self.bankaccount = bankaccount
    self.banktype = banktype
    self.bankname = bankname
    self.bankcode = bankcode
    self.bankProvince = bankProvince
    self.bankCity = bankCity
    self.bankmobile = bankmobile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.headbankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bankuser = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bankaccount = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.banktype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bankname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.bankcode = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.bankProvince = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.bankCity = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.bankmobile = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BankInfo')
    if self.headbankname is not None:
      oprot.writeFieldBegin('headbankname', TType.STRING, 1)
      oprot.writeString(self.headbankname)
      oprot.writeFieldEnd()
    if self.bankuser is not None:
      oprot.writeFieldBegin('bankuser', TType.STRING, 2)
      oprot.writeString(self.bankuser)
      oprot.writeFieldEnd()
    if self.bankaccount is not None:
      oprot.writeFieldBegin('bankaccount', TType.STRING, 3)
      oprot.writeString(self.bankaccount)
      oprot.writeFieldEnd()
    if self.banktype is not None:
      oprot.writeFieldBegin('banktype', TType.I32, 4)
      oprot.writeI32(self.banktype)
      oprot.writeFieldEnd()
    if self.bankname is not None:
      oprot.writeFieldBegin('bankname', TType.STRING, 5)
      oprot.writeString(self.bankname)
      oprot.writeFieldEnd()
    if self.bankcode is not None:
      oprot.writeFieldBegin('bankcode', TType.STRING, 6)
      oprot.writeString(self.bankcode)
      oprot.writeFieldEnd()
    if self.bankProvince is not None:
      oprot.writeFieldBegin('bankProvince', TType.STRING, 7)
      oprot.writeString(self.bankProvince)
      oprot.writeFieldEnd()
    if self.bankCity is not None:
      oprot.writeFieldBegin('bankCity', TType.STRING, 8)
      oprot.writeString(self.bankCity)
      oprot.writeFieldEnd()
    if self.bankmobile is not None:
      oprot.writeFieldBegin('bankmobile', TType.STRING, 9)
      oprot.writeString(self.bankmobile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.headbankname is None:
      raise TProtocol.TProtocolException(message='Required field headbankname is unset!')
    if self.bankuser is None:
      raise TProtocol.TProtocolException(message='Required field bankuser is unset!')
    if self.bankaccount is None:
      raise TProtocol.TProtocolException(message='Required field bankaccount is unset!')
    if self.banktype is None:
      raise TProtocol.TProtocolException(message='Required field banktype is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.headbankname)
    value = (value * 31) ^ hash(self.bankuser)
    value = (value * 31) ^ hash(self.bankaccount)
    value = (value * 31) ^ hash(self.banktype)
    value = (value * 31) ^ hash(self.bankname)
    value = (value * 31) ^ hash(self.bankcode)
    value = (value * 31) ^ hash(self.bankProvince)
    value = (value * 31) ^ hash(self.bankCity)
    value = (value * 31) ^ hash(self.bankmobile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - uid
   - name
   - shopname
   - email
   - mobile
   - telephone
   - password
   - state
   - idnumber
   - province
   - city
   - mcc
   - address
   - longitude
   - latitude
   - userCates
   - jointime
   - risklevel
   - groupid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.STRING, 'shopname', None, "", ), # 3
    (4, TType.STRING, 'email', None, "", ), # 4
    (5, TType.STRING, 'mobile', None, "", ), # 5
    (6, TType.STRING, 'telephone', None, None, ), # 6
    (7, TType.STRING, 'password', None, None, ), # 7
    (8, TType.I32, 'state', None, None, ), # 8
    (9, TType.STRING, 'idnumber', None, None, ), # 9
    (10, TType.STRING, 'province', None, None, ), # 10
    (11, TType.STRING, 'city', None, None, ), # 11
    (12, TType.STRING, 'mcc', None, None, ), # 12
    (13, TType.STRING, 'address', None, None, ), # 13
    (14, TType.DOUBLE, 'longitude', None, 0, ), # 14
    (15, TType.DOUBLE, 'latitude', None, 0, ), # 15
    (16, TType.LIST, 'userCates', (TType.STRUCT,(UserCate, UserCate.thrift_spec)), None, ), # 16
    (17, TType.STRING, 'jointime', None, None, ), # 17
    (18, TType.I32, 'risklevel', None, 0, ), # 18
    (19, TType.I32, 'groupid', None, 0, ), # 19
  )

  def __init__(self, uid=thrift_spec[1][4], name=thrift_spec[2][4], shopname=thrift_spec[3][4], email=thrift_spec[4][4], mobile=thrift_spec[5][4], telephone=None, password=None, state=None, idnumber=None, province=None, city=None, mcc=None, address=None, longitude=thrift_spec[14][4], latitude=thrift_spec[15][4], userCates=None, jointime=None, risklevel=thrift_spec[18][4], groupid=thrift_spec[19][4],):
    self.uid = uid
    self.name = name
    self.shopname = shopname
    self.email = email
    self.mobile = mobile
    self.telephone = telephone
    self.password = password
    self.state = state
    self.idnumber = idnumber
    self.province = province
    self.city = city
    self.mcc = mcc
    self.address = address
    self.longitude = longitude
    self.latitude = latitude
    self.userCates = userCates
    self.jointime = jointime
    self.risklevel = risklevel
    self.groupid = groupid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.shopname = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mobile = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.telephone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.password = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.state = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.idnumber = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.mcc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.userCates = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = UserCate()
            _elem5.read(iprot)
            self.userCates.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.jointime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.risklevel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.groupid = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.shopname is not None:
      oprot.writeFieldBegin('shopname', TType.STRING, 3)
      oprot.writeString(self.shopname)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 5)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.telephone is not None:
      oprot.writeFieldBegin('telephone', TType.STRING, 6)
      oprot.writeString(self.telephone)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 7)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 8)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.idnumber is not None:
      oprot.writeFieldBegin('idnumber', TType.STRING, 9)
      oprot.writeString(self.idnumber)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 10)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 11)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.mcc is not None:
      oprot.writeFieldBegin('mcc', TType.STRING, 12)
      oprot.writeString(self.mcc)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 13)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 14)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 15)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.userCates is not None:
      oprot.writeFieldBegin('userCates', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.userCates))
      for iter6 in self.userCates:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.jointime is not None:
      oprot.writeFieldBegin('jointime', TType.STRING, 17)
      oprot.writeString(self.jointime)
      oprot.writeFieldEnd()
    if self.risklevel is not None:
      oprot.writeFieldBegin('risklevel', TType.I32, 18)
      oprot.writeI32(self.risklevel)
      oprot.writeFieldEnd()
    if self.groupid is not None:
      oprot.writeFieldBegin('groupid', TType.I32, 19)
      oprot.writeI32(self.groupid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uid is None:
      raise TProtocol.TProtocolException(message='Required field uid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.shopname is None:
      raise TProtocol.TProtocolException(message='Required field shopname is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.mobile is None:
      raise TProtocol.TProtocolException(message='Required field mobile is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.shopname)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.mobile)
    value = (value * 31) ^ hash(self.telephone)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.idnumber)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.mcc)
    value = (value * 31) ^ hash(self.address)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.userCates)
    value = (value * 31) ^ hash(self.jointime)
    value = (value * 31) ^ hash(self.risklevel)
    value = (value * 31) ^ hash(self.groupid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfile:
  """
  Attributes:
   - uid
   - user
   - bankInfo
   - userTags
   - relations
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, 0, ), # 1
    (2, TType.STRUCT, 'user', (User, User.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'bankInfo', (BankInfo, BankInfo.thrift_spec), None, ), # 3
    (4, TType.LIST, 'userTags', (TType.STRUCT,(UserTag, UserTag.thrift_spec)), None, ), # 4
    (5, TType.LIST, 'relations', (TType.STRUCT,(User, User.thrift_spec)), None, ), # 5
  )

  def __init__(self, uid=thrift_spec[1][4], user=None, bankInfo=None, userTags=None, relations=None,):
    self.uid = uid
    self.user = user
    self.bankInfo = bankInfo
    self.userTags = userTags
    self.relations = relations

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.user = User()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.bankInfo = BankInfo()
          self.bankInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.userTags = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = UserTag()
            _elem12.read(iprot)
            self.userTags.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.relations = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = User()
            _elem18.read(iprot)
            self.relations.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfile')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 2)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.bankInfo is not None:
      oprot.writeFieldBegin('bankInfo', TType.STRUCT, 3)
      self.bankInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.userTags is not None:
      oprot.writeFieldBegin('userTags', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.userTags))
      for iter19 in self.userTags:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relations is not None:
      oprot.writeFieldBegin('relations', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.relations))
      for iter20 in self.relations:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uid is None:
      raise TProtocol.TProtocolException(message='Required field uid is unset!')
    if self.user is None:
      raise TProtocol.TProtocolException(message='Required field user is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.bankInfo)
    value = (value * 31) ^ hash(self.userTags)
    value = (value * 31) ^ hash(self.relations)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserQuery:
  """
  Attributes:
   - uids
   - mobiles
   - state
   - names
   - catenames
   - tagnames
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'mobiles', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'state', None, None, ), # 3
    (4, TType.LIST, 'names', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'catenames', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'tagnames', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, uids=None, mobiles=None, state=None, names=None, catenames=None, tagnames=None,):
    self.uids = uids
    self.mobiles = mobiles
    self.state = state
    self.names = names
    self.catenames = catenames
    self.tagnames = tagnames

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64()
            self.uids.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.mobiles = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString()
            self.mobiles.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.state = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.names = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = iprot.readString()
            self.names.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.catenames = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString()
            self.catenames.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.tagnames = []
          (_etype48, _size45) = iprot.readListBegin()
          for _i49 in xrange(_size45):
            _elem50 = iprot.readString()
            self.tagnames.append(_elem50)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserQuery')
    if self.uids is not None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.uids))
      for iter51 in self.uids:
        oprot.writeI64(iter51)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mobiles is not None:
      oprot.writeFieldBegin('mobiles', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.mobiles))
      for iter52 in self.mobiles:
        oprot.writeString(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 3)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.names is not None:
      oprot.writeFieldBegin('names', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.names))
      for iter53 in self.names:
        oprot.writeString(iter53)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.catenames is not None:
      oprot.writeFieldBegin('catenames', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.catenames))
      for iter54 in self.catenames:
        oprot.writeString(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagnames is not None:
      oprot.writeFieldBegin('tagnames', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.tagnames))
      for iter55 in self.tagnames:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uids)
    value = (value * 31) ^ hash(self.mobiles)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.names)
    value = (value * 31) ^ hash(self.catenames)
    value = (value * 31) ^ hash(self.tagnames)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserRelation:
  """
  Attributes:
   - userid
   - link_cate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'link_cate', None, None, ), # 2
  )

  def __init__(self, userid=None, link_cate=None,):
    self.userid = userid
    self.link_cate = link_cate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.link_cate = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserRelation')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.link_cate is not None:
      oprot.writeFieldBegin('link_cate', TType.STRING, 2)
      oprot.writeString(self.link_cate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.link_cate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Permission:
  """
  Attributes:
   - name
   - code
   - group
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.STRING, 'group', None, None, ), # 3
  )

  def __init__(self, name=None, code=None, group=None,):
    self.name = name
    self.code = code
    self.group = group

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.group = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Permission')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.group is not None:
      oprot.writeFieldBegin('group', TType.STRING, 3)
      oprot.writeString(self.group)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.group)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PermissionRole:
  """
  Attributes:
   - name
   - code
   - group
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'code', None, None, ), # 2
    (3, TType.STRING, 'group', None, None, ), # 3
  )

  def __init__(self, name=None, code=None, group=None,):
    self.name = name
    self.code = code
    self.group = group

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.group = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PermissionRole')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 2)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.group is not None:
      oprot.writeFieldBegin('group', TType.STRING, 3)
      oprot.writeString(self.group)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.code)
    value = (value * 31) ^ hash(self.group)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApolloException(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApolloException')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
