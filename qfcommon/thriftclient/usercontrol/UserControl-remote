#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from qfpay import UserControl
from qfpay.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string ping()'
  print '  UserResult login_3rd(string openid, i16 social_type, string nickname, string avatar, i16 key_type, i16 ref_app, i16 platform)'
  print '  UserResult bind_3rd_qfuser(string openid, i16 social_type, i32 qf_uid)'
  print '  UserResult create_3rd_qfuser(string openid, i16 social_type)'
  print '  string register_qfuser(string data)'
  print '  string login_qfuser(string data)'
  print '  string profile_qfuser(string data)'
  print '  string check_register(string data)'
  print '  string get_profile_qfuser(string data)'
  print '  string get_mobile(string data)'
  print '  string change_password(i32 userid, string oldpass, string newpass, i32 opuid)'
  print '  string signup_qfuser(string data)'
  print '  string set_risk_settle(i32 userid, i32 channel_id, i16 merchant_code)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = UserControl.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'login_3rd':
  if len(args) != 7:
    print 'login_3rd requires 7 args'
    sys.exit(1)
  pp.pprint(client.login_3rd(args[0],eval(args[1]),args[2],args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

elif cmd == 'bind_3rd_qfuser':
  if len(args) != 3:
    print 'bind_3rd_qfuser requires 3 args'
    sys.exit(1)
  pp.pprint(client.bind_3rd_qfuser(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'create_3rd_qfuser':
  if len(args) != 2:
    print 'create_3rd_qfuser requires 2 args'
    sys.exit(1)
  pp.pprint(client.create_3rd_qfuser(args[0],eval(args[1]),))

elif cmd == 'register_qfuser':
  if len(args) != 1:
    print 'register_qfuser requires 1 args'
    sys.exit(1)
  pp.pprint(client.register_qfuser(args[0],))

elif cmd == 'login_qfuser':
  if len(args) != 1:
    print 'login_qfuser requires 1 args'
    sys.exit(1)
  pp.pprint(client.login_qfuser(args[0],))

elif cmd == 'profile_qfuser':
  if len(args) != 1:
    print 'profile_qfuser requires 1 args'
    sys.exit(1)
  pp.pprint(client.profile_qfuser(args[0],))

elif cmd == 'check_register':
  if len(args) != 1:
    print 'check_register requires 1 args'
    sys.exit(1)
  pp.pprint(client.check_register(args[0],))

elif cmd == 'get_profile_qfuser':
  if len(args) != 1:
    print 'get_profile_qfuser requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_profile_qfuser(args[0],))

elif cmd == 'get_mobile':
  if len(args) != 1:
    print 'get_mobile requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_mobile(args[0],))

elif cmd == 'change_password':
  if len(args) != 4:
    print 'change_password requires 4 args'
    sys.exit(1)
  pp.pprint(client.change_password(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'signup_qfuser':
  if len(args) != 1:
    print 'signup_qfuser requires 1 args'
    sys.exit(1)
  pp.pprint(client.signup_qfuser(args[0],))

elif cmd == 'set_risk_settle':
  if len(args) != 3:
    print 'set_risk_settle requires 3 args'
    sys.exit(1)
  pp.pprint(client.set_risk_settle(eval(args[0]),eval(args[1]),eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
