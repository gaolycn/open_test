#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class AccountCheckError(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountCheckError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountCheckParam:
  """
  Attributes:
   - biz_id
   - chnl_id
   - trade_date
   - chnl_bat_id
   - acct_bat_id
   - biz_bat_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'biz_id', None, None, ), # 1
    (2, TType.I64, 'chnl_id', None, None, ), # 2
    (3, TType.STRING, 'trade_date', None, None, ), # 3
    (4, TType.I64, 'chnl_bat_id', None, None, ), # 4
    (5, TType.I64, 'acct_bat_id', None, None, ), # 5
    (6, TType.I64, 'biz_bat_id', None, None, ), # 6
  )

  def __init__(self, biz_id=None, chnl_id=None, trade_date=None, chnl_bat_id=None, acct_bat_id=None, biz_bat_id=None,):
    self.biz_id = biz_id
    self.chnl_id = chnl_id
    self.trade_date = trade_date
    self.chnl_bat_id = chnl_bat_id
    self.acct_bat_id = acct_bat_id
    self.biz_bat_id = biz_bat_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.trade_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.chnl_bat_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.acct_bat_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.biz_bat_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountCheckParam')
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 1)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 2)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    if self.trade_date is not None:
      oprot.writeFieldBegin('trade_date', TType.STRING, 3)
      oprot.writeString(self.trade_date)
      oprot.writeFieldEnd()
    if self.chnl_bat_id is not None:
      oprot.writeFieldBegin('chnl_bat_id', TType.I64, 4)
      oprot.writeI64(self.chnl_bat_id)
      oprot.writeFieldEnd()
    if self.acct_bat_id is not None:
      oprot.writeFieldBegin('acct_bat_id', TType.I64, 5)
      oprot.writeI64(self.acct_bat_id)
      oprot.writeFieldEnd()
    if self.biz_bat_id is not None:
      oprot.writeFieldBegin('biz_bat_id', TType.I64, 6)
      oprot.writeI64(self.biz_bat_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.biz_id is None:
      raise TProtocol.TProtocolException(message='Required field biz_id is unset!')
    if self.chnl_id is None:
      raise TProtocol.TProtocolException(message='Required field chnl_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.biz_id)
    value = (value * 31) ^ hash(self.chnl_id)
    value = (value * 31) ^ hash(self.trade_date)
    value = (value * 31) ^ hash(self.chnl_bat_id)
    value = (value * 31) ^ hash(self.acct_bat_id)
    value = (value * 31) ^ hash(self.biz_bat_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountCheckRet:
  """
  Attributes:
   - chnl_id
   - biz_id
   - check_date
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'chnl_id', None, None, ), # 1
    (2, TType.I64, 'biz_id', None, None, ), # 2
    (3, TType.STRING, 'check_date', None, None, ), # 3
    (4, TType.STRING, 'respcd', None, None, ), # 4
    (5, TType.STRING, 'respmsg', None, None, ), # 5
  )

  def __init__(self, chnl_id=None, biz_id=None, check_date=None, respcd=None, respmsg=None,):
    self.chnl_id = chnl_id
    self.biz_id = biz_id
    self.check_date = check_date
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.chnl_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.biz_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.check_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountCheckRet')
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.I64, 1)
      oprot.writeI64(self.chnl_id)
      oprot.writeFieldEnd()
    if self.biz_id is not None:
      oprot.writeFieldBegin('biz_id', TType.I64, 2)
      oprot.writeI64(self.biz_id)
      oprot.writeFieldEnd()
    if self.check_date is not None:
      oprot.writeFieldBegin('check_date', TType.STRING, 3)
      oprot.writeString(self.check_date)
      oprot.writeFieldEnd()
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 4)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 5)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.chnl_id is None:
      raise TProtocol.TProtocolException(message='Required field chnl_id is unset!')
    if self.biz_id is None:
      raise TProtocol.TProtocolException(message='Required field biz_id is unset!')
    if self.check_date is None:
      raise TProtocol.TProtocolException(message='Required field check_date is unset!')
    if self.respcd is None:
      raise TProtocol.TProtocolException(message='Required field respcd is unset!')
    if self.respmsg is None:
      raise TProtocol.TProtocolException(message='Required field respmsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.chnl_id)
    value = (value * 31) ^ hash(self.biz_id)
    value = (value * 31) ^ hash(self.check_date)
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
