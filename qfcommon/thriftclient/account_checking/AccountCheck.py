#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def ping(self):
    pass

  def parse_download_accountrecord(self, date):
    """
    Parameters:
     - date
    """
    pass

  def parse_download_bizrecord(self, date, chnl_name):
    """
    Parameters:
     - date
     - chnl_name
    """
    pass

  def parse_download_chnlrecord(self, chnl_name, date, isupload):
    """
    Parameters:
     - chnl_name
     - date
     - isupload
    """
    pass

  def check_by_biz(self, params):
    """
    Parameters:
     - params
    """
    pass

  def check_audit(self, check_bat_id):
    """
    Parameters:
     - check_bat_id
    """
    pass

  def unequal_audit(self, unequal_bat_id, optype):
    """
    Parameters:
     - unequal_bat_id
     - optype
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ping(self):
    self.send_ping()
    return self.recv_ping()

  def send_ping(self):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result");

  def parse_download_accountrecord(self, date):
    """
    Parameters:
     - date
    """
    self.send_parse_download_accountrecord(date)

  def send_parse_download_accountrecord(self, date):
    self._oprot.writeMessageBegin('parse_download_accountrecord', TMessageType.ONEWAY, self._seqid)
    args = parse_download_accountrecord_args()
    args.date = date
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def parse_download_bizrecord(self, date, chnl_name):
    """
    Parameters:
     - date
     - chnl_name
    """
    self.send_parse_download_bizrecord(date, chnl_name)

  def send_parse_download_bizrecord(self, date, chnl_name):
    self._oprot.writeMessageBegin('parse_download_bizrecord', TMessageType.ONEWAY, self._seqid)
    args = parse_download_bizrecord_args()
    args.date = date
    args.chnl_name = chnl_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def parse_download_chnlrecord(self, chnl_name, date, isupload):
    """
    Parameters:
     - chnl_name
     - date
     - isupload
    """
    self.send_parse_download_chnlrecord(chnl_name, date, isupload)

  def send_parse_download_chnlrecord(self, chnl_name, date, isupload):
    self._oprot.writeMessageBegin('parse_download_chnlrecord', TMessageType.ONEWAY, self._seqid)
    args = parse_download_chnlrecord_args()
    args.chnl_name = chnl_name
    args.date = date
    args.isupload = isupload
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def check_by_biz(self, params):
    """
    Parameters:
     - params
    """
    self.send_check_by_biz(params)

  def send_check_by_biz(self, params):
    self._oprot.writeMessageBegin('check_by_biz', TMessageType.ONEWAY, self._seqid)
    args = check_by_biz_args()
    args.params = params
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def check_audit(self, check_bat_id):
    """
    Parameters:
     - check_bat_id
    """
    self.send_check_audit(check_bat_id)
    return self.recv_check_audit()

  def send_check_audit(self, check_bat_id):
    self._oprot.writeMessageBegin('check_audit', TMessageType.CALL, self._seqid)
    args = check_audit_args()
    args.check_bat_id = check_bat_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_check_audit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = check_audit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "check_audit failed: unknown result");

  def unequal_audit(self, unequal_bat_id, optype):
    """
    Parameters:
     - unequal_bat_id
     - optype
    """
    self.send_unequal_audit(unequal_bat_id, optype)
    return self.recv_unequal_audit()

  def send_unequal_audit(self, unequal_bat_id, optype):
    self._oprot.writeMessageBegin('unequal_audit', TMessageType.CALL, self._seqid)
    args = unequal_audit_args()
    args.unequal_bat_id = unequal_bat_id
    args.optype = optype
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unequal_audit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unequal_audit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.e is not None:
      raise result.e
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unequal_audit failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["parse_download_accountrecord"] = Processor.process_parse_download_accountrecord
    self._processMap["parse_download_bizrecord"] = Processor.process_parse_download_bizrecord
    self._processMap["parse_download_chnlrecord"] = Processor.process_parse_download_chnlrecord
    self._processMap["check_by_biz"] = Processor.process_check_by_biz
    self._processMap["check_audit"] = Processor.process_check_audit
    self._processMap["unequal_audit"] = Processor.process_unequal_audit

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    result.success = self._handler.ping()
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_parse_download_accountrecord(self, seqid, iprot, oprot):
    args = parse_download_accountrecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.parse_download_accountrecord(args.date)
    return

  def process_parse_download_bizrecord(self, seqid, iprot, oprot):
    args = parse_download_bizrecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.parse_download_bizrecord(args.date, args.chnl_name)
    return

  def process_parse_download_chnlrecord(self, seqid, iprot, oprot):
    args = parse_download_chnlrecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.parse_download_chnlrecord(args.chnl_name, args.date, args.isupload)
    return

  def process_check_by_biz(self, seqid, iprot, oprot):
    args = check_by_biz_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.check_by_biz(args.params)
    return

  def process_check_audit(self, seqid, iprot, oprot):
    args = check_audit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = check_audit_result()
    try:
      result.success = self._handler.check_audit(args.check_bat_id)
    except AccountCheckError, e:
      result.e = e
    oprot.writeMessageBegin("check_audit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unequal_audit(self, seqid, iprot, oprot):
    args = unequal_audit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unequal_audit_result()
    try:
      result.success = self._handler.unequal_audit(args.unequal_bat_id, args.optype)
    except AccountCheckError, e:
      result.e = e
    oprot.writeMessageBegin("unequal_audit", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class parse_download_accountrecord_args:
  """
  Attributes:
   - date
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
  )

  def __init__(self, date=None,):
    self.date = date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('parse_download_accountrecord_args')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class parse_download_bizrecord_args:
  """
  Attributes:
   - date
   - chnl_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'date', None, None, ), # 1
    (2, TType.STRING, 'chnl_name', None, None, ), # 2
  )

  def __init__(self, date=None, chnl_name=None,):
    self.date = date
    self.chnl_name = chnl_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.chnl_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('parse_download_bizrecord_args')
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 1)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.chnl_name is not None:
      oprot.writeFieldBegin('chnl_name', TType.STRING, 2)
      oprot.writeString(self.chnl_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.chnl_name is None:
      raise TProtocol.TProtocolException(message='Required field chnl_name is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.chnl_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class parse_download_chnlrecord_args:
  """
  Attributes:
   - chnl_name
   - date
   - isupload
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'chnl_name', None, None, ), # 1
    (2, TType.STRING, 'date', None, None, ), # 2
    (3, TType.I16, 'isupload', None, None, ), # 3
  )

  def __init__(self, chnl_name=None, date=None, isupload=None,):
    self.chnl_name = chnl_name
    self.date = date
    self.isupload = isupload

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.chnl_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.isupload = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('parse_download_chnlrecord_args')
    if self.chnl_name is not None:
      oprot.writeFieldBegin('chnl_name', TType.STRING, 1)
      oprot.writeString(self.chnl_name)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 2)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.isupload is not None:
      oprot.writeFieldBegin('isupload', TType.I16, 3)
      oprot.writeI16(self.isupload)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.chnl_name is None:
      raise TProtocol.TProtocolException(message='Required field chnl_name is unset!')
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.isupload is None:
      raise TProtocol.TProtocolException(message='Required field isupload is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.chnl_name)
    value = (value * 31) ^ hash(self.date)
    value = (value * 31) ^ hash(self.isupload)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_by_biz_args:
  """
  Attributes:
   - params
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'params', (TType.STRUCT,(AccountCheckParam, AccountCheckParam.thrift_spec)), None, ), # 1
  )

  def __init__(self, params=None,):
    self.params = params

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.params = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = AccountCheckParam()
            _elem5.read(iprot)
            self.params.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_by_biz_args')
    if self.params is not None:
      oprot.writeFieldBegin('params', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.params))
      for iter6 in self.params:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.params is None:
      raise TProtocol.TProtocolException(message='Required field params is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.params)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_audit_args:
  """
  Attributes:
   - check_bat_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'check_bat_id', None, None, ), # 1
  )

  def __init__(self, check_bat_id=None,):
    self.check_bat_id = check_bat_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.check_bat_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_audit_args')
    if self.check_bat_id is not None:
      oprot.writeFieldBegin('check_bat_id', TType.I64, 1)
      oprot.writeI64(self.check_bat_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.check_bat_id is None:
      raise TProtocol.TProtocolException(message='Required field check_bat_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.check_bat_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_audit_result:
  """
  Attributes:
   - success
   - e
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (AccountCheckError, AccountCheckError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = AccountCheckError()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_audit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.e)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unequal_audit_args:
  """
  Attributes:
   - unequal_bat_id
   - optype
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'unequal_bat_id', None, None, ), # 1
    (2, TType.STRING, 'optype', None, None, ), # 2
  )

  def __init__(self, unequal_bat_id=None, optype=None,):
    self.unequal_bat_id = unequal_bat_id
    self.optype = optype

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.unequal_bat_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.optype = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unequal_audit_args')
    if self.unequal_bat_id is not None:
      oprot.writeFieldBegin('unequal_bat_id', TType.I64, 1)
      oprot.writeI64(self.unequal_bat_id)
      oprot.writeFieldEnd()
    if self.optype is not None:
      oprot.writeFieldBegin('optype', TType.STRING, 2)
      oprot.writeString(self.optype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.unequal_bat_id is None:
      raise TProtocol.TProtocolException(message='Required field unequal_bat_id is unset!')
    if self.optype is None:
      raise TProtocol.TProtocolException(message='Required field optype is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.unequal_bat_id)
    value = (value * 31) ^ hash(self.optype)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unequal_audit_result:
  """
  Attributes:
   - success
   - e
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'e', (AccountCheckError, AccountCheckError.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, e=None,):
    self.success = success
    self.e = e

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.e = AccountCheckError()
          self.e.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unequal_audit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.e is not None:
      oprot.writeFieldBegin('e', TType.STRUCT, 1)
      self.e.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.e)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
