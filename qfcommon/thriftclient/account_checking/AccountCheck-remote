#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from AccountCheck import AccountCheck
from AccountCheck.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping()')
  print('  void parse_download_accountrecord(string date)')
  print('  void parse_download_bizrecord(string date, string chnl_name)')
  print('  void parse_download_chnlrecord(string chnl_name, string date, i16 isupload)')
  print('  void check_by_biz( params)')
  print('  i32 check_audit(i64 check_bat_id)')
  print('  i32 unequal_audit(i64 unequal_bat_id, string optype)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = AccountCheck.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'parse_download_accountrecord':
  if len(args) != 1:
    print('parse_download_accountrecord requires 1 args')
    sys.exit(1)
  pp.pprint(client.parse_download_accountrecord(args[0],))

elif cmd == 'parse_download_bizrecord':
  if len(args) != 2:
    print('parse_download_bizrecord requires 2 args')
    sys.exit(1)
  pp.pprint(client.parse_download_bizrecord(args[0],args[1],))

elif cmd == 'parse_download_chnlrecord':
  if len(args) != 3:
    print('parse_download_chnlrecord requires 3 args')
    sys.exit(1)
  pp.pprint(client.parse_download_chnlrecord(args[0],args[1],eval(args[2]),))

elif cmd == 'check_by_biz':
  if len(args) != 1:
    print('check_by_biz requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_by_biz(eval(args[0]),))

elif cmd == 'check_audit':
  if len(args) != 1:
    print('check_audit requires 1 args')
    sys.exit(1)
  pp.pprint(client.check_audit(eval(args[0]),))

elif cmd == 'unequal_audit':
  if len(args) != 2:
    print('unequal_audit requires 2 args')
    sys.exit(1)
  pp.pprint(client.unequal_audit(eval(args[0]),args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
