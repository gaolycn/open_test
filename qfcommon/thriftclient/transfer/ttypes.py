#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TransFerError(TException):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransFerError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeedTransferRet:
  """
  Attributes:
   - amt
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'amt', None, None, ), # 1
    (2, TType.I64, 'count', None, None, ), # 2
  )

  def __init__(self, amt=None, count=None,):
    self.amt = amt
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.count = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeedTransferRet')
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 1)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 2)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BankrefundRet:
  """
  Attributes:
   - settle_sn
   - amt
   - memo
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'settle_sn', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
    (3, TType.STRING, 'memo', None, None, ), # 3
    (4, TType.I16, 'type', None, None, ), # 4
  )

  def __init__(self, settle_sn=None, amt=None, memo=None, type=None,):
    self.settle_sn = settle_sn
    self.amt = amt
    self.memo = memo
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.settle_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BankrefundRet')
    if self.settle_sn is not None:
      oprot.writeFieldBegin('settle_sn', TType.STRING, 1)
      oprot.writeString(self.settle_sn)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 3)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 4)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.settle_sn is None:
      raise TProtocol.TProtocolException(message='Required field settle_sn is unset!')
    if self.amt is None:
      raise TProtocol.TProtocolException(message='Required field amt is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TransFerChnl:
  """
  Attributes:
   - chnl_id
   - amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'chnl_id', None, None, ), # 1
    (2, TType.I64, 'amt', None, None, ), # 2
  )

  def __init__(self, chnl_id=None, amt=None,):
    self.chnl_id = chnl_id
    self.amt = amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.chnl_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TransFerChnl')
    if self.chnl_id is not None:
      oprot.writeFieldBegin('chnl_id', TType.STRING, 1)
      oprot.writeString(self.chnl_id)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I64, 2)
      oprot.writeI64(self.amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UsersChnlInfo:
  """
  Attributes:
   - userid
   - trans_subchnlid
   - bat_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'trans_subchnlid', None, None, ), # 2
    (3, TType.STRING, 'bat_id', None, None, ), # 3
  )

  def __init__(self, userid=None, trans_subchnlid=None, bat_id=None,):
    self.userid = userid
    self.trans_subchnlid = trans_subchnlid
    self.bat_id = bat_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trans_subchnlid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.bat_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UsersChnlInfo')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.trans_subchnlid is not None:
      oprot.writeFieldBegin('trans_subchnlid', TType.STRING, 2)
      oprot.writeString(self.trans_subchnlid)
      oprot.writeFieldEnd()
    if self.bat_id is not None:
      oprot.writeFieldBegin('bat_id', TType.STRING, 3)
      oprot.writeString(self.bat_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.bat_id is None:
      raise TProtocol.TProtocolException(message='Required field bat_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Capitalchangeret:
  """
  Attributes:
   - settle_amt
   - fee
   - month_fee
   - fixed_amt
   - chnl_amt
   - transfer_date
   - chnlid
   - memo
   - bat_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'settle_amt', None, None, ), # 1
    (2, TType.I64, 'fee', None, None, ), # 2
    (3, TType.I64, 'month_fee', None, None, ), # 3
    (4, TType.I64, 'fixed_amt', None, None, ), # 4
    (5, TType.I64, 'chnl_amt', None, None, ), # 5
    None, # 6
    (7, TType.I64, 'transfer_date', None, None, ), # 7
    (8, TType.I32, 'chnlid', None, None, ), # 8
    (9, TType.STRING, 'memo', None, None, ), # 9
    (10, TType.STRING, 'bat_id', None, "0", ), # 10
  )

  def __init__(self, settle_amt=None, fee=None, month_fee=None, fixed_amt=None, chnl_amt=None, transfer_date=None, chnlid=None, memo=None, bat_id=thrift_spec[10][4],):
    self.settle_amt = settle_amt
    self.fee = fee
    self.month_fee = month_fee
    self.fixed_amt = fixed_amt
    self.chnl_amt = chnl_amt
    self.transfer_date = transfer_date
    self.chnlid = chnlid
    self.memo = memo
    self.bat_id = bat_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.settle_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.fee = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.month_fee = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.fixed_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.chnl_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.transfer_date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.chnlid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.memo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.bat_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Capitalchangeret')
    if self.settle_amt is not None:
      oprot.writeFieldBegin('settle_amt', TType.I64, 1)
      oprot.writeI64(self.settle_amt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 2)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.month_fee is not None:
      oprot.writeFieldBegin('month_fee', TType.I64, 3)
      oprot.writeI64(self.month_fee)
      oprot.writeFieldEnd()
    if self.fixed_amt is not None:
      oprot.writeFieldBegin('fixed_amt', TType.I64, 4)
      oprot.writeI64(self.fixed_amt)
      oprot.writeFieldEnd()
    if self.chnl_amt is not None:
      oprot.writeFieldBegin('chnl_amt', TType.I64, 5)
      oprot.writeI64(self.chnl_amt)
      oprot.writeFieldEnd()
    if self.transfer_date is not None:
      oprot.writeFieldBegin('transfer_date', TType.I64, 7)
      oprot.writeI64(self.transfer_date)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.I32, 8)
      oprot.writeI32(self.chnlid)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 9)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.bat_id is not None:
      oprot.writeFieldBegin('bat_id', TType.STRING, 10)
      oprot.writeString(self.bat_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.chnlid is None:
      raise TProtocol.TProtocolException(message='Required field chnlid is unset!')
    if self.bat_id is None:
      raise TProtocol.TProtocolException(message='Required field bat_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
