#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from TransFer import TransFerService
from TransFer.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string ping()'
  print '  void hand_settle_records(string rule, string txcurrcd)'
  print '  void get_can_transfer(string txcurrcd)'
  print '  void get_withdraw_info()'
  print '  void gen_withdraw_record(string rule)'
  print '  void transferinfo(string bat_id)'
  print '  void generate_record_excel(string bat_id)'
  print '  string bankrefund( params)'
  print '  i64 refusereturn(string bat_id, string type)'
  print '  i64 allowreturn(string bat_id)'
  print '   get_transfer_chnl()'
  print '  i32 set_users_chnl( params)'
  print '  i32 verify_chnl(string bat_id, string type)'
  print '  i32 set_capitalchange_record(Capitalchangeret params)'
  print '  i32 verify_capitalchange(string bat_id, string type)'
  print '  i32 add_supplement_record(i64 userid, i64 amt, string reason)'
  print '  i32 supplement_apply(i64 bat_id)'
  print '  i32 supplement_audit(i64 bat_id)'
  print '  i32 supplement_audit_refuse(i64 bat_id)'
  print '  void paytransfer(i64 bat_id)'
  print '  void generate_payanother_excel(string bat_id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TransFerService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'hand_settle_records':
  if len(args) != 2:
    print 'hand_settle_records requires 2 args'
    sys.exit(1)
  pp.pprint(client.hand_settle_records(args[0],args[1],))

elif cmd == 'get_can_transfer':
  if len(args) != 1:
    print 'get_can_transfer requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_can_transfer(args[0],))

elif cmd == 'get_withdraw_info':
  if len(args) != 0:
    print 'get_withdraw_info requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_withdraw_info())

elif cmd == 'gen_withdraw_record':
  if len(args) != 1:
    print 'gen_withdraw_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.gen_withdraw_record(args[0],))

elif cmd == 'transferinfo':
  if len(args) != 1:
    print 'transferinfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.transferinfo(args[0],))

elif cmd == 'generate_record_excel':
  if len(args) != 1:
    print 'generate_record_excel requires 1 args'
    sys.exit(1)
  pp.pprint(client.generate_record_excel(args[0],))

elif cmd == 'bankrefund':
  if len(args) != 1:
    print 'bankrefund requires 1 args'
    sys.exit(1)
  pp.pprint(client.bankrefund(eval(args[0]),))

elif cmd == 'refusereturn':
  if len(args) != 2:
    print 'refusereturn requires 2 args'
    sys.exit(1)
  pp.pprint(client.refusereturn(args[0],args[1],))

elif cmd == 'allowreturn':
  if len(args) != 1:
    print 'allowreturn requires 1 args'
    sys.exit(1)
  pp.pprint(client.allowreturn(args[0],))

elif cmd == 'get_transfer_chnl':
  if len(args) != 0:
    print 'get_transfer_chnl requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_transfer_chnl())

elif cmd == 'set_users_chnl':
  if len(args) != 1:
    print 'set_users_chnl requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_users_chnl(eval(args[0]),))

elif cmd == 'verify_chnl':
  if len(args) != 2:
    print 'verify_chnl requires 2 args'
    sys.exit(1)
  pp.pprint(client.verify_chnl(args[0],args[1],))

elif cmd == 'set_capitalchange_record':
  if len(args) != 1:
    print 'set_capitalchange_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.set_capitalchange_record(eval(args[0]),))

elif cmd == 'verify_capitalchange':
  if len(args) != 2:
    print 'verify_capitalchange requires 2 args'
    sys.exit(1)
  pp.pprint(client.verify_capitalchange(args[0],args[1],))

elif cmd == 'add_supplement_record':
  if len(args) != 3:
    print 'add_supplement_record requires 3 args'
    sys.exit(1)
  pp.pprint(client.add_supplement_record(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'supplement_apply':
  if len(args) != 1:
    print 'supplement_apply requires 1 args'
    sys.exit(1)
  pp.pprint(client.supplement_apply(eval(args[0]),))

elif cmd == 'supplement_audit':
  if len(args) != 1:
    print 'supplement_audit requires 1 args'
    sys.exit(1)
  pp.pprint(client.supplement_audit(eval(args[0]),))

elif cmd == 'supplement_audit_refuse':
  if len(args) != 1:
    print 'supplement_audit_refuse requires 1 args'
    sys.exit(1)
  pp.pprint(client.supplement_audit_refuse(eval(args[0]),))

elif cmd == 'paytransfer':
  if len(args) != 1:
    print 'paytransfer requires 1 args'
    sys.exit(1)
  pp.pprint(client.paytransfer(eval(args[0]),))

elif cmd == 'generate_payanother_excel':
  if len(args) != 1:
    print 'generate_payanother_excel requires 1 args'
    sys.exit(1)
  pp.pprint(client.generate_payanother_excel(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
