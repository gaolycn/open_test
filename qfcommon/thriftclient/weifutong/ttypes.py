#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PAYTYPE:
  WEIXIN = 1
  ALIPAY = 2

  _VALUES_TO_NAMES = {
    1: "WEIXIN",
    2: "ALIPAY",
  }

  _NAMES_TO_VALUES = {
    "WEIXIN": 1,
    "ALIPAY": 2,
  }


class UpcertArg:
  """
  Attributes:
   - p_idcard_pic
   - r_idcard_pic
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'p_idcard_pic', None, None, ), # 1
    (2, TType.STRING, 'r_idcard_pic', None, None, ), # 2
  )

  def __init__(self, p_idcard_pic=None, r_idcard_pic=None,):
    self.p_idcard_pic = p_idcard_pic
    self.r_idcard_pic = r_idcard_pic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.p_idcard_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.r_idcard_pic = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpcertArg')
    if self.p_idcard_pic is not None:
      oprot.writeFieldBegin('p_idcard_pic', TType.STRING, 1)
      oprot.writeString(self.p_idcard_pic)
      oprot.writeFieldEnd()
    if self.r_idcard_pic is not None:
      oprot.writeFieldBegin('r_idcard_pic', TType.STRING, 2)
      oprot.writeString(self.r_idcard_pic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.p_idcard_pic is None:
      raise TProtocol.TProtocolException(message='Required field p_idcard_pic is unset!')
    if self.r_idcard_pic is None:
      raise TProtocol.TProtocolException(message='Required field r_idcard_pic is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PayConf:
  """
  Attributes:
   - paytype
   - bill_rate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'paytype', None, None, ), # 1
    (2, TType.STRING, 'bill_rate', None, None, ), # 2
  )

  def __init__(self, paytype=None, bill_rate=None,):
    self.paytype = paytype
    self.bill_rate = bill_rate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.paytype = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bill_rate = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PayConf')
    if self.paytype is not None:
      oprot.writeFieldBegin('paytype', TType.I32, 1)
      oprot.writeI32(self.paytype)
      oprot.writeFieldEnd()
    if self.bill_rate is not None:
      oprot.writeFieldBegin('bill_rate', TType.STRING, 2)
      oprot.writeString(self.bill_rate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.paytype is None:
      raise TProtocol.TProtocolException(message='Required field paytype is unset!')
    if self.bill_rate is None:
      raise TProtocol.TProtocolException(message='Required field bill_rate is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewCITIC:
  """
  Attributes:
   - userid
   - payconf
   - indentity_photo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'indentity_photo', None, None, ), # 3
  )

  def __init__(self, userid=None, payconf=None, indentity_photo=None,):
    self.userid = userid
    self.payconf = payconf
    self.indentity_photo = indentity_photo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = PayConf()
            _elem5.read(iprot)
            self.payconf.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewCITIC')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter6 in self.payconf:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 3)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewCEB:
  """
  Attributes:
   - userid
   - english_name
   - post_code
   - payconf
   - indentity_photo
   - active_eleacc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'english_name', None, None, ), # 2
    (3, TType.STRING, 'post_code', None, None, ), # 3
    (4, TType.LIST, 'payconf', (TType.STRUCT,(PayConf, PayConf.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'indentity_photo', None, None, ), # 5
    (6, TType.BOOL, 'active_eleacc', None, False, ), # 6
  )

  def __init__(self, userid=None, english_name=None, post_code=None, payconf=None, indentity_photo=None, active_eleacc=thrift_spec[6][4],):
    self.userid = userid
    self.english_name = english_name
    self.post_code = post_code
    self.payconf = payconf
    self.indentity_photo = indentity_photo
    self.active_eleacc = active_eleacc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.english_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.post_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.payconf = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = PayConf()
            _elem12.read(iprot)
            self.payconf.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.active_eleacc = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewCEB')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.english_name is not None:
      oprot.writeFieldBegin('english_name', TType.STRING, 2)
      oprot.writeString(self.english_name)
      oprot.writeFieldEnd()
    if self.post_code is not None:
      oprot.writeFieldBegin('post_code', TType.STRING, 3)
      oprot.writeString(self.post_code)
      oprot.writeFieldEnd()
    if self.payconf is not None:
      oprot.writeFieldBegin('payconf', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.payconf))
      for iter13 in self.payconf:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 5)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    if self.active_eleacc is not None:
      oprot.writeFieldBegin('active_eleacc', TType.BOOL, 6)
      oprot.writeBool(self.active_eleacc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.english_name is None:
      raise TProtocol.TProtocolException(message='Required field english_name is unset!')
    if self.post_code is None:
      raise TProtocol.TProtocolException(message='Required field post_code is unset!')
    if self.payconf is None:
      raise TProtocol.TProtocolException(message='Required field payconf is unset!')
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewQuery:
  """
  Attributes:
   - userid
   - st
   - et
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'st', None, None, ), # 2
    (3, TType.STRING, 'et', None, None, ), # 3
  )

  def __init__(self, userid=None, st=None, et=None,):
    self.userid = userid
    self.st = st
    self.et = et

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.st = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.et = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewQuery')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.st is not None:
      oprot.writeFieldBegin('st', TType.STRING, 2)
      oprot.writeString(self.st)
      oprot.writeFieldEnd()
    if self.et is not None:
      oprot.writeFieldBegin('et', TType.STRING, 3)
      oprot.writeString(self.et)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoreNewResult:
  """
  Attributes:
   - userid
   - merchant_id
   - out_merchant_id
   - active_api
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'merchant_id', None, None, ), # 2
    (3, TType.STRING, 'out_merchant_id', None, None, ), # 3
    (4, TType.STRING, 'active_api', None, None, ), # 4
  )

  def __init__(self, userid=None, merchant_id=None, out_merchant_id=None, active_api=None,):
    self.userid = userid
    self.merchant_id = merchant_id
    self.out_merchant_id = out_merchant_id
    self.active_api = active_api

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.active_api = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoreNewResult')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 2)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 3)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.active_api is not None:
      oprot.writeFieldBegin('active_api', TType.STRING, 4)
      oprot.writeString(self.active_api)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.out_merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field out_merchant_id is unset!')
    if self.active_api is None:
      raise TProtocol.TProtocolException(message='Required field active_api is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryResult:
  """
  Attributes:
   - merchant_id
   - out_merchant_id
   - userid
   - active_api
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'merchant_id', None, None, ), # 1
    (2, TType.STRING, 'out_merchant_id', None, None, ), # 2
    (3, TType.STRING, 'userid', None, None, ), # 3
    (4, TType.STRING, 'active_api', None, None, ), # 4
  )

  def __init__(self, merchant_id=None, out_merchant_id=None, userid=None, active_api=None,):
    self.merchant_id = merchant_id
    self.out_merchant_id = out_merchant_id
    self.userid = userid
    self.active_api = active_api

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.out_merchant_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.active_api = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryResult')
    if self.merchant_id is not None:
      oprot.writeFieldBegin('merchant_id', TType.STRING, 1)
      oprot.writeString(self.merchant_id)
      oprot.writeFieldEnd()
    if self.out_merchant_id is not None:
      oprot.writeFieldBegin('out_merchant_id', TType.STRING, 2)
      oprot.writeString(self.out_merchant_id)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 3)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.active_api is not None:
      oprot.writeFieldBegin('active_api', TType.STRING, 4)
      oprot.writeString(self.active_api)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field merchant_id is unset!')
    if self.out_merchant_id is None:
      raise TProtocol.TProtocolException(message='Required field out_merchant_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpcertResult:
  """
  Attributes:
   - indentity_photo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'indentity_photo', None, None, ), # 1
  )

  def __init__(self, indentity_photo=None,):
    self.indentity_photo = indentity_photo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.indentity_photo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpcertResult')
    if self.indentity_photo is not None:
      oprot.writeFieldBegin('indentity_photo', TType.STRING, 1)
      oprot.writeString(self.indentity_photo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.indentity_photo is None:
      raise TProtocol.TProtocolException(message='Required field indentity_photo is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WeifutongError(Exception):
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.respcd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WeifutongError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I32, 1)
      oprot.writeI32(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
