#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class BIZ_TYPE:
  RECHARGE = 1
  CONSUME = 2
  REFUND = 3

  _VALUES_TO_NAMES = {
    1: "RECHARGE",
    2: "CONSUME",
    3: "REFUND",
  }

  _NAMES_TO_VALUES = {
    "RECHARGE": 1,
    "CONSUME": 2,
    "REFUND": 3,
  }

class PREPAID_STATUS:
  TRADING = 0
  SUCCESS = 1
  FAILED = 2
  TIMEOUT = 3
  REFUNDED = 4

  _VALUES_TO_NAMES = {
    0: "TRADING",
    1: "SUCCESS",
    2: "FAILED",
    3: "TIMEOUT",
    4: "REFUNDED",
  }

  _NAMES_TO_VALUES = {
    "TRADING": 0,
    "SUCCESS": 1,
    "FAILED": 2,
    "TIMEOUT": 3,
    "REFUNDED": 4,
  }

class ERRCODE:
  INNER_SERVICE_ERR = 5000
  OUT_SERVICE_ERR = 5001
  SYSTEM_ERROR = 5002
  PARAM_ERROR = 6000
  INSUFFICIENT_BALANCE = 6100
  INVALID_BIZ_SN = 6101
  INVALID_SYSSN = 6102
  INVALID_STATUS = 6103
  INVALID_BIZ_TYPE = 6104
  PREPAID_UNUSED = 6105

  _VALUES_TO_NAMES = {
    5000: "INNER_SERVICE_ERR",
    5001: "OUT_SERVICE_ERR",
    5002: "SYSTEM_ERROR",
    6000: "PARAM_ERROR",
    6100: "INSUFFICIENT_BALANCE",
    6101: "INVALID_BIZ_SN",
    6102: "INVALID_SYSSN",
    6103: "INVALID_STATUS",
    6104: "INVALID_BIZ_TYPE",
    6105: "PREPAID_UNUSED",
  }

  _NAMES_TO_VALUES = {
    "INNER_SERVICE_ERR": 5000,
    "OUT_SERVICE_ERR": 5001,
    "SYSTEM_ERROR": 5002,
    "PARAM_ERROR": 6000,
    "INSUFFICIENT_BALANCE": 6100,
    "INVALID_BIZ_SN": 6101,
    "INVALID_SYSSN": 6102,
    "INVALID_STATUS": 6103,
    "INVALID_BIZ_TYPE": 6104,
    "PREPAID_UNUSED": 6105,
  }


class PrepaidError(TException):
  """
  Attributes:
   - respcd
   - resperr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'resperr', None, None, ), # 2
  )

  def __init__(self, respcd=None, resperr=None,):
    self.respcd = respcd
    self.resperr = resperr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.respcd = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resperr = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrepaidError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I32, 1)
      oprot.writeI32(self.respcd)
      oprot.writeFieldEnd()
    if self.resperr is not None:
      oprot.writeFieldBegin('resperr', TType.STRING, 2)
      oprot.writeString(self.resperr)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.resperr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PrepaidRecord:
  """
  Attributes:
   - cid
   - userid
   - biz_sn
   - syssn
   - status
   - biz_type
   - txamt
   - pay_amt
   - present_amt
   - orig_biz_sn
   - activity_id
   - sysdtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.STRING, 'biz_sn', None, None, ), # 3
    (4, TType.STRING, 'syssn', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.I32, 'biz_type', None, None, ), # 6
    (7, TType.I32, 'txamt', None, None, ), # 7
    (8, TType.I32, 'pay_amt', None, None, ), # 8
    (9, TType.I32, 'present_amt', None, None, ), # 9
    (10, TType.STRING, 'orig_biz_sn', None, None, ), # 10
    (11, TType.I64, 'activity_id', None, None, ), # 11
    (12, TType.STRING, 'sysdtm', None, None, ), # 12
  )

  def __init__(self, cid=None, userid=None, biz_sn=None, syssn=None, status=None, biz_type=None, txamt=None, pay_amt=None, present_amt=None, orig_biz_sn=None, activity_id=None, sysdtm=None,):
    self.cid = cid
    self.userid = userid
    self.biz_sn = biz_sn
    self.syssn = syssn
    self.status = status
    self.biz_type = biz_type
    self.txamt = txamt
    self.pay_amt = pay_amt
    self.present_amt = present_amt
    self.orig_biz_sn = orig_biz_sn
    self.activity_id = activity_id
    self.sysdtm = sysdtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.biz_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.txamt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.pay_amt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.present_amt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.orig_biz_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.sysdtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrepaidRecord')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 3)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 4)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.biz_type is not None:
      oprot.writeFieldBegin('biz_type', TType.I32, 6)
      oprot.writeI32(self.biz_type)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 7)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.pay_amt is not None:
      oprot.writeFieldBegin('pay_amt', TType.I32, 8)
      oprot.writeI32(self.pay_amt)
      oprot.writeFieldEnd()
    if self.present_amt is not None:
      oprot.writeFieldBegin('present_amt', TType.I32, 9)
      oprot.writeI32(self.present_amt)
      oprot.writeFieldEnd()
    if self.orig_biz_sn is not None:
      oprot.writeFieldBegin('orig_biz_sn', TType.STRING, 10)
      oprot.writeString(self.orig_biz_sn)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 11)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.STRING, 12)
      oprot.writeString(self.sysdtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.biz_type is None:
      raise TProtocol.TProtocolException(message='Required field biz_type is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.biz_sn)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.biz_type)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.pay_amt)
    value = (value * 31) ^ hash(self.present_amt)
    value = (value * 31) ^ hash(self.orig_biz_sn)
    value = (value * 31) ^ hash(self.activity_id)
    value = (value * 31) ^ hash(self.sysdtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BalanceInfo:
  """
  Attributes:
   - cid
   - userid
   - balance
   - first_use_dtm
   - last_recharge_dtm
   - last_consume_dtm
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'balance', None, None, ), # 3
    (4, TType.STRING, 'first_use_dtm', None, None, ), # 4
    (5, TType.STRING, 'last_recharge_dtm', None, None, ), # 5
    (6, TType.STRING, 'last_consume_dtm', None, None, ), # 6
  )

  def __init__(self, cid=None, userid=None, balance=None, first_use_dtm=None, last_recharge_dtm=None, last_consume_dtm=None,):
    self.cid = cid
    self.userid = userid
    self.balance = balance
    self.first_use_dtm = first_use_dtm
    self.last_recharge_dtm = last_recharge_dtm
    self.last_consume_dtm = last_consume_dtm

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.balance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.first_use_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.last_recharge_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.last_consume_dtm = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BalanceInfo')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.I32, 3)
      oprot.writeI32(self.balance)
      oprot.writeFieldEnd()
    if self.first_use_dtm is not None:
      oprot.writeFieldBegin('first_use_dtm', TType.STRING, 4)
      oprot.writeString(self.first_use_dtm)
      oprot.writeFieldEnd()
    if self.last_recharge_dtm is not None:
      oprot.writeFieldBegin('last_recharge_dtm', TType.STRING, 5)
      oprot.writeString(self.last_recharge_dtm)
      oprot.writeFieldEnd()
    if self.last_consume_dtm is not None:
      oprot.writeFieldBegin('last_consume_dtm', TType.STRING, 6)
      oprot.writeString(self.last_consume_dtm)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.balance is None:
      raise TProtocol.TProtocolException(message='Required field balance is unset!')
    if self.first_use_dtm is None:
      raise TProtocol.TProtocolException(message='Required field first_use_dtm is unset!')
    if self.last_recharge_dtm is None:
      raise TProtocol.TProtocolException(message='Required field last_recharge_dtm is unset!')
    if self.last_consume_dtm is None:
      raise TProtocol.TProtocolException(message='Required field last_consume_dtm is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.balance)
    value = (value * 31) ^ hash(self.first_use_dtm)
    value = (value * 31) ^ hash(self.last_recharge_dtm)
    value = (value * 31) ^ hash(self.last_consume_dtm)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RechargeArg:
  """
  Attributes:
   - cid
   - userid
   - activity_id
   - grid_index
   - pay_amt
   - present_amt
   - memo
   - openid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'activity_id', None, None, ), # 3
    (4, TType.I32, 'grid_index', None, None, ), # 4
    (5, TType.I32, 'pay_amt', None, None, ), # 5
    (6, TType.I32, 'present_amt', None, None, ), # 6
    (7, TType.STRING, 'memo', None, "", ), # 7
    (8, TType.STRING, 'openid', None, None, ), # 8
  )

  def __init__(self, cid=None, userid=None, activity_id=None, grid_index=None, pay_amt=None, present_amt=None, memo=thrift_spec[7][4], openid=None,):
    self.cid = cid
    self.userid = userid
    self.activity_id = activity_id
    self.grid_index = grid_index
    self.pay_amt = pay_amt
    self.present_amt = present_amt
    self.memo = memo
    self.openid = openid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.grid_index = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pay_amt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.present_amt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.openid = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RechargeArg')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 3)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.grid_index is not None:
      oprot.writeFieldBegin('grid_index', TType.I32, 4)
      oprot.writeI32(self.grid_index)
      oprot.writeFieldEnd()
    if self.pay_amt is not None:
      oprot.writeFieldBegin('pay_amt', TType.I32, 5)
      oprot.writeI32(self.pay_amt)
      oprot.writeFieldEnd()
    if self.present_amt is not None:
      oprot.writeFieldBegin('present_amt', TType.I32, 6)
      oprot.writeI32(self.present_amt)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 7)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 8)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.activity_id is None:
      raise TProtocol.TProtocolException(message='Required field activity_id is unset!')
    if self.grid_index is None:
      raise TProtocol.TProtocolException(message='Required field grid_index is unset!')
    if self.pay_amt is None:
      raise TProtocol.TProtocolException(message='Required field pay_amt is unset!')
    if self.present_amt is None:
      raise TProtocol.TProtocolException(message='Required field present_amt is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.activity_id)
    value = (value * 31) ^ hash(self.grid_index)
    value = (value * 31) ^ hash(self.pay_amt)
    value = (value * 31) ^ hash(self.present_amt)
    value = (value * 31) ^ hash(self.memo)
    value = (value * 31) ^ hash(self.openid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ConsumeArg:
  """
  Attributes:
   - cid
   - userid
   - txamt
   - syssn
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'txamt', None, None, ), # 3
    (4, TType.STRING, 'syssn', None, None, ), # 4
    (5, TType.STRING, 'memo', None, "", ), # 5
  )

  def __init__(self, cid=None, userid=None, txamt=None, syssn=None, memo=thrift_spec[5][4],):
    self.cid = cid
    self.userid = userid
    self.txamt = txamt
    self.syssn = syssn
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.txamt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ConsumeArg')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 3)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 4)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryArg:
  """
  Attributes:
   - syssn
   - cid
   - userid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'syssn', None, None, ), # 1
    (2, TType.I32, 'cid', None, None, ), # 2
    (3, TType.I64, 'userid', None, None, ), # 3
  )

  def __init__(self, syssn=None, cid=None, userid=None,):
    self.syssn = syssn
    self.cid = cid
    self.userid = userid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryArg')
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 1)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 2)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 3)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RefundArg:
  """
  Attributes:
   - syssn
   - refund_sn
   - cid
   - userid
   - txamt
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'syssn', None, None, ), # 1
    (2, TType.STRING, 'refund_sn', None, None, ), # 2
    (3, TType.I32, 'cid', None, None, ), # 3
    (4, TType.I64, 'userid', None, None, ), # 4
    (5, TType.I32, 'txamt', None, None, ), # 5
    (6, TType.STRING, 'memo', None, "", ), # 6
  )

  def __init__(self, syssn=None, refund_sn=None, cid=None, userid=None, txamt=None, memo=thrift_spec[6][4],):
    self.syssn = syssn
    self.refund_sn = refund_sn
    self.cid = cid
    self.userid = userid
    self.txamt = txamt
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.refund_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.txamt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RefundArg')
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 1)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.refund_sn is not None:
      oprot.writeFieldBegin('refund_sn', TType.STRING, 2)
      oprot.writeString(self.refund_sn)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 3)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 4)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 5)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 6)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.refund_sn is None:
      raise TProtocol.TProtocolException(message='Required field refund_sn is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.refund_sn)
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OPPrepaidBalanceArg:
  """
  Attributes:
   - cid
   - userid
   - txamt
   - biz_type
   - memo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'cid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I32, 'txamt', None, None, ), # 3
    (4, TType.I32, 'biz_type', None, None, ), # 4
    (5, TType.STRING, 'memo', None, None, ), # 5
  )

  def __init__(self, cid=None, userid=None, txamt=None, biz_type=None, memo=None,):
    self.cid = cid
    self.userid = userid
    self.txamt = txamt
    self.biz_type = biz_type
    self.memo = memo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.cid = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.txamt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.biz_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.memo = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OPPrepaidBalanceArg')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 1)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I32, 3)
      oprot.writeI32(self.txamt)
      oprot.writeFieldEnd()
    if self.biz_type is not None:
      oprot.writeFieldBegin('biz_type', TType.I32, 4)
      oprot.writeI32(self.biz_type)
      oprot.writeFieldEnd()
    if self.memo is not None:
      oprot.writeFieldBegin('memo', TType.STRING, 5)
      oprot.writeString(self.memo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.biz_type is None:
      raise TProtocol.TProtocolException(message='Required field biz_type is unset!')
    if self.memo is None:
      raise TProtocol.TProtocolException(message='Required field memo is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.txamt)
    value = (value * 31) ^ hash(self.biz_type)
    value = (value * 31) ^ hash(self.memo)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PrepaidNotifyArg:
  """
  Attributes:
   - biz_sn
   - syssn
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'biz_sn', None, None, ), # 1
    (2, TType.STRING, 'syssn', None, None, ), # 2
    (3, TType.STRING, 'respcd', None, None, ), # 3
    (4, TType.STRING, 'respmsg', None, None, ), # 4
  )

  def __init__(self, biz_sn=None, syssn=None, respcd=None, respmsg=None,):
    self.biz_sn = biz_sn
    self.syssn = syssn
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.biz_sn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrepaidNotifyArg')
    if self.biz_sn is not None:
      oprot.writeFieldBegin('biz_sn', TType.STRING, 1)
      oprot.writeString(self.biz_sn)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 2)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 3)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 4)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.biz_sn is None:
      raise TProtocol.TProtocolException(message='Required field biz_sn is unset!')
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.respcd is None:
      raise TProtocol.TProtocolException(message='Required field respcd is unset!')
    if self.respmsg is None:
      raise TProtocol.TProtocolException(message='Required field respmsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.biz_sn)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
