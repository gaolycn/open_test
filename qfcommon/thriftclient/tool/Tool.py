#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(object):
  def ping(self, ):
    pass

  def sendmail(self, toAdd, fromAdd, topic, content, files):
    """
    Parameters:
     - toAdd
     - fromAdd
     - topic
     - content
     - files
    """
    pass

  def sendsms(self, toAdd, content, route):
    """
    Parameters:
     - toAdd
     - content
     - route
    """
    pass

  def reportsms(self, to, json):
    """
    Parameters:
     - to
     - json
    """
    pass

  def reportmail(self, to, json):
    """
    Parameters:
     - to
     - json
    """
    pass

  def sendsms2(self, toAdd, content, route, role, sms_type):
    """
    Parameters:
     - toAdd
     - content
     - route
     - role
     - sms_type
    """
    pass

  def reportsms2(self, to, json, role, sms_type):
    """
    Parameters:
     - to
     - json
     - role
     - sms_type
    """
    pass

  def httpquery(self, json):
    """
    Parameters:
     - json
    """
    pass

  def apnspush(self, userid, message, device_tokens, badges, gateway_server, cert_string, fxappid, fxappkey, appname):
    """
    Parameters:
     - userid
     - message
     - device_tokens
     - badges
     - gateway_server
     - cert_string
     - fxappid
     - fxappkey
     - appname
    """
    pass

  def pushmsg(self, apptypes, platforms, mode, content, to, extra):
    """
    Parameters:
     - apptypes
     - platforms
     - mode
     - content
     - to
     - extra
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ping(self, ):
    self.send_ping()
    self.recv_ping()

  def send_ping(self, ):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def sendmail(self, toAdd, fromAdd, topic, content, files):
    """
    Parameters:
     - toAdd
     - fromAdd
     - topic
     - content
     - files
    """
    self.send_sendmail(toAdd, fromAdd, topic, content, files)

  def send_sendmail(self, toAdd, fromAdd, topic, content, files):
    self._oprot.writeMessageBegin('sendmail', TMessageType.CALL, self._seqid)
    args = sendmail_args()
    args.toAdd = toAdd
    args.fromAdd = fromAdd
    args.topic = topic
    args.content = content
    args.files = files
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def sendsms(self, toAdd, content, route):
    """
    Parameters:
     - toAdd
     - content
     - route
    """
    self.send_sendsms(toAdd, content, route)

  def send_sendsms(self, toAdd, content, route):
    self._oprot.writeMessageBegin('sendsms', TMessageType.CALL, self._seqid)
    args = sendsms_args()
    args.toAdd = toAdd
    args.content = content
    args.route = route
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def reportsms(self, to, json):
    """
    Parameters:
     - to
     - json
    """
    self.send_reportsms(to, json)

  def send_reportsms(self, to, json):
    self._oprot.writeMessageBegin('reportsms', TMessageType.CALL, self._seqid)
    args = reportsms_args()
    args.to = to
    args.json = json
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def reportmail(self, to, json):
    """
    Parameters:
     - to
     - json
    """
    self.send_reportmail(to, json)

  def send_reportmail(self, to, json):
    self._oprot.writeMessageBegin('reportmail', TMessageType.CALL, self._seqid)
    args = reportmail_args()
    args.to = to
    args.json = json
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def sendsms2(self, toAdd, content, route, role, sms_type):
    """
    Parameters:
     - toAdd
     - content
     - route
     - role
     - sms_type
    """
    self.send_sendsms2(toAdd, content, route, role, sms_type)
    return self.recv_sendsms2()

  def send_sendsms2(self, toAdd, content, route, role, sms_type):
    self._oprot.writeMessageBegin('sendsms2', TMessageType.CALL, self._seqid)
    args = sendsms2_args()
    args.toAdd = toAdd
    args.content = content
    args.route = route
    args.role = role
    args.sms_type = sms_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendsms2(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendsms2_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendsms2 failed: unknown result");

  def reportsms2(self, to, json, role, sms_type):
    """
    Parameters:
     - to
     - json
     - role
     - sms_type
    """
    self.send_reportsms2(to, json, role, sms_type)
    return self.recv_reportsms2()

  def send_reportsms2(self, to, json, role, sms_type):
    self._oprot.writeMessageBegin('reportsms2', TMessageType.CALL, self._seqid)
    args = reportsms2_args()
    args.to = to
    args.json = json
    args.role = role
    args.sms_type = sms_type
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reportsms2(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reportsms2_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reportsms2 failed: unknown result");

  def httpquery(self, json):
    """
    Parameters:
     - json
    """
    self.send_httpquery(json)

  def send_httpquery(self, json):
    self._oprot.writeMessageBegin('httpquery', TMessageType.CALL, self._seqid)
    args = httpquery_args()
    args.json = json
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def apnspush(self, userid, message, device_tokens, badges, gateway_server, cert_string, fxappid, fxappkey, appname):
    """
    Parameters:
     - userid
     - message
     - device_tokens
     - badges
     - gateway_server
     - cert_string
     - fxappid
     - fxappkey
     - appname
    """
    self.send_apnspush(userid, message, device_tokens, badges, gateway_server, cert_string, fxappid, fxappkey, appname)

  def send_apnspush(self, userid, message, device_tokens, badges, gateway_server, cert_string, fxappid, fxappkey, appname):
    self._oprot.writeMessageBegin('apnspush', TMessageType.CALL, self._seqid)
    args = apnspush_args()
    args.userid = userid
    args.message = message
    args.device_tokens = device_tokens
    args.badges = badges
    args.gateway_server = gateway_server
    args.cert_string = cert_string
    args.fxappid = fxappid
    args.fxappkey = fxappkey
    args.appname = appname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()
  def pushmsg(self, apptypes, platforms, mode, content, to, extra):
    """
    Parameters:
     - apptypes
     - platforms
     - mode
     - content
     - to
     - extra
    """
    self.send_pushmsg(apptypes, platforms, mode, content, to, extra)

  def send_pushmsg(self, apptypes, platforms, mode, content, to, extra):
    self._oprot.writeMessageBegin('pushmsg', TMessageType.CALL, self._seqid)
    args = pushmsg_args()
    args.apptypes = apptypes
    args.platforms = platforms
    args.mode = mode
    args.content = content
    args.to = to
    args.extra = extra
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["sendmail"] = Processor.process_sendmail
    self._processMap["sendsms"] = Processor.process_sendsms
    self._processMap["reportsms"] = Processor.process_reportsms
    self._processMap["reportmail"] = Processor.process_reportmail
    self._processMap["sendsms2"] = Processor.process_sendsms2
    self._processMap["reportsms2"] = Processor.process_reportsms2
    self._processMap["httpquery"] = Processor.process_httpquery
    self._processMap["apnspush"] = Processor.process_apnspush
    self._processMap["pushmsg"] = Processor.process_pushmsg

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    self._handler.ping()
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendmail(self, seqid, iprot, oprot):
    args = sendmail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.sendmail(args.toAdd, args.fromAdd, args.topic, args.content, args.files)
    return

  def process_sendsms(self, seqid, iprot, oprot):
    args = sendsms_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.sendsms(args.toAdd, args.content, args.route)
    return

  def process_reportsms(self, seqid, iprot, oprot):
    args = reportsms_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.reportsms(args.to, args.json)
    return

  def process_reportmail(self, seqid, iprot, oprot):
    args = reportmail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.reportmail(args.to, args.json)
    return

  def process_sendsms2(self, seqid, iprot, oprot):
    args = sendsms2_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendsms2_result()
    result.success = self._handler.sendsms2(args.toAdd, args.content, args.route, args.role, args.sms_type)
    oprot.writeMessageBegin("sendsms2", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reportsms2(self, seqid, iprot, oprot):
    args = reportsms2_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reportsms2_result()
    result.success = self._handler.reportsms2(args.to, args.json, args.role, args.sms_type)
    oprot.writeMessageBegin("reportsms2", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_httpquery(self, seqid, iprot, oprot):
    args = httpquery_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.httpquery(args.json)
    return

  def process_apnspush(self, seqid, iprot, oprot):
    args = apnspush_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.apnspush(args.userid, args.message, args.device_tokens, args.badges, args.gateway_server, args.cert_string, args.fxappid, args.fxappkey, args.appname)
    return

  def process_pushmsg(self, seqid, iprot, oprot):
    args = pushmsg_args()
    args.read(iprot)
    iprot.readMessageEnd()
    self._handler.pushmsg(args.apptypes, args.platforms, args.mode, args.content, args.to, args.extra)
    return


# HELPER FUNCTIONS AND STRUCTURES

class ping_args(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result(object):

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendmail_args(object):
  """
  Attributes:
   - toAdd
   - fromAdd
   - topic
   - content
   - files
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'toAdd', None, None, ), # 1
    (2, TType.STRING, 'fromAdd', None, None, ), # 2
    (3, TType.STRING, 'topic', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
    (5, TType.LIST, 'files', (TType.STRUCT,(FileInfo, FileInfo.thrift_spec)), None, ), # 5
  )

  def __init__(self, toAdd=None, fromAdd=None, topic=None, content=None, files=None,):
    self.toAdd = toAdd
    self.fromAdd = fromAdd
    self.topic = topic
    self.content = content
    self.files = files

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.toAdd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fromAdd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.topic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.files = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = FileInfo()
            _elem5.read(iprot)
            self.files.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendmail_args')
    if self.toAdd is not None:
      oprot.writeFieldBegin('toAdd', TType.STRING, 1)
      oprot.writeString(self.toAdd)
      oprot.writeFieldEnd()
    if self.fromAdd is not None:
      oprot.writeFieldBegin('fromAdd', TType.STRING, 2)
      oprot.writeString(self.fromAdd)
      oprot.writeFieldEnd()
    if self.topic is not None:
      oprot.writeFieldBegin('topic', TType.STRING, 3)
      oprot.writeString(self.topic)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.files is not None:
      oprot.writeFieldBegin('files', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.files))
      for iter6 in self.files:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendsms_args(object):
  """
  Attributes:
   - toAdd
   - content
   - route
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'toAdd', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'route', None, "umpay", ), # 3
  )

  def __init__(self, toAdd=None, content=None, route=thrift_spec[3][4],):
    self.toAdd = toAdd
    self.content = content
    self.route = route

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.toAdd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.route = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendsms_args')
    if self.toAdd is not None:
      oprot.writeFieldBegin('toAdd', TType.STRING, 1)
      oprot.writeString(self.toAdd)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.route is not None:
      oprot.writeFieldBegin('route', TType.STRING, 3)
      oprot.writeString(self.route)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportsms_args(object):
  """
  Attributes:
   - to
   - json
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'to', None, None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
  )

  def __init__(self, to=None, json=None,):
    self.to = to
    self.json = json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportsms_args')
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.STRING, 1)
      oprot.writeString(self.to)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportmail_args(object):
  """
  Attributes:
   - to
   - json
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'to', None, None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
  )

  def __init__(self, to=None, json=None,):
    self.to = to
    self.json = json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportmail_args')
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.STRING, 1)
      oprot.writeString(self.to)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendsms2_args(object):
  """
  Attributes:
   - toAdd
   - content
   - route
   - role
   - sms_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'toAdd', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'route', None, "umpay", ), # 3
    (4, TType.STRING, 'role', None, "unknown", ), # 4
    (5, TType.STRING, 'sms_type', None, "unknown", ), # 5
  )

  def __init__(self, toAdd=None, content=None, route=thrift_spec[3][4], role=thrift_spec[4][4], sms_type=thrift_spec[5][4],):
    self.toAdd = toAdd
    self.content = content
    self.route = route
    self.role = role
    self.sms_type = sms_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.toAdd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.route = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sms_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendsms2_args')
    if self.toAdd is not None:
      oprot.writeFieldBegin('toAdd', TType.STRING, 1)
      oprot.writeString(self.toAdd)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.route is not None:
      oprot.writeFieldBegin('route', TType.STRING, 3)
      oprot.writeString(self.route)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.STRING, 4)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.sms_type is not None:
      oprot.writeFieldBegin('sms_type', TType.STRING, 5)
      oprot.writeString(self.sms_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendsms2_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I16, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I16:
          self.success = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendsms2_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I16, 0)
      oprot.writeI16(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportsms2_args(object):
  """
  Attributes:
   - to
   - json
   - role
   - sms_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'to', None, None, ), # 1
    (2, TType.STRING, 'json', None, None, ), # 2
    (3, TType.STRING, 'role', None, "unknown", ), # 3
    (4, TType.STRING, 'sms_type', None, "unknown", ), # 4
  )

  def __init__(self, to=None, json=None, role=thrift_spec[3][4], sms_type=thrift_spec[4][4],):
    self.to = to
    self.json = json
    self.role = role
    self.sms_type = sms_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sms_type = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportsms2_args')
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.STRING, 1)
      oprot.writeString(self.to)
      oprot.writeFieldEnd()
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 2)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    if self.role is not None:
      oprot.writeFieldBegin('role', TType.STRING, 3)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.sms_type is not None:
      oprot.writeFieldBegin('sms_type', TType.STRING, 4)
      oprot.writeString(self.sms_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reportsms2_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I16, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I16:
          self.success = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reportsms2_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I16, 0)
      oprot.writeI16(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class httpquery_args(object):
  """
  Attributes:
   - json
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'json', None, None, ), # 1
  )

  def __init__(self, json=None,):
    self.json = json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('httpquery_args')
    if self.json is not None:
      oprot.writeFieldBegin('json', TType.STRING, 1)
      oprot.writeString(self.json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class apnspush_args(object):
  """
  Attributes:
   - userid
   - message
   - device_tokens
   - badges
   - gateway_server
   - cert_string
   - fxappid
   - fxappkey
   - appname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.LIST, 'device_tokens', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'badges', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'gateway_server', None, None, ), # 5
    (6, TType.STRING, 'cert_string', None, None, ), # 6
    (7, TType.STRING, 'fxappid', None, None, ), # 7
    (8, TType.STRING, 'fxappkey', None, None, ), # 8
    (9, TType.STRING, 'appname', None, None, ), # 9
  )

  def __init__(self, userid=None, message=None, device_tokens=None, badges=None, gateway_server=None, cert_string=None, fxappid=None, fxappkey=None, appname=None,):
    self.userid = userid
    self.message = message
    self.device_tokens = device_tokens
    self.badges = badges
    self.gateway_server = gateway_server
    self.cert_string = cert_string
    self.fxappid = fxappid
    self.fxappkey = fxappkey
    self.appname = appname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.device_tokens = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.device_tokens.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.badges = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI32();
            self.badges.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.gateway_server = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cert_string = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.fxappid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.fxappkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.appname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('apnspush_args')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.device_tokens is not None:
      oprot.writeFieldBegin('device_tokens', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.device_tokens))
      for iter19 in self.device_tokens:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.badges is not None:
      oprot.writeFieldBegin('badges', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.badges))
      for iter20 in self.badges:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gateway_server is not None:
      oprot.writeFieldBegin('gateway_server', TType.STRING, 5)
      oprot.writeString(self.gateway_server)
      oprot.writeFieldEnd()
    if self.cert_string is not None:
      oprot.writeFieldBegin('cert_string', TType.STRING, 6)
      oprot.writeString(self.cert_string)
      oprot.writeFieldEnd()
    if self.fxappid is not None:
      oprot.writeFieldBegin('fxappid', TType.STRING, 7)
      oprot.writeString(self.fxappid)
      oprot.writeFieldEnd()
    if self.fxappkey is not None:
      oprot.writeFieldBegin('fxappkey', TType.STRING, 8)
      oprot.writeString(self.fxappkey)
      oprot.writeFieldEnd()
    if self.appname is not None:
      oprot.writeFieldBegin('appname', TType.STRING, 9)
      oprot.writeString(self.appname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class pushmsg_args(object):
  """
  Attributes:
   - apptypes
   - platforms
   - mode
   - content
   - to
   - extra
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'apptypes', (TType.I32,None), None, ), # 1
    (2, TType.LIST, 'platforms', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'mode', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
    (5, TType.LIST, 'to', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'extra', None, None, ), # 6
  )

  def __init__(self, apptypes=None, platforms=None, mode=None, content=None, to=None, extra=None,):
    self.apptypes = apptypes
    self.platforms = platforms
    self.mode = mode
    self.content = content
    self.to = to
    self.extra = extra

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.apptypes = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.apptypes.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.platforms = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readI32();
            self.platforms.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.to = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = iprot.readString();
            self.to.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.extra = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('pushmsg_args')
    if self.apptypes is not None:
      oprot.writeFieldBegin('apptypes', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.apptypes))
      for iter39 in self.apptypes:
        oprot.writeI32(iter39)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.platforms is not None:
      oprot.writeFieldBegin('platforms', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.platforms))
      for iter40 in self.platforms:
        oprot.writeI32(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 3)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.to is not None:
      oprot.writeFieldBegin('to', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.to))
      for iter41 in self.to:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extra is not None:
      oprot.writeFieldBegin('extra', TType.STRING, 6)
      oprot.writeString(self.extra)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
