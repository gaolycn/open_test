#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Tool
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  void sendmail(string toAdd, string fromAdd, string topic, string content,  files)'
  print '  void sendsms(string toAdd, string content, string route)'
  print '  void reportsms(string to, string json)'
  print '  void reportmail(string to, string json)'
  print '  i16 sendsms2(string toAdd, string content, string route, string role, string sms_type)'
  print '  i16 reportsms2(string to, string json, string role, string sms_type)'
  print '  void httpquery(string json)'
  print '  void apnspush(string userid, string message,  device_tokens,  badges, string gateway_server, string cert_string, string fxappid, string fxappkey, string appname)'
  print '  void pushmsg( apptypes,  platforms, i32 mode, string content,  to, string extra)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Tool.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'sendmail':
  if len(args) != 5:
    print 'sendmail requires 5 args'
    sys.exit(1)
  pp.pprint(client.sendmail(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'sendsms':
  if len(args) != 3:
    print 'sendsms requires 3 args'
    sys.exit(1)
  pp.pprint(client.sendsms(args[0],args[1],args[2],))

elif cmd == 'reportsms':
  if len(args) != 2:
    print 'reportsms requires 2 args'
    sys.exit(1)
  pp.pprint(client.reportsms(args[0],args[1],))

elif cmd == 'reportmail':
  if len(args) != 2:
    print 'reportmail requires 2 args'
    sys.exit(1)
  pp.pprint(client.reportmail(args[0],args[1],))

elif cmd == 'sendsms2':
  if len(args) != 5:
    print 'sendsms2 requires 5 args'
    sys.exit(1)
  pp.pprint(client.sendsms2(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'reportsms2':
  if len(args) != 4:
    print 'reportsms2 requires 4 args'
    sys.exit(1)
  pp.pprint(client.reportsms2(args[0],args[1],args[2],args[3],))

elif cmd == 'httpquery':
  if len(args) != 1:
    print 'httpquery requires 1 args'
    sys.exit(1)
  pp.pprint(client.httpquery(args[0],))

elif cmd == 'apnspush':
  if len(args) != 9:
    print 'apnspush requires 9 args'
    sys.exit(1)
  pp.pprint(client.apnspush(args[0],args[1],eval(args[2]),eval(args[3]),args[4],args[5],args[6],args[7],args[8],))

elif cmd == 'pushmsg':
  if len(args) != 6:
    print 'pushmsg requires 6 args'
    sys.exit(1)
  pp.pprint(client.pushmsg(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),args[5],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
