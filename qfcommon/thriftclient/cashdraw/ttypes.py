#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ERRCODE:
  INNER_SERVICE_ERR = 5001
  OUT_SERVICE_ERR = 5002
  SYSTEM_MAINTAIN = 5003
  SYSTEM_ERROR = 5004
  LOGIC_ERROR = 6001
  CHNL_FAILED = 6002
  PARAM_ERROR = 6003

  _VALUES_TO_NAMES = {
    5001: "INNER_SERVICE_ERR",
    5002: "OUT_SERVICE_ERR",
    5003: "SYSTEM_MAINTAIN",
    5004: "SYSTEM_ERROR",
    6001: "LOGIC_ERROR",
    6002: "CHNL_FAILED",
    6003: "PARAM_ERROR",
  }

  _NAMES_TO_VALUES = {
    "INNER_SERVICE_ERR": 5001,
    "OUT_SERVICE_ERR": 5002,
    "SYSTEM_MAINTAIN": 5003,
    "SYSTEM_ERROR": 5004,
    "LOGIC_ERROR": 6001,
    "CHNL_FAILED": 6002,
    "PARAM_ERROR": 6003,
  }

class TradeStatus:
  SUCCESS = 0
  FAILED = 1
  PROCESSING = 2
  TIMEOUT = 3
  REFUNDED = 4

  _VALUES_TO_NAMES = {
    0: "SUCCESS",
    1: "FAILED",
    2: "PROCESSING",
    3: "TIMEOUT",
    4: "REFUNDED",
  }

  _NAMES_TO_VALUES = {
    "SUCCESS": 0,
    "FAILED": 1,
    "PROCESSING": 2,
    "TIMEOUT": 3,
    "REFUNDED": 4,
  }

class AccountType:
  CORPORATE = 1
  PERSONAL = 2

  _VALUES_TO_NAMES = {
    1: "CORPORATE",
    2: "PERSONAL",
  }

  _NAMES_TO_VALUES = {
    "CORPORATE": 1,
    "PERSONAL": 2,
  }

class CardType:
  DE = 1
  CR = 2

  _VALUES_TO_NAMES = {
    1: "DE",
    2: "CR",
  }

  _NAMES_TO_VALUES = {
    "DE": 1,
    "CR": 2,
  }

class ChnlFlag:
  HUIYI = 1
  JD = 2
  TFB = 3

  _VALUES_TO_NAMES = {
    1: "HUIYI",
    2: "JD",
    3: "TFB",
  }

  _NAMES_TO_VALUES = {
    "HUIYI": 1,
    "JD": 2,
    "TFB": 3,
  }


class CashdrawError(Exception):
  """
  Attributes:
   - respcd
   - resperr
   - ext_json
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'resperr', None, None, ), # 2
    (3, TType.STRING, 'ext_json', None, None, ), # 3
  )

  def __init__(self, respcd=None, resperr=None, ext_json=None,):
    self.respcd = respcd
    self.resperr = resperr
    self.ext_json = ext_json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.respcd = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resperr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ext_json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CashdrawError')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.I32, 1)
      oprot.writeI32(self.respcd)
      oprot.writeFieldEnd()
    if self.resperr is not None:
      oprot.writeFieldBegin('resperr', TType.STRING, 2)
      oprot.writeString(self.resperr)
      oprot.writeFieldEnd()
    if self.ext_json is not None:
      oprot.writeFieldBegin('ext_json', TType.STRING, 3)
      oprot.writeString(self.ext_json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PriInfo:
  """
  Attributes:
   - account_no
   - account_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'account_no', None, None, ), # 1
    (2, TType.STRING, 'account_name', None, None, ), # 2
  )

  def __init__(self, account_no=None, account_name=None,):
    self.account_no = account_no
    self.account_name = account_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.account_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.account_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PriInfo')
    if self.account_no is not None:
      oprot.writeFieldBegin('account_no', TType.STRING, 1)
      oprot.writeString(self.account_no)
      oprot.writeFieldEnd()
    if self.account_name is not None:
      oprot.writeFieldBegin('account_name', TType.STRING, 2)
      oprot.writeString(self.account_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PyeInfo:
  """
  Attributes:
   - account_no
   - account_name
   - account_type
   - bank_no
   - bank_name
   - card_type
   - card_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'account_no', None, None, ), # 1
    (2, TType.STRING, 'account_name', None, None, ), # 2
    (3, TType.I32, 'account_type', None, None, ), # 3
    (4, TType.STRING, 'bank_no', None, None, ), # 4
    (5, TType.STRING, 'bank_name', None, None, ), # 5
    (6, TType.I32, 'card_type', None, None, ), # 6
    (7, TType.STRING, 'card_code', None, None, ), # 7
  )

  def __init__(self, account_no=None, account_name=None, account_type=None, bank_no=None, bank_name=None, card_type=None, card_code=None,):
    self.account_no = account_no
    self.account_name = account_name
    self.account_type = account_type
    self.bank_no = bank_no
    self.bank_name = bank_name
    self.card_type = card_type
    self.card_code = card_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.account_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.account_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.account_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bank_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bank_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.card_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.card_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PyeInfo')
    if self.account_no is not None:
      oprot.writeFieldBegin('account_no', TType.STRING, 1)
      oprot.writeString(self.account_no)
      oprot.writeFieldEnd()
    if self.account_name is not None:
      oprot.writeFieldBegin('account_name', TType.STRING, 2)
      oprot.writeString(self.account_name)
      oprot.writeFieldEnd()
    if self.account_type is not None:
      oprot.writeFieldBegin('account_type', TType.I32, 3)
      oprot.writeI32(self.account_type)
      oprot.writeFieldEnd()
    if self.bank_no is not None:
      oprot.writeFieldBegin('bank_no', TType.STRING, 4)
      oprot.writeString(self.bank_no)
      oprot.writeFieldEnd()
    if self.bank_name is not None:
      oprot.writeFieldBegin('bank_name', TType.STRING, 5)
      oprot.writeString(self.bank_name)
      oprot.writeFieldEnd()
    if self.card_type is not None:
      oprot.writeFieldBegin('card_type', TType.I32, 6)
      oprot.writeI32(self.card_type)
      oprot.writeFieldEnd()
    if self.card_code is not None:
      oprot.writeFieldBegin('card_code', TType.STRING, 7)
      oprot.writeString(self.card_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeConf:
  """
  Attributes:
   - chnl_flag
   - ins_id_cd
   - mchnt_cd
   - bus_cd
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chnl_flag', None, None, ), # 1
    (2, TType.STRING, 'ins_id_cd', None, None, ), # 2
    (3, TType.STRING, 'mchnt_cd', None, None, ), # 3
    (4, TType.STRING, 'bus_cd', None, None, ), # 4
  )

  def __init__(self, chnl_flag=None, ins_id_cd=None, mchnt_cd=None, bus_cd=None,):
    self.chnl_flag = chnl_flag
    self.ins_id_cd = ins_id_cd
    self.mchnt_cd = mchnt_cd
    self.bus_cd = bus_cd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chnl_flag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ins_id_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.bus_cd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeConf')
    if self.chnl_flag is not None:
      oprot.writeFieldBegin('chnl_flag', TType.I32, 1)
      oprot.writeI32(self.chnl_flag)
      oprot.writeFieldEnd()
    if self.ins_id_cd is not None:
      oprot.writeFieldBegin('ins_id_cd', TType.STRING, 2)
      oprot.writeString(self.ins_id_cd)
      oprot.writeFieldEnd()
    if self.mchnt_cd is not None:
      oprot.writeFieldBegin('mchnt_cd', TType.STRING, 3)
      oprot.writeString(self.mchnt_cd)
      oprot.writeFieldEnd()
    if self.bus_cd is not None:
      oprot.writeFieldBegin('bus_cd', TType.STRING, 4)
      oprot.writeString(self.bus_cd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.chnl_flag is None:
      raise TProtocol.TProtocolException(message='Required field chnl_flag is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pay4AnotherArg:
  """
  Attributes:
   - pri_info
   - pye_info
   - trade_conf
   - syssn
   - sysdtm
   - txamt
   - purpose
   - pos_script
   - qf_reversed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'pri_info', (PriInfo, PriInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'pye_info', (PyeInfo, PyeInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'trade_conf', (TradeConf, TradeConf.thrift_spec), None, ), # 3
    (4, TType.STRING, 'syssn', None, None, ), # 4
    (5, TType.STRING, 'sysdtm', None, None, ), # 5
    (6, TType.I64, 'txamt', None, None, ), # 6
    (7, TType.STRING, 'purpose', None, "qfpay", ), # 7
    (8, TType.STRING, 'pos_script', None, "qfpay", ), # 8
    (9, TType.STRING, 'qf_reversed', None, None, ), # 9
  )

  def __init__(self, pri_info=None, pye_info=None, trade_conf=None, syssn=None, sysdtm=None, txamt=None, purpose=thrift_spec[7][4], pos_script=thrift_spec[8][4], qf_reversed=None,):
    self.pri_info = pri_info
    self.pye_info = pye_info
    self.trade_conf = trade_conf
    self.syssn = syssn
    self.sysdtm = sysdtm
    self.txamt = txamt
    self.purpose = purpose
    self.pos_script = pos_script
    self.qf_reversed = qf_reversed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.pri_info = PriInfo()
          self.pri_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.pye_info = PyeInfo()
          self.pye_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trade_conf = TradeConf()
          self.trade_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.syssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sysdtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.purpose = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.pos_script = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.qf_reversed = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pay4AnotherArg')
    if self.pri_info is not None:
      oprot.writeFieldBegin('pri_info', TType.STRUCT, 1)
      self.pri_info.write(oprot)
      oprot.writeFieldEnd()
    if self.pye_info is not None:
      oprot.writeFieldBegin('pye_info', TType.STRUCT, 2)
      self.pye_info.write(oprot)
      oprot.writeFieldEnd()
    if self.trade_conf is not None:
      oprot.writeFieldBegin('trade_conf', TType.STRUCT, 3)
      self.trade_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 4)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.STRING, 5)
      oprot.writeString(self.sysdtm)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I64, 6)
      oprot.writeI64(self.txamt)
      oprot.writeFieldEnd()
    if self.purpose is not None:
      oprot.writeFieldBegin('purpose', TType.STRING, 7)
      oprot.writeString(self.purpose)
      oprot.writeFieldEnd()
    if self.pos_script is not None:
      oprot.writeFieldBegin('pos_script', TType.STRING, 8)
      oprot.writeString(self.pos_script)
      oprot.writeFieldEnd()
    if self.qf_reversed is not None:
      oprot.writeFieldBegin('qf_reversed', TType.STRING, 9)
      oprot.writeString(self.qf_reversed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.pri_info is None:
      raise TProtocol.TProtocolException(message='Required field pri_info is unset!')
    if self.pye_info is None:
      raise TProtocol.TProtocolException(message='Required field pye_info is unset!')
    if self.trade_conf is None:
      raise TProtocol.TProtocolException(message='Required field trade_conf is unset!')
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    if self.txamt is None:
      raise TProtocol.TProtocolException(message='Required field txamt is unset!')
    if self.purpose is None:
      raise TProtocol.TProtocolException(message='Required field purpose is unset!')
    if self.pos_script is None:
      raise TProtocol.TProtocolException(message='Required field pos_script is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pay4AnotherQueryArg:
  """
  Attributes:
   - syssn
   - sysdtm
   - origssn
   - origdtm
   - trade_conf
   - qf_reversed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'syssn', None, None, ), # 1
    (2, TType.STRING, 'sysdtm', None, None, ), # 2
    (3, TType.STRING, 'origssn', None, None, ), # 3
    (4, TType.STRING, 'origdtm', None, None, ), # 4
    (5, TType.STRUCT, 'trade_conf', (TradeConf, TradeConf.thrift_spec), None, ), # 5
    (6, TType.STRING, 'qf_reversed', None, None, ), # 6
  )

  def __init__(self, syssn=None, sysdtm=None, origssn=None, origdtm=None, trade_conf=None, qf_reversed=None,):
    self.syssn = syssn
    self.sysdtm = sysdtm
    self.origssn = origssn
    self.origdtm = origdtm
    self.trade_conf = trade_conf
    self.qf_reversed = qf_reversed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.syssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sysdtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.origssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.origdtm = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.trade_conf = TradeConf()
          self.trade_conf.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.qf_reversed = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pay4AnotherQueryArg')
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 1)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.sysdtm is not None:
      oprot.writeFieldBegin('sysdtm', TType.STRING, 2)
      oprot.writeString(self.sysdtm)
      oprot.writeFieldEnd()
    if self.origssn is not None:
      oprot.writeFieldBegin('origssn', TType.STRING, 3)
      oprot.writeString(self.origssn)
      oprot.writeFieldEnd()
    if self.origdtm is not None:
      oprot.writeFieldBegin('origdtm', TType.STRING, 4)
      oprot.writeString(self.origdtm)
      oprot.writeFieldEnd()
    if self.trade_conf is not None:
      oprot.writeFieldBegin('trade_conf', TType.STRUCT, 5)
      self.trade_conf.write(oprot)
      oprot.writeFieldEnd()
    if self.qf_reversed is not None:
      oprot.writeFieldBegin('qf_reversed', TType.STRING, 6)
      oprot.writeString(self.qf_reversed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.sysdtm is None:
      raise TProtocol.TProtocolException(message='Required field sysdtm is unset!')
    if self.origssn is None:
      raise TProtocol.TProtocolException(message='Required field origssn is unset!')
    if self.origdtm is None:
      raise TProtocol.TProtocolException(message='Required field origdtm is unset!')
    if self.trade_conf is None:
      raise TProtocol.TProtocolException(message='Required field trade_conf is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeInfo:
  """
  Attributes:
   - syssn
   - status
   - txamt
   - trade_no
   - currency
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'syssn', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.I64, 'txamt', None, None, ), # 3
    (4, TType.STRING, 'trade_no', None, None, ), # 4
    (5, TType.STRING, 'currency', None, None, ), # 5
  )

  def __init__(self, syssn=None, status=None, txamt=None, trade_no=None, currency=None,):
    self.syssn = syssn
    self.status = status
    self.txamt = txamt
    self.trade_no = trade_no
    self.currency = currency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.syssn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.txamt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.trade_no = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeInfo')
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 1)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.txamt is not None:
      oprot.writeFieldBegin('txamt', TType.I64, 3)
      oprot.writeI64(self.txamt)
      oprot.writeFieldEnd()
    if self.trade_no is not None:
      oprot.writeFieldBegin('trade_no', TType.STRING, 4)
      oprot.writeString(self.trade_no)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 5)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.syssn is None:
      raise TProtocol.TProtocolException(message='Required field syssn is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pay4AnotherResult:
  """
  Attributes:
   - respcd
   - respmsg
   - trade_info
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
    (3, TType.STRUCT, 'trade_info', (TradeInfo, TradeInfo.thrift_spec), None, ), # 3
    (4, TType.STRING, 'extend', None, None, ), # 4
  )

  def __init__(self, respcd=None, respmsg=None, trade_info=None, extend=None,):
    self.respcd = respcd
    self.respmsg = respmsg
    self.trade_info = trade_info
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.trade_info = TradeInfo()
          self.trade_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.extend = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pay4AnotherResult')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    if self.trade_info is not None:
      oprot.writeFieldBegin('trade_info', TType.STRUCT, 3)
      self.trade_info.write(oprot)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.STRING, 4)
      oprot.writeString(self.extend)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.respcd is None:
      raise TProtocol.TProtocolException(message='Required field respcd is unset!')
    if self.respmsg is None:
      raise TProtocol.TProtocolException(message='Required field respmsg is unset!')
    if self.trade_info is None:
      raise TProtocol.TProtocolException(message='Required field trade_info is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
