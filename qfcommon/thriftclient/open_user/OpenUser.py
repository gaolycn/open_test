#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def ping(self):
    pass

  def mobile_login(self, app_id, auth_info, login_info):
    """
    Parameters:
     - app_id
     - auth_info
     - login_info
    """
    pass

  def wx_login(self, app_id, profile, login_info):
    """
    Parameters:
     - app_id
     - profile
     - login_info
    """
    pass

  def update_profile(self, app_id, user_id, set_value):
    """
    Parameters:
     - app_id
     - user_id
     - set_value
    """
    pass

  def update_auth(self, app_id, user_id, set_value):
    """
    Parameters:
     - app_id
     - user_id
     - set_value
    """
    pass

  def record_sms_code(self, app_id, mobile, auth_code):
    """
    Parameters:
     - app_id
     - mobile
     - auth_code
    """
    pass

  def get_profiles(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    pass

  def get_user_id_by_openid(self, app_id, openid):
    """
    Parameters:
     - app_id
     - openid
    """
    pass

  def get_openids_by_user_ids(self, app_id, user_ids):
    """
    Parameters:
     - app_id
     - user_ids
    """
    pass

  def get_profiles_subset(self, app_id, app_subset, spec):
    """
    Parameters:
     - app_id
     - app_subset
     - spec
    """
    pass

  def count_profiles(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    pass

  def count_profiles_subset(self, app_id, app_subset, spec):
    """
    Parameters:
     - app_id
     - app_subset
     - spec
    """
    pass

  def get_apps(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    pass

  def wx_logout(self, app_id, openid):
    """
    Parameters:
     - app_id
     - openid
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def ping(self):
    self.send_ping()
    return self.recv_ping()

  def send_ping(self):
    self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
    args = ping_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_ping(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = ping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result");

  def mobile_login(self, app_id, auth_info, login_info):
    """
    Parameters:
     - app_id
     - auth_info
     - login_info
    """
    self.send_mobile_login(app_id, auth_info, login_info)
    return self.recv_mobile_login()

  def send_mobile_login(self, app_id, auth_info, login_info):
    self._oprot.writeMessageBegin('mobile_login', TMessageType.CALL, self._seqid)
    args = mobile_login_args()
    args.app_id = app_id
    args.auth_info = auth_info
    args.login_info = login_info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mobile_login(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mobile_login_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "mobile_login failed: unknown result");

  def wx_login(self, app_id, profile, login_info):
    """
    Parameters:
     - app_id
     - profile
     - login_info
    """
    self.send_wx_login(app_id, profile, login_info)
    return self.recv_wx_login()

  def send_wx_login(self, app_id, profile, login_info):
    self._oprot.writeMessageBegin('wx_login', TMessageType.CALL, self._seqid)
    args = wx_login_args()
    args.app_id = app_id
    args.profile = profile
    args.login_info = login_info
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_wx_login(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = wx_login_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "wx_login failed: unknown result");

  def update_profile(self, app_id, user_id, set_value):
    """
    Parameters:
     - app_id
     - user_id
     - set_value
    """
    self.send_update_profile(app_id, user_id, set_value)
    return self.recv_update_profile()

  def send_update_profile(self, app_id, user_id, set_value):
    self._oprot.writeMessageBegin('update_profile', TMessageType.CALL, self._seqid)
    args = update_profile_args()
    args.app_id = app_id
    args.user_id = user_id
    args.set_value = set_value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_update_profile(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = update_profile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "update_profile failed: unknown result");

  def update_auth(self, app_id, user_id, set_value):
    """
    Parameters:
     - app_id
     - user_id
     - set_value
    """
    self.send_update_auth(app_id, user_id, set_value)
    return self.recv_update_auth()

  def send_update_auth(self, app_id, user_id, set_value):
    self._oprot.writeMessageBegin('update_auth', TMessageType.CALL, self._seqid)
    args = update_auth_args()
    args.app_id = app_id
    args.user_id = user_id
    args.set_value = set_value
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_update_auth(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = update_auth_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "update_auth failed: unknown result");

  def record_sms_code(self, app_id, mobile, auth_code):
    """
    Parameters:
     - app_id
     - mobile
     - auth_code
    """
    self.send_record_sms_code(app_id, mobile, auth_code)
    return self.recv_record_sms_code()

  def send_record_sms_code(self, app_id, mobile, auth_code):
    self._oprot.writeMessageBegin('record_sms_code', TMessageType.CALL, self._seqid)
    args = record_sms_code_args()
    args.app_id = app_id
    args.mobile = mobile
    args.auth_code = auth_code
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_record_sms_code(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = record_sms_code_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "record_sms_code failed: unknown result");

  def get_profiles(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    self.send_get_profiles(app_id, spec)
    return self.recv_get_profiles()

  def send_get_profiles(self, app_id, spec):
    self._oprot.writeMessageBegin('get_profiles', TMessageType.CALL, self._seqid)
    args = get_profiles_args()
    args.app_id = app_id
    args.spec = spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_profiles(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_profiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_profiles failed: unknown result");

  def get_user_id_by_openid(self, app_id, openid):
    """
    Parameters:
     - app_id
     - openid
    """
    self.send_get_user_id_by_openid(app_id, openid)
    return self.recv_get_user_id_by_openid()

  def send_get_user_id_by_openid(self, app_id, openid):
    self._oprot.writeMessageBegin('get_user_id_by_openid', TMessageType.CALL, self._seqid)
    args = get_user_id_by_openid_args()
    args.app_id = app_id
    args.openid = openid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_user_id_by_openid(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_user_id_by_openid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_user_id_by_openid failed: unknown result");

  def get_openids_by_user_ids(self, app_id, user_ids):
    """
    Parameters:
     - app_id
     - user_ids
    """
    self.send_get_openids_by_user_ids(app_id, user_ids)
    return self.recv_get_openids_by_user_ids()

  def send_get_openids_by_user_ids(self, app_id, user_ids):
    self._oprot.writeMessageBegin('get_openids_by_user_ids', TMessageType.CALL, self._seqid)
    args = get_openids_by_user_ids_args()
    args.app_id = app_id
    args.user_ids = user_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_openids_by_user_ids(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_openids_by_user_ids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.error is not None:
      raise result.error
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_openids_by_user_ids failed: unknown result");

  def get_profiles_subset(self, app_id, app_subset, spec):
    """
    Parameters:
     - app_id
     - app_subset
     - spec
    """
    self.send_get_profiles_subset(app_id, app_subset, spec)
    return self.recv_get_profiles_subset()

  def send_get_profiles_subset(self, app_id, app_subset, spec):
    self._oprot.writeMessageBegin('get_profiles_subset', TMessageType.CALL, self._seqid)
    args = get_profiles_subset_args()
    args.app_id = app_id
    args.app_subset = app_subset
    args.spec = spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_profiles_subset(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_profiles_subset_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_profiles_subset failed: unknown result");

  def count_profiles(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    self.send_count_profiles(app_id, spec)
    return self.recv_count_profiles()

  def send_count_profiles(self, app_id, spec):
    self._oprot.writeMessageBegin('count_profiles', TMessageType.CALL, self._seqid)
    args = count_profiles_args()
    args.app_id = app_id
    args.spec = spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_count_profiles(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = count_profiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "count_profiles failed: unknown result");

  def count_profiles_subset(self, app_id, app_subset, spec):
    """
    Parameters:
     - app_id
     - app_subset
     - spec
    """
    self.send_count_profiles_subset(app_id, app_subset, spec)
    return self.recv_count_profiles_subset()

  def send_count_profiles_subset(self, app_id, app_subset, spec):
    self._oprot.writeMessageBegin('count_profiles_subset', TMessageType.CALL, self._seqid)
    args = count_profiles_subset_args()
    args.app_id = app_id
    args.app_subset = app_subset
    args.spec = spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_count_profiles_subset(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = count_profiles_subset_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "count_profiles_subset failed: unknown result");

  def get_apps(self, app_id, spec):
    """
    Parameters:
     - app_id
     - spec
    """
    self.send_get_apps(app_id, spec)
    return self.recv_get_apps()

  def send_get_apps(self, app_id, spec):
    self._oprot.writeMessageBegin('get_apps', TMessageType.CALL, self._seqid)
    args = get_apps_args()
    args.app_id = app_id
    args.spec = spec
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_apps(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_apps_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_apps failed: unknown result");

  def wx_logout(self, app_id, openid):
    """
    Parameters:
     - app_id
     - openid
    """
    self.send_wx_logout(app_id, openid)
    return self.recv_wx_logout()

  def send_wx_logout(self, app_id, openid):
    self._oprot.writeMessageBegin('wx_logout', TMessageType.CALL, self._seqid)
    args = wx_logout_args()
    args.app_id = app_id
    args.openid = openid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_wx_logout(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = wx_logout_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.ce is not None:
      raise result.ce
    if result.ae is not None:
      raise result.ae
    if result.ie is not None:
      raise result.ie
    if result.de is not None:
      raise result.de
    if result.te is not None:
      raise result.te
    if result.ue is not None:
      raise result.ue
    raise TApplicationException(TApplicationException.MISSING_RESULT, "wx_logout failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["ping"] = Processor.process_ping
    self._processMap["mobile_login"] = Processor.process_mobile_login
    self._processMap["wx_login"] = Processor.process_wx_login
    self._processMap["update_profile"] = Processor.process_update_profile
    self._processMap["update_auth"] = Processor.process_update_auth
    self._processMap["record_sms_code"] = Processor.process_record_sms_code
    self._processMap["get_profiles"] = Processor.process_get_profiles
    self._processMap["get_user_id_by_openid"] = Processor.process_get_user_id_by_openid
    self._processMap["get_openids_by_user_ids"] = Processor.process_get_openids_by_user_ids
    self._processMap["get_profiles_subset"] = Processor.process_get_profiles_subset
    self._processMap["count_profiles"] = Processor.process_count_profiles
    self._processMap["count_profiles_subset"] = Processor.process_count_profiles_subset
    self._processMap["get_apps"] = Processor.process_get_apps
    self._processMap["wx_logout"] = Processor.process_wx_logout

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_ping(self, seqid, iprot, oprot):
    args = ping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = ping_result()
    result.success = self._handler.ping()
    oprot.writeMessageBegin("ping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mobile_login(self, seqid, iprot, oprot):
    args = mobile_login_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mobile_login_result()
    try:
      result.success = self._handler.mobile_login(args.app_id, args.auth_info, args.login_info)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("mobile_login", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_wx_login(self, seqid, iprot, oprot):
    args = wx_login_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = wx_login_result()
    try:
      result.success = self._handler.wx_login(args.app_id, args.profile, args.login_info)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("wx_login", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_update_profile(self, seqid, iprot, oprot):
    args = update_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = update_profile_result()
    try:
      result.success = self._handler.update_profile(args.app_id, args.user_id, args.set_value)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("update_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_update_auth(self, seqid, iprot, oprot):
    args = update_auth_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = update_auth_result()
    try:
      result.success = self._handler.update_auth(args.app_id, args.user_id, args.set_value)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("update_auth", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_record_sms_code(self, seqid, iprot, oprot):
    args = record_sms_code_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = record_sms_code_result()
    try:
      result.success = self._handler.record_sms_code(args.app_id, args.mobile, args.auth_code)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("record_sms_code", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_profiles(self, seqid, iprot, oprot):
    args = get_profiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_profiles_result()
    try:
      result.success = self._handler.get_profiles(args.app_id, args.spec)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("get_profiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_user_id_by_openid(self, seqid, iprot, oprot):
    args = get_user_id_by_openid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_user_id_by_openid_result()
    try:
      result.success = self._handler.get_user_id_by_openid(args.app_id, args.openid)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("get_user_id_by_openid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_openids_by_user_ids(self, seqid, iprot, oprot):
    args = get_openids_by_user_ids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_openids_by_user_ids_result()
    try:
      result.success = self._handler.get_openids_by_user_ids(args.app_id, args.user_ids)
    except Error, error:
      result.error = error
    oprot.writeMessageBegin("get_openids_by_user_ids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_profiles_subset(self, seqid, iprot, oprot):
    args = get_profiles_subset_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_profiles_subset_result()
    try:
      result.success = self._handler.get_profiles_subset(args.app_id, args.app_subset, args.spec)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("get_profiles_subset", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_count_profiles(self, seqid, iprot, oprot):
    args = count_profiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = count_profiles_result()
    try:
      result.success = self._handler.count_profiles(args.app_id, args.spec)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("count_profiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_count_profiles_subset(self, seqid, iprot, oprot):
    args = count_profiles_subset_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = count_profiles_subset_result()
    try:
      result.success = self._handler.count_profiles_subset(args.app_id, args.app_subset, args.spec)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("count_profiles_subset", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_apps(self, seqid, iprot, oprot):
    args = get_apps_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_apps_result()
    try:
      result.success = self._handler.get_apps(args.app_id, args.spec)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("get_apps", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_wx_logout(self, seqid, iprot, oprot):
    args = wx_logout_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = wx_logout_result()
    try:
      result.success = self._handler.wx_logout(args.app_id, args.openid)
    except CodecError, ce:
      result.ce = ce
    except ArgumentError, ae:
      result.ae = ae
    except IntegrityError, ie:
      result.ie = ie
    except DatabaseError, de:
      result.de = de
    except TimeoutError, te:
      result.te = te
    except UnknownError, ue:
      result.ue = ue
    oprot.writeMessageBegin("wx_logout", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class ping_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ping_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ping_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mobile_login_args:
  """
  Attributes:
   - app_id
   - auth_info
   - login_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRUCT, 'auth_info', (AuthInfo, AuthInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'login_info', (LoginRecord, LoginRecord.thrift_spec), None, ), # 3
  )

  def __init__(self, app_id=None, auth_info=None, login_info=None,):
    self.app_id = app_id
    self.auth_info = auth_info
    self.login_info = login_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.auth_info = AuthInfo()
          self.auth_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.login_info = LoginRecord()
          self.login_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mobile_login_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.auth_info is not None:
      oprot.writeFieldBegin('auth_info', TType.STRUCT, 2)
      self.auth_info.write(oprot)
      oprot.writeFieldEnd()
    if self.login_info is not None:
      oprot.writeFieldBegin('login_info', TType.STRUCT, 3)
      self.login_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.auth_info is None:
      raise TProtocol.TProtocolException(message='Required field auth_info is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mobile_login_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (LoginResult, LoginResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = LoginResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mobile_login_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class wx_login_args:
  """
  Attributes:
   - app_id
   - profile
   - login_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRUCT, 'profile', (Profile, Profile.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'login_info', (LoginRecord, LoginRecord.thrift_spec), None, ), # 3
  )

  def __init__(self, app_id=None, profile=None, login_info=None,):
    self.app_id = app_id
    self.profile = profile
    self.login_info = login_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.profile = Profile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.login_info = LoginRecord()
          self.login_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('wx_login_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 2)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    if self.login_info is not None:
      oprot.writeFieldBegin('login_info', TType.STRUCT, 3)
      self.login_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.profile is None:
      raise TProtocol.TProtocolException(message='Required field profile is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class wx_login_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (LoginResult, LoginResult.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = LoginResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('wx_login_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_profile_args:
  """
  Attributes:
   - app_id
   - user_id
   - set_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.I32, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'set_value', None, None, ), # 3
  )

  def __init__(self, app_id=None, user_id=None, set_value=None,):
    self.app_id = app_id
    self.user_id = user_id
    self.set_value = set_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.set_value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_profile_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I32, 2)
      oprot.writeI32(self.user_id)
      oprot.writeFieldEnd()
    if self.set_value is not None:
      oprot.writeFieldBegin('set_value', TType.STRING, 3)
      oprot.writeString(self.set_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.set_value is None:
      raise TProtocol.TProtocolException(message='Required field set_value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_profile_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_auth_args:
  """
  Attributes:
   - app_id
   - user_id
   - set_value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.I32, 'user_id', None, None, ), # 2
    (3, TType.STRING, 'set_value', None, None, ), # 3
  )

  def __init__(self, app_id=None, user_id=None, set_value=None,):
    self.app_id = app_id
    self.user_id = user_id
    self.set_value = set_value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.set_value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_auth_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I32, 2)
      oprot.writeI32(self.user_id)
      oprot.writeFieldEnd()
    if self.set_value is not None:
      oprot.writeFieldBegin('set_value', TType.STRING, 3)
      oprot.writeString(self.set_value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.set_value is None:
      raise TProtocol.TProtocolException(message='Required field set_value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class update_auth_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('update_auth_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class record_sms_code_args:
  """
  Attributes:
   - app_id
   - mobile
   - auth_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'mobile', None, None, ), # 2
    (3, TType.STRING, 'auth_code', None, None, ), # 3
  )

  def __init__(self, app_id=None, mobile=None, auth_code=None,):
    self.app_id = app_id
    self.mobile = mobile
    self.auth_code = auth_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.auth_code = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('record_sms_code_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 2)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.auth_code is not None:
      oprot.writeFieldBegin('auth_code', TType.STRING, 3)
      oprot.writeString(self.auth_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.mobile is None:
      raise TProtocol.TProtocolException(message='Required field mobile is unset!')
    if self.auth_code is None:
      raise TProtocol.TProtocolException(message='Required field auth_code is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class record_sms_code_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('record_sms_code_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_profiles_args:
  """
  Attributes:
   - app_id
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'spec', None, None, ), # 2
  )

  def __init__(self, app_id=None, spec=None,):
    self.app_id = app_id
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spec = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_profiles_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 2)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.spec is None:
      raise TProtocol.TProtocolException(message='Required field spec is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_profiles_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Profile, Profile.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Profile()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_profiles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_id_by_openid_args:
  """
  Attributes:
   - app_id
   - openid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'openid', None, None, ), # 2
  )

  def __init__(self, app_id=None, openid=None,):
    self.app_id = app_id
    self.openid = openid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.openid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_id_by_openid_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 2)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.openid is None:
      raise TProtocol.TProtocolException(message='Required field openid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_id_by_openid_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_id_by_openid_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_openids_by_user_ids_args:
  """
  Attributes:
   - app_id
   - user_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.LIST, 'user_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, app_id=None, user_ids=None,):
    self.app_id = app_id
    self.user_ids = user_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.user_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.user_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_openids_by_user_ids_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.user_ids is not None:
      oprot.writeFieldBegin('user_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.user_ids))
      for iter13 in self.user_ids:
        oprot.writeI32(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_openids_by_user_ids_result:
  """
  Attributes:
   - success
   - error
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'error', (Error, Error.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, error=None,):
    self.success = success
    self.error = error

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.error = Error()
          self.error.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_openids_by_user_ids_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter20 in self.success:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.error is not None:
      oprot.writeFieldBegin('error', TType.STRUCT, 1)
      self.error.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_profiles_subset_args:
  """
  Attributes:
   - app_id
   - app_subset
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.LIST, 'app_subset', (TType.I32,None), None, ), # 2
    (3, TType.STRING, 'spec', None, None, ), # 3
  )

  def __init__(self, app_id=None, app_subset=None, spec=None,):
    self.app_id = app_id
    self.app_subset = app_subset
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.app_subset = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.app_subset.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spec = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_profiles_subset_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.app_subset is not None:
      oprot.writeFieldBegin('app_subset', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.app_subset))
      for iter27 in self.app_subset:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 3)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.app_subset is None:
      raise TProtocol.TProtocolException(message='Required field app_subset is unset!')
    if self.spec is None:
      raise TProtocol.TProtocolException(message='Required field spec is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_profiles_subset_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(Profile, Profile.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = Profile()
            _elem33.read(iprot)
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_profiles_subset_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter34 in self.success:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_profiles_args:
  """
  Attributes:
   - app_id
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'spec', None, None, ), # 2
  )

  def __init__(self, app_id=None, spec=None,):
    self.app_id = app_id
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spec = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_profiles_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 2)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.spec is None:
      raise TProtocol.TProtocolException(message='Required field spec is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_profiles_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_profiles_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_profiles_subset_args:
  """
  Attributes:
   - app_id
   - app_subset
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.LIST, 'app_subset', (TType.I32,None), None, ), # 2
    (3, TType.STRING, 'spec', None, None, ), # 3
  )

  def __init__(self, app_id=None, app_subset=None, spec=None,):
    self.app_id = app_id
    self.app_subset = app_subset
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.app_subset = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI32();
            self.app_subset.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spec = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_profiles_subset_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.app_subset is not None:
      oprot.writeFieldBegin('app_subset', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.app_subset))
      for iter41 in self.app_subset:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 3)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.app_subset is None:
      raise TProtocol.TProtocolException(message='Required field app_subset is unset!')
    if self.spec is None:
      raise TProtocol.TProtocolException(message='Required field spec is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class count_profiles_subset_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('count_profiles_subset_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_apps_args:
  """
  Attributes:
   - app_id
   - spec
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'spec', None, None, ), # 2
  )

  def __init__(self, app_id=None, spec=None,):
    self.app_id = app_id
    self.spec = spec

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spec = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_apps_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.spec is not None:
      oprot.writeFieldBegin('spec', TType.STRING, 2)
      oprot.writeString(self.spec)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_apps_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(App, App.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = App()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_apps_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class wx_logout_args:
  """
  Attributes:
   - app_id
   - openid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'app_id', None, None, ), # 1
    (2, TType.STRING, 'openid', None, None, ), # 2
  )

  def __init__(self, app_id=None, openid=None,):
    self.app_id = app_id
    self.openid = openid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.openid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('wx_logout_args')
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 1)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.openid is not None:
      oprot.writeFieldBegin('openid', TType.STRING, 2)
      oprot.writeString(self.openid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.app_id is None:
      raise TProtocol.TProtocolException(message='Required field app_id is unset!')
    if self.openid is None:
      raise TProtocol.TProtocolException(message='Required field openid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class wx_logout_result:
  """
  Attributes:
   - success
   - ce
   - ae
   - ie
   - de
   - te
   - ue
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ce', (CodecError, CodecError.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ae', (ArgumentError, ArgumentError.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'ie', (IntegrityError, IntegrityError.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'de', (DatabaseError, DatabaseError.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'te', (TimeoutError, TimeoutError.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'ue', (UnknownError, UnknownError.thrift_spec), None, ), # 6
  )

  def __init__(self, success=None, ce=None, ae=None, ie=None, de=None, te=None, ue=None,):
    self.success = success
    self.ce = ce
    self.ae = ae
    self.ie = ie
    self.de = de
    self.te = te
    self.ue = ue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ce = CodecError()
          self.ce.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ae = ArgumentError()
          self.ae.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ie = IntegrityError()
          self.ie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.de = DatabaseError()
          self.de.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.te = TimeoutError()
          self.te.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.ue = UnknownError()
          self.ue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('wx_logout_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ce is not None:
      oprot.writeFieldBegin('ce', TType.STRUCT, 1)
      self.ce.write(oprot)
      oprot.writeFieldEnd()
    if self.ae is not None:
      oprot.writeFieldBegin('ae', TType.STRUCT, 2)
      self.ae.write(oprot)
      oprot.writeFieldEnd()
    if self.ie is not None:
      oprot.writeFieldBegin('ie', TType.STRUCT, 3)
      self.ie.write(oprot)
      oprot.writeFieldEnd()
    if self.de is not None:
      oprot.writeFieldBegin('de', TType.STRUCT, 4)
      self.de.write(oprot)
      oprot.writeFieldEnd()
    if self.te is not None:
      oprot.writeFieldBegin('te', TType.STRUCT, 5)
      self.te.write(oprot)
      oprot.writeFieldEnd()
    if self.ue is not None:
      oprot.writeFieldBegin('ue', TType.STRUCT, 6)
      self.ue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
