#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerError(Exception):
  """
  Attributes:
   - code
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'msg', None, None, ), # 2
  )

  def __init__(self, code=None, msg=None,):
    self.code = code
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerError')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 2)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Share:
  """
  Attributes:
   - share_url
   - title
   - icon_url
   - desc
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'share_url', None, "", ), # 1
    (2, TType.STRING, 'title', None, "", ), # 2
    (3, TType.STRING, 'icon_url', None, "", ), # 3
    (4, TType.STRING, 'desc', None, "", ), # 4
  )

  def __init__(self, share_url=thrift_spec[1][4], title=thrift_spec[2][4], icon_url=thrift_spec[3][4], desc=thrift_spec[4][4],):
    self.share_url = share_url
    self.title = title
    self.icon_url = icon_url
    self.desc = desc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.share_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.icon_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Share')
    if self.share_url is not None:
      oprot.writeFieldBegin('share_url', TType.STRING, 1)
      oprot.writeString(self.share_url)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.icon_url is not None:
      oprot.writeFieldBegin('icon_url', TType.STRING, 3)
      oprot.writeString(self.icon_url)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 4)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ObtainPage:
  """
  Attributes:
   - title
   - content
   - return_url
   - app_logo
   - bgimg
   - usage
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, "", ), # 1
    (2, TType.STRING, 'content', None, "", ), # 2
    (3, TType.STRING, 'return_url', None, "", ), # 3
    (4, TType.STRING, 'app_logo', None, "", ), # 4
    (5, TType.STRING, 'bgimg', None, "", ), # 5
    (6, TType.STRING, 'usage', None, "", ), # 6
    (7, TType.STRING, 'ext', None, "", ), # 7
  )

  def __init__(self, title=thrift_spec[1][4], content=thrift_spec[2][4], return_url=thrift_spec[3][4], app_logo=thrift_spec[4][4], bgimg=thrift_spec[5][4], usage=thrift_spec[6][4], ext=thrift_spec[7][4],):
    self.title = title
    self.content = content
    self.return_url = return_url
    self.app_logo = app_logo
    self.bgimg = bgimg
    self.usage = usage
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.return_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.app_logo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bgimg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.usage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ObtainPage')
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.return_url is not None:
      oprot.writeFieldBegin('return_url', TType.STRING, 3)
      oprot.writeString(self.return_url)
      oprot.writeFieldEnd()
    if self.app_logo is not None:
      oprot.writeFieldBegin('app_logo', TType.STRING, 4)
      oprot.writeString(self.app_logo)
      oprot.writeFieldEnd()
    if self.bgimg is not None:
      oprot.writeFieldBegin('bgimg', TType.STRING, 5)
      oprot.writeString(self.bgimg)
      oprot.writeFieldEnd()
    if self.usage is not None:
      oprot.writeFieldBegin('usage', TType.STRING, 6)
      oprot.writeString(self.usage)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 7)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityExt:
  """
  Attributes:
   - share
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'share', (Share, Share.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'page', (ObtainPage, ObtainPage.thrift_spec), None, ), # 2
  )

  def __init__(self, share=None, page=None,):
    self.share = share
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.share = Share()
          self.share.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.page = ObtainPage()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityExt')
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.STRUCT, 1)
      self.share.write(oprot)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 2)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Activity:
  """
  Attributes:
   - id
   - src
   - mchnt_id
   - type
   - title
   - total_amt
   - xx_type
   - obtain_num
   - obtain_xx_id
   - sponsor_award_num
   - sponsor_xx_id
   - rule
   - return_url
   - ext
   - content
   - used_num
   - used_amt
   - status
   - start_time
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.I16, 'type', None, None, ), # 4
    (5, TType.STRING, 'title', None, None, ), # 5
    (6, TType.I64, 'total_amt', None, None, ), # 6
    (7, TType.I16, 'xx_type', None, None, ), # 7
    (8, TType.I32, 'obtain_num', None, None, ), # 8
    (9, TType.I64, 'obtain_xx_id', None, None, ), # 9
    (10, TType.I32, 'sponsor_award_num', None, None, ), # 10
    (11, TType.I64, 'sponsor_xx_id', None, None, ), # 11
    (12, TType.STRING, 'rule', None, None, ), # 12
    (13, TType.STRING, 'return_url', None, None, ), # 13
    (14, TType.STRUCT, 'ext', (ActivityExt, ActivityExt.thrift_spec), None, ), # 14
    (15, TType.STRING, 'content', None, None, ), # 15
    (16, TType.I32, 'used_num', None, None, ), # 16
    (17, TType.I32, 'used_amt', None, None, ), # 17
    (18, TType.I16, 'status', None, None, ), # 18
    (19, TType.I32, 'start_time', None, None, ), # 19
    (20, TType.I32, 'expire_time', None, None, ), # 20
  )

  def __init__(self, id=None, src=None, mchnt_id=None, type=None, title=None, total_amt=None, xx_type=None, obtain_num=None, obtain_xx_id=None, sponsor_award_num=None, sponsor_xx_id=None, rule=None, return_url=None, ext=None, content=None, used_num=None, used_amt=None, status=None, start_time=None, expire_time=None,):
    self.id = id
    self.src = src
    self.mchnt_id = mchnt_id
    self.type = type
    self.title = title
    self.total_amt = total_amt
    self.xx_type = xx_type
    self.obtain_num = obtain_num
    self.obtain_xx_id = obtain_xx_id
    self.sponsor_award_num = sponsor_award_num
    self.sponsor_xx_id = sponsor_xx_id
    self.rule = rule
    self.return_url = return_url
    self.ext = ext
    self.content = content
    self.used_num = used_num
    self.used_amt = used_amt
    self.status = status
    self.start_time = start_time
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.total_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.xx_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.obtain_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.obtain_xx_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.sponsor_award_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.sponsor_xx_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.rule = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.return_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRUCT:
          self.ext = ActivityExt()
          self.ext.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.used_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.used_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.expire_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Activity')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 4)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 5)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.total_amt is not None:
      oprot.writeFieldBegin('total_amt', TType.I64, 6)
      oprot.writeI64(self.total_amt)
      oprot.writeFieldEnd()
    if self.xx_type is not None:
      oprot.writeFieldBegin('xx_type', TType.I16, 7)
      oprot.writeI16(self.xx_type)
      oprot.writeFieldEnd()
    if self.obtain_num is not None:
      oprot.writeFieldBegin('obtain_num', TType.I32, 8)
      oprot.writeI32(self.obtain_num)
      oprot.writeFieldEnd()
    if self.obtain_xx_id is not None:
      oprot.writeFieldBegin('obtain_xx_id', TType.I64, 9)
      oprot.writeI64(self.obtain_xx_id)
      oprot.writeFieldEnd()
    if self.sponsor_award_num is not None:
      oprot.writeFieldBegin('sponsor_award_num', TType.I32, 10)
      oprot.writeI32(self.sponsor_award_num)
      oprot.writeFieldEnd()
    if self.sponsor_xx_id is not None:
      oprot.writeFieldBegin('sponsor_xx_id', TType.I64, 11)
      oprot.writeI64(self.sponsor_xx_id)
      oprot.writeFieldEnd()
    if self.rule is not None:
      oprot.writeFieldBegin('rule', TType.STRING, 12)
      oprot.writeString(self.rule)
      oprot.writeFieldEnd()
    if self.return_url is not None:
      oprot.writeFieldBegin('return_url', TType.STRING, 13)
      oprot.writeString(self.return_url)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRUCT, 14)
      self.ext.write(oprot)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 15)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.used_num is not None:
      oprot.writeFieldBegin('used_num', TType.I32, 16)
      oprot.writeI32(self.used_num)
      oprot.writeFieldEnd()
    if self.used_amt is not None:
      oprot.writeFieldBegin('used_amt', TType.I32, 17)
      oprot.writeI32(self.used_amt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 18)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 19)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I32, 20)
      oprot.writeI32(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Merchant:
  """
  Attributes:
   - id
   - name
   - shopname
   - email
   - mobile
   - telephone
   - state
   - province
   - city
   - mcc
   - address
   - longitude
   - latitude
   - jointime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, 0, ), # 1
    (2, TType.STRING, 'name', None, "", ), # 2
    (3, TType.STRING, 'shopname', None, "", ), # 3
    (4, TType.STRING, 'email', None, "", ), # 4
    (5, TType.STRING, 'mobile', None, "", ), # 5
    (6, TType.STRING, 'telephone', None, "", ), # 6
    (7, TType.I32, 'state', None, None, ), # 7
    (8, TType.STRING, 'province', None, None, ), # 8
    (9, TType.STRING, 'city', None, None, ), # 9
    (10, TType.STRING, 'mcc', None, None, ), # 10
    (11, TType.STRING, 'address', None, None, ), # 11
    (12, TType.DOUBLE, 'longitude', None, 0, ), # 12
    (13, TType.DOUBLE, 'latitude', None, 0, ), # 13
    (14, TType.STRING, 'jointime', None, None, ), # 14
  )

  def __init__(self, id=thrift_spec[1][4], name=thrift_spec[2][4], shopname=thrift_spec[3][4], email=thrift_spec[4][4], mobile=thrift_spec[5][4], telephone=thrift_spec[6][4], state=None, province=None, city=None, mcc=None, address=None, longitude=thrift_spec[12][4], latitude=thrift_spec[13][4], jointime=None,):
    self.id = id
    self.name = name
    self.shopname = shopname
    self.email = email
    self.mobile = mobile
    self.telephone = telephone
    self.state = state
    self.province = province
    self.city = city
    self.mcc = mcc
    self.address = address
    self.longitude = longitude
    self.latitude = latitude
    self.jointime = jointime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.shopname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.telephone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.province = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.mcc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.jointime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Merchant')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.shopname is not None:
      oprot.writeFieldBegin('shopname', TType.STRING, 3)
      oprot.writeString(self.shopname)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 5)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.telephone is not None:
      oprot.writeFieldBegin('telephone', TType.STRING, 6)
      oprot.writeString(self.telephone)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 7)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 8)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 9)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.mcc is not None:
      oprot.writeFieldBegin('mcc', TType.STRING, 10)
      oprot.writeString(self.mcc)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 11)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 12)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 13)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.jointime is not None:
      oprot.writeFieldBegin('jointime', TType.STRING, 14)
      oprot.writeString(self.jointime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Coupon:
  """
  Attributes:
   - id
   - src
   - mchnt_id
   - title
   - type
   - amt
   - code
   - status
   - use_rule
   - content
   - start_time
   - expire_time
   - mchnt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.STRING, 'title', None, None, ), # 4
    (5, TType.I16, 'type', None, None, ), # 5
    (6, TType.I32, 'amt', None, None, ), # 6
    (7, TType.STRING, 'code', None, None, ), # 7
    (8, TType.I16, 'status', None, None, ), # 8
    (9, TType.STRING, 'use_rule', None, None, ), # 9
    (10, TType.STRING, 'content', None, None, ), # 10
    (11, TType.I32, 'start_time', None, None, ), # 11
    (12, TType.I32, 'expire_time', None, None, ), # 12
    (13, TType.STRUCT, 'mchnt', (Merchant, Merchant.thrift_spec), None, ), # 13
  )

  def __init__(self, id=None, src=None, mchnt_id=None, title=None, type=None, amt=None, code=None, status=None, use_rule=None, content=None, start_time=None, expire_time=None, mchnt=None,):
    self.id = id
    self.src = src
    self.mchnt_id = mchnt_id
    self.title = title
    self.type = type
    self.amt = amt
    self.code = code
    self.status = status
    self.use_rule = use_rule
    self.content = content
    self.start_time = start_time
    self.expire_time = expire_time
    self.mchnt = mchnt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.use_rule = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.expire_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.mchnt = Merchant()
          self.mchnt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coupon')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 4)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 5)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I32, 6)
      oprot.writeI32(self.amt)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 7)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 8)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.use_rule is not None:
      oprot.writeFieldBegin('use_rule', TType.STRING, 9)
      oprot.writeString(self.use_rule)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 10)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 11)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I32, 12)
      oprot.writeI32(self.expire_time)
      oprot.writeFieldEnd()
    if self.mchnt is not None:
      oprot.writeFieldBegin('mchnt', TType.STRUCT, 13)
      self.mchnt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityShare:
  """
  Attributes:
   - share
   - coupons
   - page
   - integral
   - id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'share', (Share, Share.thrift_spec), None, ), # 1
    (2, TType.LIST, 'coupons', (TType.STRUCT,(Coupon, Coupon.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'page', (ObtainPage, ObtainPage.thrift_spec), None, ), # 3
    (4, TType.I32, 'integral', None, None, ), # 4
    (5, TType.I64, 'id', None, 0, ), # 5
  )

  def __init__(self, share=None, coupons=None, page=None, integral=None, id=thrift_spec[5][4],):
    self.share = share
    self.coupons = coupons
    self.page = page
    self.integral = integral
    self.id = id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.share = Share()
          self.share.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.coupons = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Coupon()
            _elem5.read(iprot)
            self.coupons.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.page = ObtainPage()
          self.page.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityShare')
    if self.share is not None:
      oprot.writeFieldBegin('share', TType.STRUCT, 1)
      self.share.write(oprot)
      oprot.writeFieldEnd()
    if self.coupons is not None:
      oprot.writeFieldBegin('coupons', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.coupons))
      for iter6 in self.coupons:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.STRUCT, 3)
      self.page.write(oprot)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I32, 4)
      oprot.writeI32(self.integral)
      oprot.writeFieldEnd()
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 5)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityStat:
  """
  Attributes:
   - obtain_num
   - obtain_amt
   - award_num
   - award_amt
   - use_num
   - use_amt
   - total_amt
   - share_ids
   - trade_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'obtain_num', None, None, ), # 1
    (2, TType.I32, 'obtain_amt', None, None, ), # 2
    (3, TType.I32, 'award_num', None, None, ), # 3
    (4, TType.I32, 'award_amt', None, None, ), # 4
    (5, TType.I32, 'use_num', None, None, ), # 5
    (6, TType.I32, 'use_amt', None, None, ), # 6
    (7, TType.I32, 'total_amt', None, None, ), # 7
    (8, TType.LIST, 'share_ids', (TType.I64,None), None, ), # 8
    (9, TType.I64, 'trade_amt', None, None, ), # 9
  )

  def __init__(self, obtain_num=None, obtain_amt=None, award_num=None, award_amt=None, use_num=None, use_amt=None, total_amt=None, share_ids=None, trade_amt=None,):
    self.obtain_num = obtain_num
    self.obtain_amt = obtain_amt
    self.award_num = award_num
    self.award_amt = award_amt
    self.use_num = use_num
    self.use_amt = use_amt
    self.total_amt = total_amt
    self.share_ids = share_ids
    self.trade_amt = trade_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.obtain_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.obtain_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.award_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.award_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.use_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.use_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.total_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.share_ids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.share_ids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.trade_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityStat')
    if self.obtain_num is not None:
      oprot.writeFieldBegin('obtain_num', TType.I32, 1)
      oprot.writeI32(self.obtain_num)
      oprot.writeFieldEnd()
    if self.obtain_amt is not None:
      oprot.writeFieldBegin('obtain_amt', TType.I32, 2)
      oprot.writeI32(self.obtain_amt)
      oprot.writeFieldEnd()
    if self.award_num is not None:
      oprot.writeFieldBegin('award_num', TType.I32, 3)
      oprot.writeI32(self.award_num)
      oprot.writeFieldEnd()
    if self.award_amt is not None:
      oprot.writeFieldBegin('award_amt', TType.I32, 4)
      oprot.writeI32(self.award_amt)
      oprot.writeFieldEnd()
    if self.use_num is not None:
      oprot.writeFieldBegin('use_num', TType.I32, 5)
      oprot.writeI32(self.use_num)
      oprot.writeFieldEnd()
    if self.use_amt is not None:
      oprot.writeFieldBegin('use_amt', TType.I32, 6)
      oprot.writeI32(self.use_amt)
      oprot.writeFieldEnd()
    if self.total_amt is not None:
      oprot.writeFieldBegin('total_amt', TType.I32, 7)
      oprot.writeI32(self.total_amt)
      oprot.writeFieldEnd()
    if self.share_ids is not None:
      oprot.writeFieldBegin('share_ids', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.share_ids))
      for iter13 in self.share_ids:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I64, 9)
      oprot.writeI64(self.trade_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponRuleProfile:
  """
  Attributes:
   - mchnt_limit
   - effect_type
   - effect_offset
   - effect_len
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'mchnt_limit', None, 1, ), # 1
    (2, TType.I16, 'effect_type', None, 1, ), # 2
    (3, TType.I32, 'effect_offset', None, 1, ), # 3
    (4, TType.I32, 'effect_len', None, 7, ), # 4
  )

  def __init__(self, mchnt_limit=thrift_spec[1][4], effect_type=thrift_spec[2][4], effect_offset=thrift_spec[3][4], effect_len=thrift_spec[4][4],):
    self.mchnt_limit = mchnt_limit
    self.effect_type = effect_type
    self.effect_offset = effect_offset
    self.effect_len = effect_len

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.mchnt_limit = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.effect_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.effect_offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.effect_len = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponRuleProfile')
    if self.mchnt_limit is not None:
      oprot.writeFieldBegin('mchnt_limit', TType.I16, 1)
      oprot.writeI16(self.mchnt_limit)
      oprot.writeFieldEnd()
    if self.effect_type is not None:
      oprot.writeFieldBegin('effect_type', TType.I16, 2)
      oprot.writeI16(self.effect_type)
      oprot.writeFieldEnd()
    if self.effect_offset is not None:
      oprot.writeFieldBegin('effect_offset', TType.I32, 3)
      oprot.writeI32(self.effect_offset)
      oprot.writeFieldEnd()
    if self.effect_len is not None:
      oprot.writeFieldBegin('effect_len', TType.I32, 4)
      oprot.writeI32(self.effect_len)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponRule:
  """
  Attributes:
   - id
   - src
   - mchnt_id
   - title
   - amt_max
   - amt_min
   - use_rule
   - content
   - status
   - start_time
   - expire_time
   - profile
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.STRING, 'title', None, None, ), # 4
    (5, TType.I64, 'amt_max', None, None, ), # 5
    (6, TType.I64, 'amt_min', None, None, ), # 6
    (7, TType.STRING, 'use_rule', None, None, ), # 7
    (8, TType.STRING, 'content', None, None, ), # 8
    (9, TType.I16, 'status', None, None, ), # 9
    (10, TType.I32, 'start_time', None, None, ), # 10
    (11, TType.I32, 'expire_time', None, None, ), # 11
    (12, TType.STRUCT, 'profile', (CouponRuleProfile, CouponRuleProfile.thrift_spec), None, ), # 12
  )

  def __init__(self, id=None, src=None, mchnt_id=None, title=None, amt_max=None, amt_min=None, use_rule=None, content=None, status=None, start_time=None, expire_time=None, profile=None,):
    self.id = id
    self.src = src
    self.mchnt_id = mchnt_id
    self.title = title
    self.amt_max = amt_max
    self.amt_min = amt_min
    self.use_rule = use_rule
    self.content = content
    self.status = status
    self.start_time = start_time
    self.expire_time = expire_time
    self.profile = profile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.amt_max = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.amt_min = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.use_rule = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.expire_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.profile = CouponRuleProfile()
          self.profile.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 4)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.amt_max is not None:
      oprot.writeFieldBegin('amt_max', TType.I64, 5)
      oprot.writeI64(self.amt_max)
      oprot.writeFieldEnd()
    if self.amt_min is not None:
      oprot.writeFieldBegin('amt_min', TType.I64, 6)
      oprot.writeI64(self.amt_min)
      oprot.writeFieldEnd()
    if self.use_rule is not None:
      oprot.writeFieldBegin('use_rule', TType.STRING, 7)
      oprot.writeString(self.use_rule)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 8)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 9)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 10)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I32, 11)
      oprot.writeI32(self.expire_time)
      oprot.writeFieldEnd()
    if self.profile is not None:
      oprot.writeFieldBegin('profile', TType.STRUCT, 12)
      self.profile.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponRecord:
  """
  Attributes:
   - id
   - src
   - mchnt_id
   - customer_id
   - out_sn
   - orig_out_sn
   - coupon_code
   - coupon_amt
   - type
   - content
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.STRING, 'customer_id', None, None, ), # 4
    (5, TType.STRING, 'out_sn', None, None, ), # 5
    (6, TType.STRING, 'orig_out_sn', None, None, ), # 6
    (7, TType.STRING, 'coupon_code', None, None, ), # 7
    (8, TType.I32, 'coupon_amt', None, None, ), # 8
    (9, TType.I16, 'type', None, None, ), # 9
    (10, TType.STRING, 'content', None, None, ), # 10
    (11, TType.I32, 'create_time', None, None, ), # 11
  )

  def __init__(self, id=None, src=None, mchnt_id=None, customer_id=None, out_sn=None, orig_out_sn=None, coupon_code=None, coupon_amt=None, type=None, content=None, create_time=None,):
    self.id = id
    self.src = src
    self.mchnt_id = mchnt_id
    self.customer_id = customer_id
    self.out_sn = out_sn
    self.orig_out_sn = orig_out_sn
    self.coupon_code = coupon_code
    self.coupon_amt = coupon_amt
    self.type = type
    self.content = content
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.orig_out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.coupon_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.coupon_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 4)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 5)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    if self.orig_out_sn is not None:
      oprot.writeFieldBegin('orig_out_sn', TType.STRING, 6)
      oprot.writeString(self.orig_out_sn)
      oprot.writeFieldEnd()
    if self.coupon_code is not None:
      oprot.writeFieldBegin('coupon_code', TType.STRING, 7)
      oprot.writeString(self.coupon_code)
      oprot.writeFieldEnd()
    if self.coupon_amt is not None:
      oprot.writeFieldBegin('coupon_amt', TType.I32, 8)
      oprot.writeI32(self.coupon_amt)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 9)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 10)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 11)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityQueryArgs:
  """
  Attributes:
   - src
   - mchnt_id
   - activity_id
   - pos
   - count
   - type
   - status_list
   - apply_mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.I64, 'activity_id', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
    (6, TType.I16, 'type', None, -1, ), # 6
    (7, TType.LIST, 'status_list', (TType.I16,None), None, ), # 7
    (8, TType.STRING, 'apply_mchnt_id', None, "", ), # 8
  )

  def __init__(self, src=None, mchnt_id=None, activity_id=None, pos=thrift_spec[4][4], count=thrift_spec[5][4], type=thrift_spec[6][4], status_list=None, apply_mchnt_id=thrift_spec[8][4],):
    self.src = src
    self.mchnt_id = mchnt_id
    self.activity_id = activity_id
    self.pos = pos
    self.count = count
    self.type = type
    self.status_list = status_list
    self.apply_mchnt_id = apply_mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.status_list = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI16();
            self.status_list.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.apply_mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 3)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 6)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.status_list is not None:
      oprot.writeFieldBegin('status_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.status_list))
      for iter20 in self.status_list:
        oprot.writeI16(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.apply_mchnt_id is not None:
      oprot.writeFieldBegin('apply_mchnt_id', TType.STRING, 8)
      oprot.writeString(self.apply_mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityShareArgs:
  """
  Attributes:
   - src
   - customer_id
   - trade_amt
   - mchnt_id
   - type
   - award_status
   - out_sn
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.I32, 'trade_amt', None, None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
    (5, TType.I16, 'type', None, None, ), # 5
    (6, TType.I16, 'award_status', None, None, ), # 6
    (7, TType.STRING, 'out_sn', None, "", ), # 7
  )

  def __init__(self, src=None, customer_id=None, trade_amt=None, mchnt_id=None, type=None, award_status=None, out_sn=thrift_spec[7][4],):
    self.src = src
    self.customer_id = customer_id
    self.trade_amt = trade_amt
    self.mchnt_id = mchnt_id
    self.type = type
    self.award_status = award_status
    self.out_sn = out_sn

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.trade_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.award_status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityShareArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I32, 3)
      oprot.writeI32(self.trade_amt)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 5)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.award_status is not None:
      oprot.writeFieldBegin('award_status', TType.I16, 6)
      oprot.writeI16(self.award_status)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 7)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    if self.trade_amt is None:
      raise TProtocol.TProtocolException(message='Required field trade_amt is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityStatArgs:
  """
  Attributes:
   - src
   - activity_id
   - share_id
   - start_time
   - end_time
   - activity_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.I64, 'activity_id', None, None, ), # 2
    (3, TType.I64, 'share_id', None, None, ), # 3
    (4, TType.I32, 'start_time', None, None, ), # 4
    (5, TType.I32, 'end_time', None, None, ), # 5
    (6, TType.LIST, 'activity_ids', (TType.I64,None), None, ), # 6
  )

  def __init__(self, src=None, activity_id=None, share_id=None, start_time=None, end_time=None, activity_ids=None,):
    self.src = src
    self.activity_id = activity_id
    self.share_id = share_id
    self.start_time = start_time
    self.end_time = end_time
    self.activity_ids = activity_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.share_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.activity_ids = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.activity_ids.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityStatArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 2)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.share_id is not None:
      oprot.writeFieldBegin('share_id', TType.I64, 3)
      oprot.writeI64(self.share_id)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 4)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 5)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.activity_ids is not None:
      oprot.writeFieldBegin('activity_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.I64, len(self.activity_ids))
      for iter27 in self.activity_ids:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponRuleQueryArgs:
  """
  Attributes:
   - src
   - mchnt_id
   - rule_id
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.I64, 'rule_id', None, None, ), # 3
    (4, TType.I32, 'pos', None, 0, ), # 4
    (5, TType.I32, 'count', None, 20, ), # 5
  )

  def __init__(self, src=None, mchnt_id=None, rule_id=None, pos=thrift_spec[4][4], count=thrift_spec[5][4],):
    self.src = src
    self.mchnt_id = mchnt_id
    self.rule_id = rule_id
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.rule_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponRuleQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.rule_id is not None:
      oprot.writeFieldBegin('rule_id', TType.I64, 3)
      oprot.writeI64(self.rule_id)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 4)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponOperateArgs:
  """
  Attributes:
   - src
   - coupon_code
   - type
   - out_sn
   - orig_out_sn
   - mchnt_id
   - customer_id
   - trade_amt
   - content
   - coupon_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'coupon_code', None, None, ), # 2
    (3, TType.I16, 'type', None, None, ), # 3
    (4, TType.STRING, 'out_sn', None, None, ), # 4
    (5, TType.STRING, 'orig_out_sn', None, None, ), # 5
    (6, TType.STRING, 'mchnt_id', None, None, ), # 6
    (7, TType.STRING, 'customer_id', None, None, ), # 7
    (8, TType.I32, 'trade_amt', None, None, ), # 8
    (9, TType.STRING, 'content', None, None, ), # 9
    (10, TType.I32, 'coupon_amt', None, -1, ), # 10
  )

  def __init__(self, src=None, coupon_code=None, type=None, out_sn=None, orig_out_sn=None, mchnt_id=None, customer_id=None, trade_amt=None, content=None, coupon_amt=thrift_spec[10][4],):
    self.src = src
    self.coupon_code = coupon_code
    self.type = type
    self.out_sn = out_sn
    self.orig_out_sn = orig_out_sn
    self.mchnt_id = mchnt_id
    self.customer_id = customer_id
    self.trade_amt = trade_amt
    self.content = content
    self.coupon_amt = coupon_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.coupon_code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.orig_out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.trade_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.coupon_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponOperateArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.coupon_code is not None:
      oprot.writeFieldBegin('coupon_code', TType.STRING, 2)
      oprot.writeString(self.coupon_code)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 3)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 4)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    if self.orig_out_sn is not None:
      oprot.writeFieldBegin('orig_out_sn', TType.STRING, 5)
      oprot.writeString(self.orig_out_sn)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 6)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 7)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I32, 8)
      oprot.writeI32(self.trade_amt)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 9)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.coupon_amt is not None:
      oprot.writeFieldBegin('coupon_amt', TType.I32, 10)
      oprot.writeI32(self.coupon_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.coupon_code is None:
      raise TProtocol.TProtocolException(message='Required field coupon_code is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponObtainArgs:
  """
  Attributes:
   - src
   - customer_id
   - code
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.STRING, 'code', None, None, ), # 3
    (4, TType.I16, 'status', None, None, ), # 4
  )

  def __init__(self, src=None, customer_id=None, code=None, status=None,):
    self.src = src
    self.customer_id = customer_id
    self.code = code
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponObtainArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 3)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 4)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    if self.code is None:
      raise TProtocol.TProtocolException(message='Required field code is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponDispatchArgs:
  """
  Attributes:
   - src
   - customer_list
   - activity_id
   - num
   - mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.LIST, 'customer_list', (TType.STRING,None), None, ), # 2
    (3, TType.I64, 'activity_id', None, None, ), # 3
    (4, TType.I16, 'num', None, 1, ), # 4
    (5, TType.STRING, 'mchnt_id', None, "", ), # 5
  )

  def __init__(self, src=None, customer_list=None, activity_id=None, num=thrift_spec[4][4], mchnt_id=thrift_spec[5][4],):
    self.src = src
    self.customer_list = customer_list
    self.activity_id = activity_id
    self.num = num
    self.mchnt_id = mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.customer_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.customer_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponDispatchArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_list is not None:
      oprot.writeFieldBegin('customer_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.customer_list))
      for iter34 in self.customer_list:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 3)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I16, 4)
      oprot.writeI16(self.num)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 5)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_list is None:
      raise TProtocol.TProtocolException(message='Required field customer_list is unset!')
    if self.activity_id is None:
      raise TProtocol.TProtocolException(message='Required field activity_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DispatchResp:
  """
  Attributes:
   - customer_id
   - num
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'customer_id', None, None, ), # 1
    (2, TType.I16, 'num', None, None, ), # 2
  )

  def __init__(self, customer_id=None, num=None,):
    self.customer_id = customer_id
    self.num = num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.num = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DispatchResp')
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 1)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I16, 2)
      oprot.writeI16(self.num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponQueryArgs:
  """
  Attributes:
   - src
   - customer_id
   - type_list
   - start_time
   - end_time
   - pos
   - count
   - trade_amt
   - status
   - mchnt_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.LIST, 'type_list', (TType.I16,None), None, ), # 3
    (4, TType.I32, 'start_time', None, None, ), # 4
    (5, TType.I32, 'end_time', None, None, ), # 5
    (6, TType.I32, 'pos', None, 0, ), # 6
    (7, TType.I32, 'count', None, 20, ), # 7
    (8, TType.I32, 'trade_amt', None, None, ), # 8
    (9, TType.I16, 'status', None, 255, ), # 9
    (10, TType.STRING, 'mchnt_id', None, None, ), # 10
  )

  def __init__(self, src=None, customer_id=None, type_list=None, start_time=None, end_time=None, pos=thrift_spec[6][4], count=thrift_spec[7][4], trade_amt=None, status=thrift_spec[9][4], mchnt_id=None,):
    self.src = src
    self.customer_id = customer_id
    self.type_list = type_list
    self.start_time = start_time
    self.end_time = end_time
    self.pos = pos
    self.count = count
    self.trade_amt = trade_amt
    self.status = status
    self.mchnt_id = mchnt_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI16();
            self.type_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.trade_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I16, len(self.type_list))
      for iter41 in self.type_list:
        oprot.writeI16(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 4)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 5)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 6)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 7)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I32, 8)
      oprot.writeI32(self.trade_amt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 9)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 10)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponUseRecordArgs:
  """
  Attributes:
   - src
   - mchnt_id
   - rule_id
   - start_time
   - end_time
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'mchnt_id', None, None, ), # 2
    (3, TType.I64, 'rule_id', None, None, ), # 3
    (4, TType.I32, 'start_time', None, None, ), # 4
    (5, TType.I32, 'end_time', None, None, ), # 5
    (6, TType.I32, 'pos', None, 0, ), # 6
    (7, TType.I32, 'count', None, 20, ), # 7
  )

  def __init__(self, src=None, mchnt_id=None, rule_id=None, start_time=None, end_time=None, pos=thrift_spec[6][4], count=thrift_spec[7][4],):
    self.src = src
    self.mchnt_id = mchnt_id
    self.rule_id = rule_id
    self.start_time = start_time
    self.end_time = end_time
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.rule_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponUseRecordArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 2)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.rule_id is not None:
      oprot.writeFieldBegin('rule_id', TType.I64, 3)
      oprot.writeI64(self.rule_id)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 4)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 5)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 6)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 7)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.pos is None:
      raise TProtocol.TProtocolException(message='Required field pos is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityApply:
  """
  Attributes:
   - src
   - mchnt_list
   - activity_id
   - op_type
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.LIST, 'mchnt_list', (TType.STRING,None), None, ), # 2
    (3, TType.I64, 'activity_id', None, None, ), # 3
    (4, TType.I16, 'op_type', None, None, ), # 4
    (5, TType.STRING, 'content', None, None, ), # 5
  )

  def __init__(self, src=None, mchnt_list=None, activity_id=None, op_type=None, content=None,):
    self.src = src
    self.mchnt_list = mchnt_list
    self.activity_id = activity_id
    self.op_type = op_type
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.mchnt_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString();
            self.mchnt_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.op_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityApply')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_list is not None:
      oprot.writeFieldBegin('mchnt_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.mchnt_list))
      for iter48 in self.mchnt_list:
        oprot.writeString(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 3)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.op_type is not None:
      oprot.writeFieldBegin('op_type', TType.I16, 4)
      oprot.writeI16(self.op_type)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 5)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.mchnt_list is None:
      raise TProtocol.TProtocolException(message='Required field mchnt_list is unset!')
    if self.activity_id is None:
      raise TProtocol.TProtocolException(message='Required field activity_id is unset!')
    if self.op_type is None:
      raise TProtocol.TProtocolException(message='Required field op_type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegralRule:
  """
  Attributes:
   - id
   - src
   - title
   - trade_exchange
   - integral_exchange
   - content
   - status
   - start_time
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.I64, 'trade_exchange', None, None, ), # 4
    (5, TType.I64, 'integral_exchange', None, None, ), # 5
    (6, TType.STRING, 'content', None, None, ), # 6
    (7, TType.I16, 'status', None, 1, ), # 7
    (8, TType.I32, 'start_time', None, None, ), # 8
    (9, TType.I32, 'expire_time', None, None, ), # 9
  )

  def __init__(self, id=None, src=None, title=None, trade_exchange=None, integral_exchange=None, content=None, status=thrift_spec[7][4], start_time=None, expire_time=None,):
    self.id = id
    self.src = src
    self.title = title
    self.trade_exchange = trade_exchange
    self.integral_exchange = integral_exchange
    self.content = content
    self.status = status
    self.start_time = start_time
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.trade_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.integral_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.expire_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegralRule')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.trade_exchange is not None:
      oprot.writeFieldBegin('trade_exchange', TType.I64, 4)
      oprot.writeI64(self.trade_exchange)
      oprot.writeFieldEnd()
    if self.integral_exchange is not None:
      oprot.writeFieldBegin('integral_exchange', TType.I64, 5)
      oprot.writeI64(self.integral_exchange)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 6)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 7)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 8)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I32, 9)
      oprot.writeI32(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegralRuleQueryArgs:
  """
  Attributes:
   - src
   - rule_id
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.I64, 'rule_id', None, 0, ), # 2
    (3, TType.I32, 'pos', None, 0, ), # 3
    (4, TType.I32, 'count', None, 20, ), # 4
  )

  def __init__(self, src=None, rule_id=thrift_spec[2][4], pos=thrift_spec[3][4], count=thrift_spec[4][4],):
    self.src = src
    self.rule_id = rule_id
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.rule_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegralRuleQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.rule_id is not None:
      oprot.writeFieldBegin('rule_id', TType.I64, 2)
      oprot.writeI64(self.rule_id)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 3)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegralExchange:
  """
  Attributes:
   - src
   - customer_id
   - out_sn
   - type
   - trade_amt
   - integral
   - mchnt_id
   - orig_out_sn
   - content
   - total_amt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.STRING, 'out_sn', None, None, ), # 3
    (4, TType.I16, 'type', None, None, ), # 4
    (5, TType.I32, 'trade_amt', None, None, ), # 5
    (6, TType.I32, 'integral', None, None, ), # 6
    (7, TType.STRING, 'mchnt_id', None, None, ), # 7
    (8, TType.STRING, 'orig_out_sn', None, None, ), # 8
    (9, TType.STRING, 'content', None, None, ), # 9
    (10, TType.I64, 'total_amt', None, 0, ), # 10
  )

  def __init__(self, src=None, customer_id=None, out_sn=None, type=None, trade_amt=None, integral=None, mchnt_id=None, orig_out_sn=None, content=None, total_amt=thrift_spec[10][4],):
    self.src = src
    self.customer_id = customer_id
    self.out_sn = out_sn
    self.type = type
    self.trade_amt = trade_amt
    self.integral = integral
    self.mchnt_id = mchnt_id
    self.orig_out_sn = orig_out_sn
    self.content = content
    self.total_amt = total_amt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.trade_amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.orig_out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.total_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegralExchange')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 3)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 4)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.trade_amt is not None:
      oprot.writeFieldBegin('trade_amt', TType.I32, 5)
      oprot.writeI32(self.trade_amt)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I32, 6)
      oprot.writeI32(self.integral)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 7)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.orig_out_sn is not None:
      oprot.writeFieldBegin('orig_out_sn', TType.STRING, 8)
      oprot.writeString(self.orig_out_sn)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 9)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.total_amt is not None:
      oprot.writeFieldBegin('total_amt', TType.I64, 10)
      oprot.writeI64(self.total_amt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    if self.out_sn is None:
      raise TProtocol.TProtocolException(message='Required field out_sn is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BIntegralExchange:
  """
  Attributes:
   - src
   - customer_id
   - integral
   - out_sn
   - mchnt_id
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.I32, 'integral', None, None, ), # 3
    (4, TType.STRING, 'out_sn', None, "", ), # 4
    (5, TType.STRING, 'mchnt_id', None, "", ), # 5
    (6, TType.STRING, 'content', None, "", ), # 6
  )

  def __init__(self, src=None, customer_id=None, integral=None, out_sn=thrift_spec[4][4], mchnt_id=thrift_spec[5][4], content=thrift_spec[6][4],):
    self.src = src
    self.customer_id = customer_id
    self.integral = integral
    self.out_sn = out_sn
    self.mchnt_id = mchnt_id
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BIntegralExchange')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I32, 3)
      oprot.writeI32(self.integral)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 4)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 5)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 6)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    if self.integral is None:
      raise TProtocol.TProtocolException(message='Required field integral is unset!')
    if self.out_sn is None:
      raise TProtocol.TProtocolException(message='Required field out_sn is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IntegralCoupon:
  """
  Attributes:
   - base
   - activity_id
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (BIntegralExchange, BIntegralExchange.thrift_spec), None, ), # 1
    (2, TType.I64, 'activity_id', None, None, ), # 2
    (3, TType.I16, 'status', None, 2, ), # 3
  )

  def __init__(self, base=None, activity_id=None, status=thrift_spec[3][4],):
    self.base = base
    self.activity_id = activity_id
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = BIntegralExchange()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IntegralCoupon')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 2)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.activity_id is None:
      raise TProtocol.TProtocolException(message='Required field activity_id is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExchangeResp:
  """
  Attributes:
   - src
   - customer_id
   - type
   - integral
   - amt
   - trade_exchange
   - integral_exchange
   - curr_integral
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.I16, 'type', None, None, ), # 3
    (4, TType.I32, 'integral', None, None, ), # 4
    (5, TType.I32, 'amt', None, None, ), # 5
    (6, TType.I64, 'trade_exchange', None, None, ), # 6
    (7, TType.I64, 'integral_exchange', None, None, ), # 7
    (8, TType.I32, 'curr_integral', None, None, ), # 8
  )

  def __init__(self, src=None, customer_id=None, type=None, integral=None, amt=None, trade_exchange=None, integral_exchange=None, curr_integral=None,):
    self.src = src
    self.customer_id = customer_id
    self.type = type
    self.integral = integral
    self.amt = amt
    self.trade_exchange = trade_exchange
    self.integral_exchange = integral_exchange
    self.curr_integral = curr_integral

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.trade_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.integral_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.curr_integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExchangeResp')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 3)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I32, 4)
      oprot.writeI32(self.integral)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I32, 5)
      oprot.writeI32(self.amt)
      oprot.writeFieldEnd()
    if self.trade_exchange is not None:
      oprot.writeFieldBegin('trade_exchange', TType.I64, 6)
      oprot.writeI64(self.trade_exchange)
      oprot.writeFieldEnd()
    if self.integral_exchange is not None:
      oprot.writeFieldBegin('integral_exchange', TType.I64, 7)
      oprot.writeI64(self.integral_exchange)
      oprot.writeFieldEnd()
    if self.curr_integral is not None:
      oprot.writeFieldBegin('curr_integral', TType.I32, 8)
      oprot.writeI32(self.curr_integral)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BExchangeResp:
  """
  Attributes:
   - src
   - customer_id
   - integral
   - curr_integral
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.I32, 'integral', None, None, ), # 3
    (4, TType.I32, 'curr_integral', None, None, ), # 4
  )

  def __init__(self, src=None, customer_id=None, integral=None, curr_integral=None,):
    self.src = src
    self.customer_id = customer_id
    self.integral = integral
    self.curr_integral = curr_integral

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.curr_integral = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BExchangeResp')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I32, 3)
      oprot.writeI32(self.integral)
      oprot.writeFieldEnd()
    if self.curr_integral is not None:
      oprot.writeFieldBegin('curr_integral', TType.I32, 4)
      oprot.writeI32(self.curr_integral)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponExchangeResp:
  """
  Attributes:
   - base
   - activity_id
   - coupon
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'base', (BExchangeResp, BExchangeResp.thrift_spec), None, ), # 1
    (2, TType.I64, 'activity_id', None, None, ), # 2
    (3, TType.STRUCT, 'coupon', (Coupon, Coupon.thrift_spec), None, ), # 3
  )

  def __init__(self, base=None, activity_id=None, coupon=None,):
    self.base = base
    self.activity_id = activity_id
    self.coupon = coupon

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.base = BExchangeResp()
          self.base.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.coupon = Coupon()
          self.coupon.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponExchangeResp')
    if self.base is not None:
      oprot.writeFieldBegin('base', TType.STRUCT, 1)
      self.base.write(oprot)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 2)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.coupon is not None:
      oprot.writeFieldBegin('coupon', TType.STRUCT, 3)
      self.coupon.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfileQueryArgs:
  """
  Attributes:
   - src
   - customer_id
   - type_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.LIST, 'type_list', (TType.I16,None), None, ), # 3
    (4, TType.LIST, 'status', (TType.I16,None), None, ), # 4
  )

  def __init__(self, src=None, customer_id=None, type_list=None, status=None,):
    self.src = src
    self.customer_id = customer_id
    self.type_list = type_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI16();
            self.type_list.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.status = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = iprot.readI16();
            self.status.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfileQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I16, len(self.type_list))
      for iter61 in self.type_list:
        oprot.writeI16(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 4)
      oprot.writeListBegin(TType.I16, len(self.status))
      for iter62 in self.status:
        oprot.writeI16(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Integral:
  """
  Attributes:
   - integral
   - integral_exchange
   - trade_exchange
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'integral', None, None, ), # 1
    (2, TType.I64, 'integral_exchange', None, None, ), # 2
    (3, TType.I64, 'trade_exchange', None, None, ), # 3
  )

  def __init__(self, integral=None, integral_exchange=None, trade_exchange=None,):
    self.integral = integral
    self.integral_exchange = integral_exchange
    self.trade_exchange = trade_exchange

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.integral = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.integral_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.trade_exchange = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Integral')
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.I64, 1)
      oprot.writeI64(self.integral)
      oprot.writeFieldEnd()
    if self.integral_exchange is not None:
      oprot.writeFieldBegin('integral_exchange', TType.I64, 2)
      oprot.writeI64(self.integral_exchange)
      oprot.writeFieldEnd()
    if self.trade_exchange is not None:
      oprot.writeFieldBegin('trade_exchange', TType.I64, 3)
      oprot.writeI64(self.trade_exchange)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Profile:
  """
  Attributes:
   - src
   - customer_id
   - integral
   - balance
   - coupon
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.STRUCT, 'integral', (Integral, Integral.thrift_spec), None, ), # 3
    (4, TType.I64, 'balance', None, 0, ), # 4
    (5, TType.LIST, 'coupon', (TType.STRUCT,(Coupon, Coupon.thrift_spec)), None, ), # 5
  )

  def __init__(self, src=None, customer_id=None, integral=None, balance=thrift_spec[4][4], coupon=None,):
    self.src = src
    self.customer_id = customer_id
    self.integral = integral
    self.balance = balance
    self.coupon = coupon

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.integral = Integral()
          self.integral.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.balance = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.coupon = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = Coupon()
            _elem68.read(iprot)
            self.coupon.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Profile')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.integral is not None:
      oprot.writeFieldBegin('integral', TType.STRUCT, 3)
      self.integral.write(oprot)
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.I64, 4)
      oprot.writeI64(self.balance)
      oprot.writeFieldEnd()
    if self.coupon is not None:
      oprot.writeFieldBegin('coupon', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.coupon))
      for iter69 in self.coupon:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordQueryArgs:
  """
  Attributes:
   - src
   - customer_id
   - type_list
   - status
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'src', None, None, ), # 1
    (2, TType.STRING, 'customer_id', None, None, ), # 2
    (3, TType.LIST, 'type_list', (TType.I16,None), None, ), # 3
    (4, TType.LIST, 'status', (TType.I16,None), None, ), # 4
    (5, TType.I32, 'pos', None, 0, ), # 5
    (6, TType.I32, 'count', None, 20, ), # 6
  )

  def __init__(self, src=None, customer_id=None, type_list=None, status=None, pos=thrift_spec[5][4], count=thrift_spec[6][4],):
    self.src = src
    self.customer_id = customer_id
    self.type_list = type_list
    self.status = status
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.type_list = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readI16();
            self.type_list.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.status = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = iprot.readI16();
            self.status.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordQueryArgs')
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 1)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 2)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.type_list is not None:
      oprot.writeFieldBegin('type_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I16, len(self.type_list))
      for iter82 in self.type_list:
        oprot.writeI16(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.LIST, 4)
      oprot.writeListBegin(TType.I16, len(self.status))
      for iter83 in self.status:
        oprot.writeI16(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 5)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 6)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.src is None:
      raise TProtocol.TProtocolException(message='Required field src is unset!')
    if self.customer_id is None:
      raise TProtocol.TProtocolException(message='Required field customer_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CustomerRecord:
  """
  Attributes:
   - id
   - src
   - mchnt_id
   - customer_id
   - out_sn
   - orig_out_sn
   - xx_type
   - amt
   - num
   - curr_num
   - type
   - content
   - create_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, None, ), # 2
    (3, TType.STRING, 'mchnt_id', None, None, ), # 3
    (4, TType.STRING, 'customer_id', None, None, ), # 4
    (5, TType.STRING, 'out_sn', None, None, ), # 5
    (6, TType.STRING, 'orig_out_sn', None, None, ), # 6
    (7, TType.I16, 'xx_type', None, None, ), # 7
    (8, TType.I32, 'amt', None, None, ), # 8
    (9, TType.I32, 'num', None, None, ), # 9
    (10, TType.I32, 'curr_num', None, None, ), # 10
    (11, TType.I16, 'type', None, None, ), # 11
    (12, TType.STRING, 'content', None, None, ), # 12
    (13, TType.I32, 'create_time', None, None, ), # 13
  )

  def __init__(self, id=None, src=None, mchnt_id=None, customer_id=None, out_sn=None, orig_out_sn=None, xx_type=None, amt=None, num=None, curr_num=None, type=None, content=None, create_time=None,):
    self.id = id
    self.src = src
    self.mchnt_id = mchnt_id
    self.customer_id = customer_id
    self.out_sn = out_sn
    self.orig_out_sn = orig_out_sn
    self.xx_type = xx_type
    self.amt = amt
    self.num = num
    self.curr_num = curr_num
    self.type = type
    self.content = content
    self.create_time = create_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.customer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.orig_out_sn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.xx_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.amt = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.curr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CustomerRecord')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 3)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.customer_id is not None:
      oprot.writeFieldBegin('customer_id', TType.STRING, 4)
      oprot.writeString(self.customer_id)
      oprot.writeFieldEnd()
    if self.out_sn is not None:
      oprot.writeFieldBegin('out_sn', TType.STRING, 5)
      oprot.writeString(self.out_sn)
      oprot.writeFieldEnd()
    if self.orig_out_sn is not None:
      oprot.writeFieldBegin('orig_out_sn', TType.STRING, 6)
      oprot.writeString(self.orig_out_sn)
      oprot.writeFieldEnd()
    if self.xx_type is not None:
      oprot.writeFieldBegin('xx_type', TType.I16, 7)
      oprot.writeI16(self.xx_type)
      oprot.writeFieldEnd()
    if self.amt is not None:
      oprot.writeFieldBegin('amt', TType.I32, 8)
      oprot.writeI32(self.amt)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 9)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.curr_num is not None:
      oprot.writeFieldBegin('curr_num', TType.I32, 10)
      oprot.writeI32(self.curr_num)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 11)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 12)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 13)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CouponStory:
  """
  Attributes:
   - id
   - src
   - activity_id
   - mchnt_id
   - obtain_num
   - use_num
   - use_per
   - avg_spend
   - coupon_trade_amt
   - coupon_amt_per
   - industry
   - type
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'src', None, "QPOS", ), # 2
    (3, TType.I64, 'activity_id', None, None, ), # 3
    (4, TType.STRING, 'mchnt_id', None, None, ), # 4
    (5, TType.I32, 'obtain_num', None, 0, ), # 5
    (6, TType.I32, 'use_num', None, 0, ), # 6
    (7, TType.I32, 'use_per', None, 0, ), # 7
    (8, TType.I32, 'avg_spend', None, 0, ), # 8
    (9, TType.I64, 'coupon_trade_amt', None, 0, ), # 9
    (10, TType.I32, 'coupon_amt_per', None, 0, ), # 10
    (11, TType.STRING, 'industry', None, "", ), # 11
    (12, TType.I16, 'type', None, 1, ), # 12
    (13, TType.I16, 'status', None, 2, ), # 13
  )

  def __init__(self, id=None, src=thrift_spec[2][4], activity_id=None, mchnt_id=None, obtain_num=thrift_spec[5][4], use_num=thrift_spec[6][4], use_per=thrift_spec[7][4], avg_spend=thrift_spec[8][4], coupon_trade_amt=thrift_spec[9][4], coupon_amt_per=thrift_spec[10][4], industry=thrift_spec[11][4], type=thrift_spec[12][4], status=thrift_spec[13][4],):
    self.id = id
    self.src = src
    self.activity_id = activity_id
    self.mchnt_id = mchnt_id
    self.obtain_num = obtain_num
    self.use_num = use_num
    self.use_per = use_per
    self.avg_spend = avg_spend
    self.coupon_trade_amt = coupon_trade_amt
    self.coupon_amt_per = coupon_amt_per
    self.industry = industry
    self.type = type
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.src = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.activity_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.mchnt_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.obtain_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.use_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.use_per = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.avg_spend = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.coupon_trade_amt = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.coupon_amt_per = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.industry = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CouponStory')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.src is not None:
      oprot.writeFieldBegin('src', TType.STRING, 2)
      oprot.writeString(self.src)
      oprot.writeFieldEnd()
    if self.activity_id is not None:
      oprot.writeFieldBegin('activity_id', TType.I64, 3)
      oprot.writeI64(self.activity_id)
      oprot.writeFieldEnd()
    if self.mchnt_id is not None:
      oprot.writeFieldBegin('mchnt_id', TType.STRING, 4)
      oprot.writeString(self.mchnt_id)
      oprot.writeFieldEnd()
    if self.obtain_num is not None:
      oprot.writeFieldBegin('obtain_num', TType.I32, 5)
      oprot.writeI32(self.obtain_num)
      oprot.writeFieldEnd()
    if self.use_num is not None:
      oprot.writeFieldBegin('use_num', TType.I32, 6)
      oprot.writeI32(self.use_num)
      oprot.writeFieldEnd()
    if self.use_per is not None:
      oprot.writeFieldBegin('use_per', TType.I32, 7)
      oprot.writeI32(self.use_per)
      oprot.writeFieldEnd()
    if self.avg_spend is not None:
      oprot.writeFieldBegin('avg_spend', TType.I32, 8)
      oprot.writeI32(self.avg_spend)
      oprot.writeFieldEnd()
    if self.coupon_trade_amt is not None:
      oprot.writeFieldBegin('coupon_trade_amt', TType.I64, 9)
      oprot.writeI64(self.coupon_trade_amt)
      oprot.writeFieldEnd()
    if self.coupon_amt_per is not None:
      oprot.writeFieldBegin('coupon_amt_per', TType.I32, 10)
      oprot.writeI32(self.coupon_amt_per)
      oprot.writeFieldEnd()
    if self.industry is not None:
      oprot.writeFieldBegin('industry', TType.STRING, 11)
      oprot.writeString(self.industry)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 12)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 13)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StoryQueryArgs:
  """
  Attributes:
   - coupon_amt_per
   - industry
   - type
   - mode
   - pos
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'coupon_amt_per', None, None, ), # 1
    (2, TType.STRING, 'industry', None, None, ), # 2
    (3, TType.I16, 'type', None, 1, ), # 3
    (4, TType.I16, 'mode', None, 2, ), # 4
    (5, TType.I32, 'pos', None, 0, ), # 5
    (6, TType.I32, 'count', None, 20, ), # 6
  )

  def __init__(self, coupon_amt_per=None, industry=None, type=thrift_spec[3][4], mode=thrift_spec[4][4], pos=thrift_spec[5][4], count=thrift_spec[6][4],):
    self.coupon_amt_per = coupon_amt_per
    self.industry = industry
    self.type = type
    self.mode = mode
    self.pos = pos
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.coupon_amt_per = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.industry = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.mode = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pos = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StoryQueryArgs')
    if self.coupon_amt_per is not None:
      oprot.writeFieldBegin('coupon_amt_per', TType.I32, 1)
      oprot.writeI32(self.coupon_amt_per)
      oprot.writeFieldEnd()
    if self.industry is not None:
      oprot.writeFieldBegin('industry', TType.STRING, 2)
      oprot.writeString(self.industry)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I16, 3)
      oprot.writeI16(self.type)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I16, 4)
      oprot.writeI16(self.mode)
      oprot.writeFieldEnd()
    if self.pos is not None:
      oprot.writeFieldBegin('pos', TType.I32, 5)
      oprot.writeI32(self.pos)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 6)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
