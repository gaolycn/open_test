#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import QFMarketing
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i64 ping()'
  print '  i64 activity_create(Activity activity)'
  print '  i32 activity_change(Activity activity)'
  print '   activity_query(ActivityQueryArgs query)'
  print '  ActivityShare activity_share(ActivityShareArgs share)'
  print '  ActivityStat activity_stat(ActivityStatArgs stat)'
  print '   activitys_stat(ActivityStatArgs stat)'
  print '  i32 activity_apply(ActivityApply apply)'
  print '  Activity activity_shareable(ActivityShareArgs req_args)'
  print '  i64 coupon_rule_create(CouponRule coupon_rule)'
  print '  i32 coupon_rule_change(CouponRule coupon_rule)'
  print '   coupon_rule_query(CouponRuleQueryArgs query)'
  print '  i32 coupon_bind(CouponOperateArgs bind_args)'
  print '  i32 coupon_use(CouponOperateArgs use_args)'
  print '  bool coupon_verify(CouponOperateArgs verify_args)'
  print '  i32 coupon_rollback(CouponOperateArgs rollback_args)'
  print '  Coupon coupon_obtain(CouponObtainArgs obtain_args)'
  print '   coupon_query(CouponQueryArgs query_args)'
  print '   coupon_dispatch(CouponDispatchArgs dispatch_args)'
  print '   coupon_mchnt(string src, string coupon_code)'
  print '  i64 integral_rule_create(IntegralRule param)'
  print '  i32 integral_rule_change(IntegralRule param)'
  print '   integral_rule_query(IntegralRuleQueryArgs query)'
  print '  ExchangeResp integral_exchange(IntegralExchange exchange_args)'
  print '  ExchangeResp integral_rollback(IntegralExchange exchange_args)'
  print '  CouponExchangeResp integral2coupon(IntegralCoupon req_args)'
  print '  Profile customer_info(ProfileQueryArgs param)'
  print '   customer_record(RecordQueryArgs param)'
  print '   coupon_use_record_query(CouponUseRecordArgs verify)'
  print '   coupon_use_record_query_v2(CouponUseRecordArgs verify)'
  print '  i32 coupon_use_record_count(CouponUseRecordArgs verify)'
  print '  i32 coupon_use_record_count_v2(CouponUseRecordArgs verify)'
  print '   story_create( req_args)'
  print '  i32 story_change(CouponStory req_args)'
  print '   story_query(StoryQueryArgs req_args)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = QFMarketing.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'activity_create':
  if len(args) != 1:
    print 'activity_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_create(eval(args[0]),))

elif cmd == 'activity_change':
  if len(args) != 1:
    print 'activity_change requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_change(eval(args[0]),))

elif cmd == 'activity_query':
  if len(args) != 1:
    print 'activity_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_query(eval(args[0]),))

elif cmd == 'activity_share':
  if len(args) != 1:
    print 'activity_share requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_share(eval(args[0]),))

elif cmd == 'activity_stat':
  if len(args) != 1:
    print 'activity_stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_stat(eval(args[0]),))

elif cmd == 'activitys_stat':
  if len(args) != 1:
    print 'activitys_stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.activitys_stat(eval(args[0]),))

elif cmd == 'activity_apply':
  if len(args) != 1:
    print 'activity_apply requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_apply(eval(args[0]),))

elif cmd == 'activity_shareable':
  if len(args) != 1:
    print 'activity_shareable requires 1 args'
    sys.exit(1)
  pp.pprint(client.activity_shareable(eval(args[0]),))

elif cmd == 'coupon_rule_create':
  if len(args) != 1:
    print 'coupon_rule_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_rule_create(eval(args[0]),))

elif cmd == 'coupon_rule_change':
  if len(args) != 1:
    print 'coupon_rule_change requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_rule_change(eval(args[0]),))

elif cmd == 'coupon_rule_query':
  if len(args) != 1:
    print 'coupon_rule_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_rule_query(eval(args[0]),))

elif cmd == 'coupon_bind':
  if len(args) != 1:
    print 'coupon_bind requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_bind(eval(args[0]),))

elif cmd == 'coupon_use':
  if len(args) != 1:
    print 'coupon_use requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_use(eval(args[0]),))

elif cmd == 'coupon_verify':
  if len(args) != 1:
    print 'coupon_verify requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_verify(eval(args[0]),))

elif cmd == 'coupon_rollback':
  if len(args) != 1:
    print 'coupon_rollback requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_rollback(eval(args[0]),))

elif cmd == 'coupon_obtain':
  if len(args) != 1:
    print 'coupon_obtain requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_obtain(eval(args[0]),))

elif cmd == 'coupon_query':
  if len(args) != 1:
    print 'coupon_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_query(eval(args[0]),))

elif cmd == 'coupon_dispatch':
  if len(args) != 1:
    print 'coupon_dispatch requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_dispatch(eval(args[0]),))

elif cmd == 'coupon_mchnt':
  if len(args) != 2:
    print 'coupon_mchnt requires 2 args'
    sys.exit(1)
  pp.pprint(client.coupon_mchnt(args[0],args[1],))

elif cmd == 'integral_rule_create':
  if len(args) != 1:
    print 'integral_rule_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral_rule_create(eval(args[0]),))

elif cmd == 'integral_rule_change':
  if len(args) != 1:
    print 'integral_rule_change requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral_rule_change(eval(args[0]),))

elif cmd == 'integral_rule_query':
  if len(args) != 1:
    print 'integral_rule_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral_rule_query(eval(args[0]),))

elif cmd == 'integral_exchange':
  if len(args) != 1:
    print 'integral_exchange requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral_exchange(eval(args[0]),))

elif cmd == 'integral_rollback':
  if len(args) != 1:
    print 'integral_rollback requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral_rollback(eval(args[0]),))

elif cmd == 'integral2coupon':
  if len(args) != 1:
    print 'integral2coupon requires 1 args'
    sys.exit(1)
  pp.pprint(client.integral2coupon(eval(args[0]),))

elif cmd == 'customer_info':
  if len(args) != 1:
    print 'customer_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.customer_info(eval(args[0]),))

elif cmd == 'customer_record':
  if len(args) != 1:
    print 'customer_record requires 1 args'
    sys.exit(1)
  pp.pprint(client.customer_record(eval(args[0]),))

elif cmd == 'coupon_use_record_query':
  if len(args) != 1:
    print 'coupon_use_record_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_use_record_query(eval(args[0]),))

elif cmd == 'coupon_use_record_query_v2':
  if len(args) != 1:
    print 'coupon_use_record_query_v2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_use_record_query_v2(eval(args[0]),))

elif cmd == 'coupon_use_record_count':
  if len(args) != 1:
    print 'coupon_use_record_count requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_use_record_count(eval(args[0]),))

elif cmd == 'coupon_use_record_count_v2':
  if len(args) != 1:
    print 'coupon_use_record_count_v2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.coupon_use_record_count_v2(eval(args[0]),))

elif cmd == 'story_create':
  if len(args) != 1:
    print 'story_create requires 1 args'
    sys.exit(1)
  pp.pprint(client.story_create(eval(args[0]),))

elif cmd == 'story_change':
  if len(args) != 1:
    print 'story_change requires 1 args'
    sys.exit(1)
  pp.pprint(client.story_change(eval(args[0]),))

elif cmd == 'story_query':
  if len(args) != 1:
    print 'story_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.story_query(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
