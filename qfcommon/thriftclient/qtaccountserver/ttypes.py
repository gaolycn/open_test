#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MissionData:
  """
  Attributes:
   - userid
   - appid
   - starttime
   - endtime
   - merchantid
   - wxdata
   - alidata
   - userdata
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.I64, 'appid', None, None, ), # 2
    (3, TType.STRING, 'starttime', None, None, ), # 3
    (4, TType.STRING, 'endtime', None, None, ), # 4
    (5, TType.I64, 'merchantid', None, None, ), # 5
    (6, TType.STRING, 'wxdata', None, None, ), # 6
    (7, TType.STRING, 'alidata', None, None, ), # 7
    (8, TType.STRING, 'userdata', None, None, ), # 8
  )

  def __init__(self, userid=None, appid=None, starttime=None, endtime=None, merchantid=None, wxdata=None, alidata=None, userdata=None,):
    self.userid = userid
    self.appid = appid
    self.starttime = starttime
    self.endtime = endtime
    self.merchantid = merchantid
    self.wxdata = wxdata
    self.alidata = alidata
    self.userdata = userdata

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.appid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.starttime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.endtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.merchantid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.wxdata = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.alidata = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.userdata = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MissionData')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.I64, 2)
      oprot.writeI64(self.appid)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.STRING, 3)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.STRING, 4)
      oprot.writeString(self.endtime)
      oprot.writeFieldEnd()
    if self.merchantid is not None:
      oprot.writeFieldBegin('merchantid', TType.I64, 5)
      oprot.writeI64(self.merchantid)
      oprot.writeFieldEnd()
    if self.wxdata is not None:
      oprot.writeFieldBegin('wxdata', TType.STRING, 6)
      oprot.writeString(self.wxdata)
      oprot.writeFieldEnd()
    if self.alidata is not None:
      oprot.writeFieldBegin('alidata', TType.STRING, 7)
      oprot.writeString(self.alidata)
      oprot.writeFieldEnd()
    if self.userdata is not None:
      oprot.writeFieldBegin('userdata', TType.STRING, 8)
      oprot.writeString(self.userdata)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.starttime is None:
      raise TProtocol.TProtocolException(message='Required field starttime is unset!')
    if self.endtime is None:
      raise TProtocol.TProtocolException(message='Required field endtime is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountMission:
  """
  Attributes:
   - missionid
   - userid
   - appid
   - starttime
   - endtime
   - merchantid
   - wxpath
   - alipath
   - userpath
   - state
   - result
   - msg
   - createtime
   - edittime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'missionid', None, None, ), # 1
    (2, TType.I64, 'userid', None, None, ), # 2
    (3, TType.I64, 'appid', None, None, ), # 3
    (4, TType.STRING, 'starttime', None, None, ), # 4
    (5, TType.STRING, 'endtime', None, None, ), # 5
    (6, TType.I64, 'merchantid', None, None, ), # 6
    (7, TType.STRING, 'wxpath', None, None, ), # 7
    (8, TType.STRING, 'alipath', None, None, ), # 8
    (9, TType.STRING, 'userpath', None, None, ), # 9
    (10, TType.I16, 'state', None, None, ), # 10
    (11, TType.STRING, 'result', None, None, ), # 11
    (12, TType.STRING, 'msg', None, None, ), # 12
    (13, TType.STRING, 'createtime', None, None, ), # 13
    (14, TType.STRING, 'edittime', None, None, ), # 14
  )

  def __init__(self, missionid=None, userid=None, appid=None, starttime=None, endtime=None, merchantid=None, wxpath=None, alipath=None, userpath=None, state=None, result=None, msg=None, createtime=None, edittime=None,):
    self.missionid = missionid
    self.userid = userid
    self.appid = appid
    self.starttime = starttime
    self.endtime = endtime
    self.merchantid = merchantid
    self.wxpath = wxpath
    self.alipath = alipath
    self.userpath = userpath
    self.state = state
    self.result = result
    self.msg = msg
    self.createtime = createtime
    self.edittime = edittime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.missionid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.appid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.starttime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.endtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.merchantid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.wxpath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.alipath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.userpath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.state = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.createtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.edittime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountMission')
    if self.missionid is not None:
      oprot.writeFieldBegin('missionid', TType.I32, 1)
      oprot.writeI32(self.missionid)
      oprot.writeFieldEnd()
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 2)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.appid is not None:
      oprot.writeFieldBegin('appid', TType.I64, 3)
      oprot.writeI64(self.appid)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.STRING, 4)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.STRING, 5)
      oprot.writeString(self.endtime)
      oprot.writeFieldEnd()
    if self.merchantid is not None:
      oprot.writeFieldBegin('merchantid', TType.I64, 6)
      oprot.writeI64(self.merchantid)
      oprot.writeFieldEnd()
    if self.wxpath is not None:
      oprot.writeFieldBegin('wxpath', TType.STRING, 7)
      oprot.writeString(self.wxpath)
      oprot.writeFieldEnd()
    if self.alipath is not None:
      oprot.writeFieldBegin('alipath', TType.STRING, 8)
      oprot.writeString(self.alipath)
      oprot.writeFieldEnd()
    if self.userpath is not None:
      oprot.writeFieldBegin('userpath', TType.STRING, 9)
      oprot.writeString(self.userpath)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 10)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 11)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 12)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    if self.createtime is not None:
      oprot.writeFieldBegin('createtime', TType.STRING, 13)
      oprot.writeString(self.createtime)
      oprot.writeFieldEnd()
    if self.edittime is not None:
      oprot.writeFieldBegin('edittime', TType.STRING, 14)
      oprot.writeString(self.edittime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.missionid is None:
      raise TProtocol.TProtocolException(message='Required field missionid is unset!')
    if self.userid is None:
      raise TProtocol.TProtocolException(message='Required field userid is unset!')
    if self.appid is None:
      raise TProtocol.TProtocolException(message='Required field appid is unset!')
    if self.starttime is None:
      raise TProtocol.TProtocolException(message='Required field starttime is unset!')
    if self.endtime is None:
      raise TProtocol.TProtocolException(message='Required field endtime is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
