#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from fundserve import FundService
from fundserve.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string ping()')
  print('  FundConfigRet findfund(FundConfigArgs fund_args)')
  print('   findTradeTags( query_args, TradeTagArgsType query_type)')
  print('   getMerchantType(MerchantPara mcht_args)')
  print('  string withdraw(i64 userid, i64 amt, i32 fee, string biz_sn)')
  print('   addUserConf( userids, UserTag user_tag)')
  print('   setUserState( userids, UserTag user_tag, i32 user_state)')
  print('   findUserConf( userids, UserTag user_tag)')
  print('   findDebitpageInfo(i64 userid, i64 page, i64 pagesize)')
  print('   findDebitInfo(i64 userid,  expectdates)')
  print('   findActtradeInfo(i64 userid, string expectdate, i64 page, i64 pagesize)')
  print('   get_accounttrades(AccounttradeArgs act_args)')
  print('   findActtradeStatis(i64 userid, string expectdate)')
  print('   findWithholdHistory(i64 userid, string expectdate)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = FundService.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print('ping requires 0 args')
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'findfund':
  if len(args) != 1:
    print('findfund requires 1 args')
    sys.exit(1)
  pp.pprint(client.findfund(eval(args[0]),))

elif cmd == 'findTradeTags':
  if len(args) != 2:
    print('findTradeTags requires 2 args')
    sys.exit(1)
  pp.pprint(client.findTradeTags(eval(args[0]),eval(args[1]),))

elif cmd == 'getMerchantType':
  if len(args) != 1:
    print('getMerchantType requires 1 args')
    sys.exit(1)
  pp.pprint(client.getMerchantType(eval(args[0]),))

elif cmd == 'withdraw':
  if len(args) != 4:
    print('withdraw requires 4 args')
    sys.exit(1)
  pp.pprint(client.withdraw(eval(args[0]),eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'addUserConf':
  if len(args) != 2:
    print('addUserConf requires 2 args')
    sys.exit(1)
  pp.pprint(client.addUserConf(eval(args[0]),eval(args[1]),))

elif cmd == 'setUserState':
  if len(args) != 3:
    print('setUserState requires 3 args')
    sys.exit(1)
  pp.pprint(client.setUserState(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'findUserConf':
  if len(args) != 2:
    print('findUserConf requires 2 args')
    sys.exit(1)
  pp.pprint(client.findUserConf(eval(args[0]),eval(args[1]),))

elif cmd == 'findDebitpageInfo':
  if len(args) != 3:
    print('findDebitpageInfo requires 3 args')
    sys.exit(1)
  pp.pprint(client.findDebitpageInfo(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'findDebitInfo':
  if len(args) != 2:
    print('findDebitInfo requires 2 args')
    sys.exit(1)
  pp.pprint(client.findDebitInfo(eval(args[0]),eval(args[1]),))

elif cmd == 'findActtradeInfo':
  if len(args) != 4:
    print('findActtradeInfo requires 4 args')
    sys.exit(1)
  pp.pprint(client.findActtradeInfo(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'get_accounttrades':
  if len(args) != 1:
    print('get_accounttrades requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_accounttrades(eval(args[0]),))

elif cmd == 'findActtradeStatis':
  if len(args) != 2:
    print('findActtradeStatis requires 2 args')
    sys.exit(1)
  pp.pprint(client.findActtradeStatis(eval(args[0]),args[1],))

elif cmd == 'findWithholdHistory':
  if len(args) != 2:
    print('findWithholdHistory requires 2 args')
    sys.exit(1)
  pp.pprint(client.findWithholdHistory(eval(args[0]),args[1],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
