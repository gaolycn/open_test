#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TradeTagArgsType:
  USERID = 1
  HYUSERID = 2

  _VALUES_TO_NAMES = {
    1: "USERID",
    2: "HYUSERID",
  }

  _NAMES_TO_VALUES = {
    "USERID": 1,
    "HYUSERID": 2,
  }

class UserTag:
  NON_T1_CLEARING = 1

  _VALUES_TO_NAMES = {
    1: "NON_T1_CLEARING",
  }

  _NAMES_TO_VALUES = {
    "NON_T1_CLEARING": 1,
  }

class MerchantType:
  BIG_MERCHANT = 1
  REAL_MERCHANT = 2
  T0_MERCHANT = 3

  _VALUES_TO_NAMES = {
    1: "BIG_MERCHANT",
    2: "REAL_MERCHANT",
    3: "T0_MERCHANT",
  }

  _NAMES_TO_VALUES = {
    "BIG_MERCHANT": 1,
    "REAL_MERCHANT": 2,
    "T0_MERCHANT": 3,
  }

class ERRCODE:
  DBERR = 2000
  PARAMERR = 2101
  SERVERERR = 2600
  WITHDRAW_NOT_COMPLETE = 5000
  WITHDRAW_NO_PRIVILEGE = 50001

  _VALUES_TO_NAMES = {
    2000: "DBERR",
    2101: "PARAMERR",
    2600: "SERVERERR",
    5000: "WITHDRAW_NOT_COMPLETE",
    50001: "WITHDRAW_NO_PRIVILEGE",
  }

  _NAMES_TO_VALUES = {
    "DBERR": 2000,
    "PARAMERR": 2101,
    "SERVERERR": 2600,
    "WITHDRAW_NOT_COMPLETE": 5000,
    "WITHDRAW_NO_PRIVILEGE": 50001,
  }


class ReturnMsgInfo:
  """
  Attributes:
   - respcd
   - respmsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'respcd', None, None, ), # 1
    (2, TType.STRING, 'respmsg', None, None, ), # 2
  )

  def __init__(self, respcd=None, respmsg=None,):
    self.respcd = respcd
    self.respmsg = respmsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.respcd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.respmsg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReturnMsgInfo')
    if self.respcd is not None:
      oprot.writeFieldBegin('respcd', TType.STRING, 1)
      oprot.writeString(self.respcd)
      oprot.writeFieldEnd()
    if self.respmsg is not None:
      oprot.writeFieldBegin('respmsg', TType.STRING, 2)
      oprot.writeString(self.respmsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.respcd)
    value = (value * 31) ^ hash(self.respmsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServerException(TException):
  """
  Attributes:
   - error_code
   - error_msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'error_code', None, None, ), # 1
    (2, TType.STRING, 'error_msg', None, None, ), # 2
  )

  def __init__(self, error_code=None, error_msg=None,):
    self.error_code = error_code
    self.error_msg = error_msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.error_code = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.error_msg = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerException')
    if self.error_code is not None:
      oprot.writeFieldBegin('error_code', TType.STRING, 1)
      oprot.writeString(self.error_code)
      oprot.writeFieldEnd()
    if self.error_msg is not None:
      oprot.writeFieldBegin('error_msg', TType.STRING, 2)
      oprot.writeString(self.error_msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.error_code)
    value = (value * 31) ^ hash(self.error_msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FundConfigArgs:
  """
  Attributes:
   - vals
   - val_type
   - busicds
   - state
   - iscompare
   - effectdate
   - page
   - maxnum
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'vals', (TType.STRING,None), None, ), # 1
    (2, TType.I16, 'val_type', None, None, ), # 2
    (3, TType.LIST, 'busicds', (TType.STRING,None), None, ), # 3
    (4, TType.I16, 'state', None, None, ), # 4
    (5, TType.I16, 'iscompare', None, None, ), # 5
    (6, TType.STRING, 'effectdate', None, None, ), # 6
    None, # 7
    (8, TType.I32, 'page', None, None, ), # 8
    (9, TType.I32, 'maxnum', None, None, ), # 9
  )

  def __init__(self, vals=None, val_type=None, busicds=None, state=None, iscompare=None, effectdate=None, page=None, maxnum=None,):
    self.vals = vals
    self.val_type = val_type
    self.busicds = busicds
    self.state = state
    self.iscompare = iscompare
    self.effectdate = effectdate
    self.page = page
    self.maxnum = maxnum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.vals = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.vals.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.val_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.busicds = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.busicds.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.iscompare = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.effectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.page = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.maxnum = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundConfigArgs')
    if self.vals is not None:
      oprot.writeFieldBegin('vals', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.vals))
      for iter12 in self.vals:
        oprot.writeString(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.val_type is not None:
      oprot.writeFieldBegin('val_type', TType.I16, 2)
      oprot.writeI16(self.val_type)
      oprot.writeFieldEnd()
    if self.busicds is not None:
      oprot.writeFieldBegin('busicds', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.busicds))
      for iter13 in self.busicds:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 4)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.iscompare is not None:
      oprot.writeFieldBegin('iscompare', TType.I16, 5)
      oprot.writeI16(self.iscompare)
      oprot.writeFieldEnd()
    if self.effectdate is not None:
      oprot.writeFieldBegin('effectdate', TType.STRING, 6)
      oprot.writeString(self.effectdate)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.I32, 8)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.maxnum is not None:
      oprot.writeFieldBegin('maxnum', TType.I32, 9)
      oprot.writeI32(self.maxnum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vals)
    value = (value * 31) ^ hash(self.val_type)
    value = (value * 31) ^ hash(self.busicds)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.iscompare)
    value = (value * 31) ^ hash(self.effectdate)
    value = (value * 31) ^ hash(self.page)
    value = (value * 31) ^ hash(self.maxnum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FundconfigRecord:
  """
  Attributes:
   - val
   - val_type
   - busicd
   - state
   - iscompare
   - effecttime
   - expiretime
   - utime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'val', None, None, ), # 1
    (2, TType.I16, 'val_type', None, None, ), # 2
    (3, TType.STRING, 'busicd', None, None, ), # 3
    (4, TType.I16, 'state', None, None, ), # 4
    (5, TType.I16, 'iscompare', None, None, ), # 5
    (6, TType.STRING, 'effecttime', None, None, ), # 6
    (7, TType.STRING, 'expiretime', None, None, ), # 7
    (8, TType.STRING, 'utime', None, None, ), # 8
  )

  def __init__(self, val=None, val_type=None, busicd=None, state=None, iscompare=None, effecttime=None, expiretime=None, utime=None,):
    self.val = val
    self.val_type = val_type
    self.busicd = busicd
    self.state = state
    self.iscompare = iscompare
    self.effecttime = effecttime
    self.expiretime = expiretime
    self.utime = utime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.val = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.val_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.busicd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.state = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.iscompare = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.effecttime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.expiretime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.utime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundconfigRecord')
    if self.val is not None:
      oprot.writeFieldBegin('val', TType.STRING, 1)
      oprot.writeString(self.val)
      oprot.writeFieldEnd()
    if self.val_type is not None:
      oprot.writeFieldBegin('val_type', TType.I16, 2)
      oprot.writeI16(self.val_type)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 3)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I16, 4)
      oprot.writeI16(self.state)
      oprot.writeFieldEnd()
    if self.iscompare is not None:
      oprot.writeFieldBegin('iscompare', TType.I16, 5)
      oprot.writeI16(self.iscompare)
      oprot.writeFieldEnd()
    if self.effecttime is not None:
      oprot.writeFieldBegin('effecttime', TType.STRING, 6)
      oprot.writeString(self.effecttime)
      oprot.writeFieldEnd()
    if self.expiretime is not None:
      oprot.writeFieldBegin('expiretime', TType.STRING, 7)
      oprot.writeString(self.expiretime)
      oprot.writeFieldEnd()
    if self.utime is not None:
      oprot.writeFieldBegin('utime', TType.STRING, 8)
      oprot.writeString(self.utime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.val is None:
      raise TProtocol.TProtocolException(message='Required field val is unset!')
    if self.val_type is None:
      raise TProtocol.TProtocolException(message='Required field val_type is unset!')
    if self.busicd is None:
      raise TProtocol.TProtocolException(message='Required field busicd is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.val)
    value = (value * 31) ^ hash(self.val_type)
    value = (value * 31) ^ hash(self.busicd)
    value = (value * 31) ^ hash(self.state)
    value = (value * 31) ^ hash(self.iscompare)
    value = (value * 31) ^ hash(self.effecttime)
    value = (value * 31) ^ hash(self.expiretime)
    value = (value * 31) ^ hash(self.utime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FundConfigRet:
  """
  Attributes:
   - count
   - records
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'count', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.STRUCT,(FundconfigRecord, FundconfigRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, count=None, records=None,):
    self.count = count
    self.records = records

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.count = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = FundconfigRecord()
            _elem19.read(iprot)
            self.records.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundConfigRet')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I64, 1)
      oprot.writeI64(self.count)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.records))
      for iter20 in self.records:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.records)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MerchantPara:
  """
  Attributes:
   - chnl_userids
   - chnl_code
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'chnl_userids', (TType.STRING,None), None, ), # 1
    (2, TType.STRING, 'chnl_code', None, None, ), # 2
  )

  def __init__(self, chnl_userids=None, chnl_code=None,):
    self.chnl_userids = chnl_userids
    self.chnl_code = chnl_code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.chnl_userids = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString()
            self.chnl_userids.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.chnl_code = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MerchantPara')
    if self.chnl_userids is not None:
      oprot.writeFieldBegin('chnl_userids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.chnl_userids))
      for iter27 in self.chnl_userids:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.chnl_code is not None:
      oprot.writeFieldBegin('chnl_code', TType.STRING, 2)
      oprot.writeString(self.chnl_code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.chnl_userids)
    value = (value * 31) ^ hash(self.chnl_code)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DebitRet:
  """
  Attributes:
   - payamt
   - status
   - expectdate
   - paytime
   - biznum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'payamt', None, None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
    (3, TType.STRING, 'expectdate', None, None, ), # 3
    (4, TType.STRING, 'paytime', None, None, ), # 4
    (5, TType.STRING, 'biznum', None, None, ), # 5
  )

  def __init__(self, payamt=None, status=None, expectdate=None, paytime=None, biznum=None,):
    self.payamt = payamt
    self.status = status
    self.expectdate = expectdate
    self.paytime = paytime
    self.biznum = biznum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expectdate = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.paytime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.biznum = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DebitRet')
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 1)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.expectdate is not None:
      oprot.writeFieldBegin('expectdate', TType.STRING, 3)
      oprot.writeString(self.expectdate)
      oprot.writeFieldEnd()
    if self.paytime is not None:
      oprot.writeFieldBegin('paytime', TType.STRING, 4)
      oprot.writeString(self.paytime)
      oprot.writeFieldEnd()
    if self.biznum is not None:
      oprot.writeFieldBegin('biznum', TType.STRING, 5)
      oprot.writeString(self.biznum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.expectdate)
    value = (value * 31) ^ hash(self.paytime)
    value = (value * 31) ^ hash(self.biznum)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeRet:
  """
  Attributes:
   - tradeamt
   - payamt
   - fee
   - status
   - tradetime
   - tradetype
   - ori_coupon_amt
   - coupon_amt
   - chnlid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeamt', None, None, ), # 1
    (2, TType.I64, 'payamt', None, None, ), # 2
    (3, TType.I64, 'fee', None, None, ), # 3
    (4, TType.STRING, 'status', None, None, ), # 4
    (5, TType.STRING, 'tradetime', None, None, ), # 5
    (6, TType.STRING, 'tradetype', None, None, ), # 6
    (7, TType.I64, 'ori_coupon_amt', None, None, ), # 7
    (8, TType.I64, 'coupon_amt', None, None, ), # 8
    (9, TType.STRING, 'chnlid', None, None, ), # 9
  )

  def __init__(self, tradeamt=None, payamt=None, fee=None, status=None, tradetime=None, tradetype=None, ori_coupon_amt=None, coupon_amt=None, chnlid=None,):
    self.tradeamt = tradeamt
    self.payamt = payamt
    self.fee = fee
    self.status = status
    self.tradetime = tradetime
    self.tradetype = tradetype
    self.ori_coupon_amt = ori_coupon_amt
    self.coupon_amt = coupon_amt
    self.chnlid = chnlid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.payamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.status = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.tradetime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tradetype = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.ori_coupon_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.coupon_amt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.chnlid = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeRet')
    if self.tradeamt is not None:
      oprot.writeFieldBegin('tradeamt', TType.I64, 1)
      oprot.writeI64(self.tradeamt)
      oprot.writeFieldEnd()
    if self.payamt is not None:
      oprot.writeFieldBegin('payamt', TType.I64, 2)
      oprot.writeI64(self.payamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 3)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 4)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.tradetime is not None:
      oprot.writeFieldBegin('tradetime', TType.STRING, 5)
      oprot.writeString(self.tradetime)
      oprot.writeFieldEnd()
    if self.tradetype is not None:
      oprot.writeFieldBegin('tradetype', TType.STRING, 6)
      oprot.writeString(self.tradetype)
      oprot.writeFieldEnd()
    if self.ori_coupon_amt is not None:
      oprot.writeFieldBegin('ori_coupon_amt', TType.I64, 7)
      oprot.writeI64(self.ori_coupon_amt)
      oprot.writeFieldEnd()
    if self.coupon_amt is not None:
      oprot.writeFieldBegin('coupon_amt', TType.I64, 8)
      oprot.writeI64(self.coupon_amt)
      oprot.writeFieldEnd()
    if self.chnlid is not None:
      oprot.writeFieldBegin('chnlid', TType.STRING, 9)
      oprot.writeString(self.chnlid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tradeamt)
    value = (value * 31) ^ hash(self.payamt)
    value = (value * 31) ^ hash(self.fee)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.tradetime)
    value = (value * 31) ^ hash(self.tradetype)
    value = (value * 31) ^ hash(self.ori_coupon_amt)
    value = (value * 31) ^ hash(self.coupon_amt)
    value = (value * 31) ^ hash(self.chnlid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccounttradeArgs:
  """
  Attributes:
   - userid
   - settletype
   - starttime
   - endtime
   - settleflag
   - equalflag
   - userids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.I16, 'settletype', None, None, ), # 2
    (3, TType.STRING, 'starttime', None, None, ), # 3
    (4, TType.STRING, 'endtime', None, None, ), # 4
    (5, TType.I16, 'settleflag', None, 3, ), # 5
    (6, TType.I16, 'equalflag', None, 1, ), # 6
    (7, TType.LIST, 'userids', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, userid=None, settletype=None, starttime=None, endtime=None, settleflag=thrift_spec[5][4], equalflag=thrift_spec[6][4], userids=None,):
    self.userid = userid
    self.settletype = settletype
    self.starttime = starttime
    self.endtime = endtime
    self.settleflag = settleflag
    self.equalflag = equalflag
    self.userids = userids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.settletype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.starttime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.endtime = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.settleflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.equalflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.userids = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString()
            self.userids.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccounttradeArgs')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.settletype is not None:
      oprot.writeFieldBegin('settletype', TType.I16, 2)
      oprot.writeI16(self.settletype)
      oprot.writeFieldEnd()
    if self.starttime is not None:
      oprot.writeFieldBegin('starttime', TType.STRING, 3)
      oprot.writeString(self.starttime)
      oprot.writeFieldEnd()
    if self.endtime is not None:
      oprot.writeFieldBegin('endtime', TType.STRING, 4)
      oprot.writeString(self.endtime)
      oprot.writeFieldEnd()
    if self.settleflag is not None:
      oprot.writeFieldBegin('settleflag', TType.I16, 5)
      oprot.writeI16(self.settleflag)
      oprot.writeFieldEnd()
    if self.equalflag is not None:
      oprot.writeFieldBegin('equalflag', TType.I16, 6)
      oprot.writeI16(self.equalflag)
      oprot.writeFieldEnd()
    if self.userids is not None:
      oprot.writeFieldBegin('userids', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.userids))
      for iter34 in self.userids:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.settletype)
    value = (value * 31) ^ hash(self.starttime)
    value = (value * 31) ^ hash(self.endtime)
    value = (value * 31) ^ hash(self.settleflag)
    value = (value * 31) ^ hash(self.equalflag)
    value = (value * 31) ^ hash(self.userids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AccountRecord:
  """
  Attributes:
   - userid
   - settletype
   - settleflag
   - equalflag
   - syssn
   - orderno
   - busicd
   - tradenum
   - settleamt
   - qffee
   - tradedtm
   - qfstldate
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userid', None, None, ), # 1
    (2, TType.I16, 'settletype', None, None, ), # 2
    (3, TType.I16, 'settleflag', None, None, ), # 3
    (4, TType.I16, 'equalflag', None, None, ), # 4
    (5, TType.STRING, 'syssn', None, None, ), # 5
    (6, TType.STRING, 'orderno', None, None, ), # 6
    (7, TType.STRING, 'busicd', None, None, ), # 7
    (8, TType.I64, 'tradenum', None, None, ), # 8
    (9, TType.I64, 'settleamt', None, None, ), # 9
    (10, TType.I64, 'qffee', None, None, ), # 10
    (11, TType.STRING, 'tradedtm', None, None, ), # 11
    (12, TType.STRING, 'qfstldate', None, None, ), # 12
  )

  def __init__(self, userid=None, settletype=None, settleflag=None, equalflag=None, syssn=None, orderno=None, busicd=None, tradenum=None, settleamt=None, qffee=None, tradedtm=None, qfstldate=None,):
    self.userid = userid
    self.settletype = settletype
    self.settleflag = settleflag
    self.equalflag = equalflag
    self.syssn = syssn
    self.orderno = orderno
    self.busicd = busicd
    self.tradenum = tradenum
    self.settleamt = settleamt
    self.qffee = qffee
    self.tradedtm = tradedtm
    self.qfstldate = qfstldate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.settletype = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.settleflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.equalflag = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.syssn = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.orderno = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.busicd = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.tradenum = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.settleamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.qffee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.tradedtm = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.qfstldate = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AccountRecord')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.STRING, 1)
      oprot.writeString(self.userid)
      oprot.writeFieldEnd()
    if self.settletype is not None:
      oprot.writeFieldBegin('settletype', TType.I16, 2)
      oprot.writeI16(self.settletype)
      oprot.writeFieldEnd()
    if self.settleflag is not None:
      oprot.writeFieldBegin('settleflag', TType.I16, 3)
      oprot.writeI16(self.settleflag)
      oprot.writeFieldEnd()
    if self.equalflag is not None:
      oprot.writeFieldBegin('equalflag', TType.I16, 4)
      oprot.writeI16(self.equalflag)
      oprot.writeFieldEnd()
    if self.syssn is not None:
      oprot.writeFieldBegin('syssn', TType.STRING, 5)
      oprot.writeString(self.syssn)
      oprot.writeFieldEnd()
    if self.orderno is not None:
      oprot.writeFieldBegin('orderno', TType.STRING, 6)
      oprot.writeString(self.orderno)
      oprot.writeFieldEnd()
    if self.busicd is not None:
      oprot.writeFieldBegin('busicd', TType.STRING, 7)
      oprot.writeString(self.busicd)
      oprot.writeFieldEnd()
    if self.tradenum is not None:
      oprot.writeFieldBegin('tradenum', TType.I64, 8)
      oprot.writeI64(self.tradenum)
      oprot.writeFieldEnd()
    if self.settleamt is not None:
      oprot.writeFieldBegin('settleamt', TType.I64, 9)
      oprot.writeI64(self.settleamt)
      oprot.writeFieldEnd()
    if self.qffee is not None:
      oprot.writeFieldBegin('qffee', TType.I64, 10)
      oprot.writeI64(self.qffee)
      oprot.writeFieldEnd()
    if self.tradedtm is not None:
      oprot.writeFieldBegin('tradedtm', TType.STRING, 11)
      oprot.writeString(self.tradedtm)
      oprot.writeFieldEnd()
    if self.qfstldate is not None:
      oprot.writeFieldBegin('qfstldate', TType.STRING, 12)
      oprot.writeString(self.qfstldate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.settletype)
    value = (value * 31) ^ hash(self.settleflag)
    value = (value * 31) ^ hash(self.equalflag)
    value = (value * 31) ^ hash(self.syssn)
    value = (value * 31) ^ hash(self.orderno)
    value = (value * 31) ^ hash(self.busicd)
    value = (value * 31) ^ hash(self.tradenum)
    value = (value * 31) ^ hash(self.settleamt)
    value = (value * 31) ^ hash(self.qffee)
    value = (value * 31) ^ hash(self.tradedtm)
    value = (value * 31) ^ hash(self.qfstldate)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeStatis:
  """
  Attributes:
   - tradeamt
   - fee
   - cnt
   - tradedt
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeamt', None, None, ), # 1
    (2, TType.I64, 'fee', None, None, ), # 2
    (3, TType.I32, 'cnt', None, None, ), # 3
    (4, TType.STRING, 'tradedt', None, None, ), # 4
  )

  def __init__(self, tradeamt=None, fee=None, cnt=None, tradedt=None,):
    self.tradeamt = tradeamt
    self.fee = fee
    self.cnt = cnt
    self.tradedt = tradedt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeamt = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.fee = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cnt = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tradedt = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeStatis')
    if self.tradeamt is not None:
      oprot.writeFieldBegin('tradeamt', TType.I64, 1)
      oprot.writeI64(self.tradeamt)
      oprot.writeFieldEnd()
    if self.fee is not None:
      oprot.writeFieldBegin('fee', TType.I64, 2)
      oprot.writeI64(self.fee)
      oprot.writeFieldEnd()
    if self.cnt is not None:
      oprot.writeFieldBegin('cnt', TType.I32, 3)
      oprot.writeI32(self.cnt)
      oprot.writeFieldEnd()
    if self.tradedt is not None:
      oprot.writeFieldBegin('tradedt', TType.STRING, 4)
      oprot.writeString(self.tradedt)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tradeamt)
    value = (value * 31) ^ hash(self.fee)
    value = (value * 31) ^ hash(self.cnt)
    value = (value * 31) ^ hash(self.tradedt)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WithholdHistorySummary:
  """
  Attributes:
   - userid
   - title
   - amount
   - withhold_time
   - op_token
   - evidence_date
   - appsrc
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userid', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
    (3, TType.I32, 'amount', None, None, ), # 3
    (4, TType.STRING, 'withhold_time', None, None, ), # 4
    (5, TType.STRING, 'op_token', None, None, ), # 5
    (6, TType.STRING, 'evidence_date', None, None, ), # 6
    (7, TType.STRING, 'appsrc', None, None, ), # 7
  )

  def __init__(self, userid=None, title=None, amount=None, withhold_time=None, op_token=None, evidence_date=None, appsrc=None,):
    self.userid = userid
    self.title = title
    self.amount = amount
    self.withhold_time = withhold_time
    self.op_token = op_token
    self.evidence_date = evidence_date
    self.appsrc = appsrc

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.amount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.withhold_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.op_token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.evidence_date = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.appsrc = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WithholdHistorySummary')
    if self.userid is not None:
      oprot.writeFieldBegin('userid', TType.I64, 1)
      oprot.writeI64(self.userid)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.I32, 3)
      oprot.writeI32(self.amount)
      oprot.writeFieldEnd()
    if self.withhold_time is not None:
      oprot.writeFieldBegin('withhold_time', TType.STRING, 4)
      oprot.writeString(self.withhold_time)
      oprot.writeFieldEnd()
    if self.op_token is not None:
      oprot.writeFieldBegin('op_token', TType.STRING, 5)
      oprot.writeString(self.op_token)
      oprot.writeFieldEnd()
    if self.evidence_date is not None:
      oprot.writeFieldBegin('evidence_date', TType.STRING, 6)
      oprot.writeString(self.evidence_date)
      oprot.writeFieldEnd()
    if self.appsrc is not None:
      oprot.writeFieldBegin('appsrc', TType.STRING, 7)
      oprot.writeString(self.appsrc)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userid)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.amount)
    value = (value * 31) ^ hash(self.withhold_time)
    value = (value * 31) ^ hash(self.op_token)
    value = (value * 31) ^ hash(self.evidence_date)
    value = (value * 31) ^ hash(self.appsrc)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
