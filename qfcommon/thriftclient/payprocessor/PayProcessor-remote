#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import PayProcessor
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void ping()'
  print '  string trade(string json)'
  print '  string payment(string json)'
  print '  string payment2(string json)'
  print '  string reversal(string json)'
  print '  string cancel(string json)'
  print '  string cancel2(string json)'
  print '  string cancel_reversal(string json)'
  print '  string balance(string json)'
  print '  string tocard(string json)'
  print '  string tocredit(string json)'
  print '  string recharge(string json)'
  print '  string traderule(string json)'
  print '  string tradequery(string json)'
  print '  string tradeinfo(string json)'
  print '  string tradelist(string json)'
  print '  string cash(string json)'
  print '  string ypcheckin(string json)'
  print '  string orderadd(string json)'
  print '  string orderquery(string json)'
  print '  string orderclose(string json)'
  print '  string alipay_query(string json)'
  print '  string alipay_swipe(string json)'
  print '  string weixin_precreate(string json)'
  print '  string weixin_precreate_h5(string json)'
  print '  string weixin_swipe(string json)'
  print '  string weixin_reversal(string json)'
  print '  string weixin_query(string json)'
  print '  string weixin_refund(string json)'
  print '  string weixin_refund_query(string json)'
  print '  string weixin_close_order(string json)'
  print '  string weixin_download_bill(string json)'
  print '  string baifubao_precreate(string json)'
  print '  string icnotice(string json)'
  print '  string echo(string json)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = PayProcessor.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'trade':
  if len(args) != 1:
    print 'trade requires 1 args'
    sys.exit(1)
  pp.pprint(client.trade(args[0],))

elif cmd == 'payment':
  if len(args) != 1:
    print 'payment requires 1 args'
    sys.exit(1)
  pp.pprint(client.payment(args[0],))

elif cmd == 'payment2':
  if len(args) != 1:
    print 'payment2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.payment2(args[0],))

elif cmd == 'reversal':
  if len(args) != 1:
    print 'reversal requires 1 args'
    sys.exit(1)
  pp.pprint(client.reversal(args[0],))

elif cmd == 'cancel':
  if len(args) != 1:
    print 'cancel requires 1 args'
    sys.exit(1)
  pp.pprint(client.cancel(args[0],))

elif cmd == 'cancel2':
  if len(args) != 1:
    print 'cancel2 requires 1 args'
    sys.exit(1)
  pp.pprint(client.cancel2(args[0],))

elif cmd == 'cancel_reversal':
  if len(args) != 1:
    print 'cancel_reversal requires 1 args'
    sys.exit(1)
  pp.pprint(client.cancel_reversal(args[0],))

elif cmd == 'balance':
  if len(args) != 1:
    print 'balance requires 1 args'
    sys.exit(1)
  pp.pprint(client.balance(args[0],))

elif cmd == 'tocard':
  if len(args) != 1:
    print 'tocard requires 1 args'
    sys.exit(1)
  pp.pprint(client.tocard(args[0],))

elif cmd == 'tocredit':
  if len(args) != 1:
    print 'tocredit requires 1 args'
    sys.exit(1)
  pp.pprint(client.tocredit(args[0],))

elif cmd == 'recharge':
  if len(args) != 1:
    print 'recharge requires 1 args'
    sys.exit(1)
  pp.pprint(client.recharge(args[0],))

elif cmd == 'traderule':
  if len(args) != 1:
    print 'traderule requires 1 args'
    sys.exit(1)
  pp.pprint(client.traderule(args[0],))

elif cmd == 'tradequery':
  if len(args) != 1:
    print 'tradequery requires 1 args'
    sys.exit(1)
  pp.pprint(client.tradequery(args[0],))

elif cmd == 'tradeinfo':
  if len(args) != 1:
    print 'tradeinfo requires 1 args'
    sys.exit(1)
  pp.pprint(client.tradeinfo(args[0],))

elif cmd == 'tradelist':
  if len(args) != 1:
    print 'tradelist requires 1 args'
    sys.exit(1)
  pp.pprint(client.tradelist(args[0],))

elif cmd == 'cash':
  if len(args) != 1:
    print 'cash requires 1 args'
    sys.exit(1)
  pp.pprint(client.cash(args[0],))

elif cmd == 'ypcheckin':
  if len(args) != 1:
    print 'ypcheckin requires 1 args'
    sys.exit(1)
  pp.pprint(client.ypcheckin(args[0],))

elif cmd == 'orderadd':
  if len(args) != 1:
    print 'orderadd requires 1 args'
    sys.exit(1)
  pp.pprint(client.orderadd(args[0],))

elif cmd == 'orderquery':
  if len(args) != 1:
    print 'orderquery requires 1 args'
    sys.exit(1)
  pp.pprint(client.orderquery(args[0],))

elif cmd == 'orderclose':
  if len(args) != 1:
    print 'orderclose requires 1 args'
    sys.exit(1)
  pp.pprint(client.orderclose(args[0],))

elif cmd == 'alipay_query':
  if len(args) != 1:
    print 'alipay_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.alipay_query(args[0],))

elif cmd == 'alipay_swipe':
  if len(args) != 1:
    print 'alipay_swipe requires 1 args'
    sys.exit(1)
  pp.pprint(client.alipay_swipe(args[0],))

elif cmd == 'weixin_precreate':
  if len(args) != 1:
    print 'weixin_precreate requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_precreate(args[0],))

elif cmd == 'weixin_precreate_h5':
  if len(args) != 1:
    print 'weixin_precreate_h5 requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_precreate_h5(args[0],))

elif cmd == 'weixin_swipe':
  if len(args) != 1:
    print 'weixin_swipe requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_swipe(args[0],))

elif cmd == 'weixin_reversal':
  if len(args) != 1:
    print 'weixin_reversal requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_reversal(args[0],))

elif cmd == 'weixin_query':
  if len(args) != 1:
    print 'weixin_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_query(args[0],))

elif cmd == 'weixin_refund':
  if len(args) != 1:
    print 'weixin_refund requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_refund(args[0],))

elif cmd == 'weixin_refund_query':
  if len(args) != 1:
    print 'weixin_refund_query requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_refund_query(args[0],))

elif cmd == 'weixin_close_order':
  if len(args) != 1:
    print 'weixin_close_order requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_close_order(args[0],))

elif cmd == 'weixin_download_bill':
  if len(args) != 1:
    print 'weixin_download_bill requires 1 args'
    sys.exit(1)
  pp.pprint(client.weixin_download_bill(args[0],))

elif cmd == 'baifubao_precreate':
  if len(args) != 1:
    print 'baifubao_precreate requires 1 args'
    sys.exit(1)
  pp.pprint(client.baifubao_precreate(args[0],))

elif cmd == 'icnotice':
  if len(args) != 1:
    print 'icnotice requires 1 args'
    sys.exit(1)
  pp.pprint(client.icnotice(args[0],))

elif cmd == 'echo':
  if len(args) != 1:
    print 'echo requires 1 args'
    sys.exit(1)
  pp.pprint(client.echo(args[0],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
